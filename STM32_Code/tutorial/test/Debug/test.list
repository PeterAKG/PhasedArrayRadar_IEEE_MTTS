
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a064  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800a244  0800a244  0000b244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2cc  0800a2cc  0000c05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a2cc  0800a2cc  0000b2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2d4  0800a2d4  0000c05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2d4  0800a2d4  0000b2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2d8  0800a2d8  0000b2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800a2dc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010940  2000005c  0800a338  0000c05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001099c  0800a338  0000c99c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc4d  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000311e  00000000  00000000  00027cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  0002adf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001321  00000000  00000000  0002c670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024397  00000000  00000000  0002d991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c756  00000000  00000000  00051d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6b30  00000000  00000000  0006e47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164fae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f74  00000000  00000000  00164ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0016bf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a22c 	.word	0x0800a22c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	0800a22c 	.word	0x0800a22c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f002 fc13 	bl	8002e2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f86c 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f001 f99c 	bl	8001944 <MX_GPIO_Init>
  MX_DMA_Init();
 800060c:	f001 f94c 	bl	80018a8 <MX_DMA_Init>
  MX_ADC2_Init();
 8000610:	f000 f922 	bl	8000858 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000614:	f000 fa5e 	bl	8000ad4 <MX_DAC1_Init>
  MX_OPAMP3_Init();
 8000618:	f000 faa0 	bl	8000b5c <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 800061c:	f000 fac6 	bl	8000bac <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 8000620:	f000 faec 	bl	8000bfc <MX_OPAMP5_Init>
  MX_SPI1_Init();
 8000624:	f000 fb12 	bl	8000c4c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000628:	f000 fb48 	bl	8000cbc <MX_TIM1_Init>
  MX_TIM2_Init();
 800062c:	f000 fc20 	bl	8000e70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000630:	f000 fc96 	bl	8000f60 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000634:	f000 fcfc 	bl	8001030 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000638:	f000 fd62 	bl	8001100 <MX_TIM5_Init>
  MX_TIM8_Init();
 800063c:	f000 fdd8 	bl	80011f0 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000640:	f000 fed2 	bl	80013e8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000644:	f000 ff62 	bl	800150c <MX_TIM17_Init>
  MX_TIM20_Init();
 8000648:	f000 fff2 	bl	8001630 <MX_TIM20_Init>
  MX_USART1_UART_Init();
 800064c:	f001 f8e0 	bl	8001810 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000650:	f000 f886 	bl	8000760 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000654:	f000 f960 	bl	8000918 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000658:	f000 f9dc 	bl	8000a14 <MX_ADC4_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *) adc_buf1, 2 * ADC_BUF_LEN); //I figured out how the dual synchronous simultaneous mode works, but it broke randomly. For some reason, it is only writing the value of one channel to
 800065c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000660:	4916      	ldr	r1, [pc, #88]	@ (80006bc <main+0xc0>)
 8000662:	4817      	ldr	r0, [pc, #92]	@ (80006c0 <main+0xc4>)
 8000664:	f004 f874 	bl	8004750 <HAL_ADCEx_MultiModeStart_DMA>
  //the buffer. I have no idea why.

  HAL_ADCEx_MultiModeStart_DMA(&hadc3, (uint32_t *) adc_buf3, 2 * ADC_BUF_LEN);
 8000668:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800066c:	4915      	ldr	r1, [pc, #84]	@ (80006c4 <main+0xc8>)
 800066e:	4816      	ldr	r0, [pc, #88]	@ (80006c8 <main+0xcc>)
 8000670:	f004 f86e 	bl	8004750 <HAL_ADCEx_MultiModeStart_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8000674:	2064      	movs	r0, #100	@ 0x64
 8000676:	f002 fc49 	bl	8002f0c <HAL_Delay>

	  values = HAL_ADCEx_MultiModeGetValue(&hadc1);
 800067a:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <main+0xc4>)
 800067c:	f004 f924 	bl	80048c8 <HAL_ADCEx_MultiModeGetValue>
 8000680:	4603      	mov	r3, r0
 8000682:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <main+0xd0>)
 8000684:	6013      	str	r3, [r2, #0]
	  values2 = HAL_ADCEx_MultiModeGetValue(&hadc3);
 8000686:	4810      	ldr	r0, [pc, #64]	@ (80006c8 <main+0xcc>)
 8000688:	f004 f91e 	bl	80048c8 <HAL_ADCEx_MultiModeGetValue>
 800068c:	4603      	mov	r3, r0
 800068e:	4a10      	ldr	r2, [pc, #64]	@ (80006d0 <main+0xd4>)
 8000690:	6013      	str	r3, [r2, #0]

	  sprintf(msg, "1: %lx \r\n2: %lx \r\n", values, values2);
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <main+0xd0>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <main+0xd4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	490e      	ldr	r1, [pc, #56]	@ (80006d4 <main+0xd8>)
 800069c:	480e      	ldr	r0, [pc, #56]	@ (80006d8 <main+0xdc>)
 800069e:	f009 f925 	bl	80098ec <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80006a2:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <main+0xdc>)
 80006a4:	f7ff fdbc 	bl	8000220 <strlen>
 80006a8:	4603      	mov	r3, r0
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	4909      	ldr	r1, [pc, #36]	@ (80006d8 <main+0xdc>)
 80006b2:	480a      	ldr	r0, [pc, #40]	@ (80006dc <main+0xe0>)
 80006b4:	f008 fa6e 	bl	8008b94 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80006b8:	bf00      	nop
 80006ba:	e7db      	b.n	8000674 <main+0x78>
 80006bc:	20000078 	.word	0x20000078
 80006c0:	20010078 	.word	0x20010078
 80006c4:	20008078 	.word	0x20008078
 80006c8:	20010150 	.word	0x20010150
 80006cc:	20010814 	.word	0x20010814
 80006d0:	20010818 	.word	0x20010818
 80006d4:	0800a244 	.word	0x0800a244
 80006d8:	2001081c 	.word	0x2001081c
 80006dc:	20010780 	.word	0x20010780

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	@ 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	2238      	movs	r2, #56	@ 0x38
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f009 f91e 	bl	8009930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000702:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000706:	f005 fa01 	bl	8005b0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070a:	2302      	movs	r3, #2
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2340      	movs	r3, #64	@ 0x40
 8000716:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	4618      	mov	r0, r3
 8000722:	f005 faa7 	bl	8005c74 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800072c:	f001 fa66 	bl	8001bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000734:	2301      	movs	r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f005 fda5 	bl	8006298 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000754:	f001 fa52 	bl	8001bfc <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	@ 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	@ 0x30
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2220      	movs	r2, #32
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f009 f8d9 	bl	8009930 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077e:	4b34      	ldr	r3, [pc, #208]	@ (8000850 <MX_ADC1_Init+0xf0>)
 8000780:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000784:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000786:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <MX_ADC1_Init+0xf0>)
 8000788:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800078c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078e:	4b30      	ldr	r3, [pc, #192]	@ (8000850 <MX_ADC1_Init+0xf0>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000794:	4b2e      	ldr	r3, [pc, #184]	@ (8000850 <MX_ADC1_Init+0xf0>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800079a:	4b2d      	ldr	r3, [pc, #180]	@ (8000850 <MX_ADC1_Init+0xf0>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000850 <MX_ADC1_Init+0xf0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000850 <MX_ADC1_Init+0xf0>)
 80007a8:	2204      	movs	r2, #4
 80007aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ac:	4b28      	ldr	r3, [pc, #160]	@ (8000850 <MX_ADC1_Init+0xf0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007b2:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <MX_ADC1_Init+0xf0>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80007b8:	4b25      	ldr	r3, [pc, #148]	@ (8000850 <MX_ADC1_Init+0xf0>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007be:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <MX_ADC1_Init+0xf0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c6:	4b22      	ldr	r3, [pc, #136]	@ (8000850 <MX_ADC1_Init+0xf0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007cc:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <MX_ADC1_Init+0xf0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000850 <MX_ADC1_Init+0xf0>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007da:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <MX_ADC1_Init+0xf0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <MX_ADC1_Init+0xf0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e8:	4819      	ldr	r0, [pc, #100]	@ (8000850 <MX_ADC1_Init+0xf0>)
 80007ea:	f002 fddd 	bl	80033a8 <HAL_ADC_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80007f4:	f001 fa02 	bl	8001bfc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80007f8:	2306      	movs	r3, #6
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 80007fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000802:	2300      	movs	r3, #0
 8000804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080a:	4619      	mov	r1, r3
 800080c:	4810      	ldr	r0, [pc, #64]	@ (8000850 <MX_ADC1_Init+0xf0>)
 800080e:	f004 f8ad 	bl	800496c <HAL_ADCEx_MultiModeConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000818:	f001 f9f0 	bl	8001bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800081c:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <MX_ADC1_Init+0xf4>)
 800081e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000820:	2306      	movs	r3, #6
 8000822:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000828:	237f      	movs	r3, #127	@ 0x7f
 800082a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800082c:	2304      	movs	r3, #4
 800082e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_ADC1_Init+0xf0>)
 800083a:	f003 f9e5 	bl	8003c08 <HAL_ADC_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000844:	f001 f9da 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	3730      	adds	r7, #48	@ 0x30
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20010078 	.word	0x20010078
 8000854:	10c00010 	.word	0x10c00010

08000858 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	2220      	movs	r2, #32
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f009 f863 	bl	8009930 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800086a:	4b28      	ldr	r3, [pc, #160]	@ (800090c <MX_ADC2_Init+0xb4>)
 800086c:	4a28      	ldr	r2, [pc, #160]	@ (8000910 <MX_ADC2_Init+0xb8>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000870:	4b26      	ldr	r3, [pc, #152]	@ (800090c <MX_ADC2_Init+0xb4>)
 8000872:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000876:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000878:	4b24      	ldr	r3, [pc, #144]	@ (800090c <MX_ADC2_Init+0xb4>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087e:	4b23      	ldr	r3, [pc, #140]	@ (800090c <MX_ADC2_Init+0xb4>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000884:	4b21      	ldr	r3, [pc, #132]	@ (800090c <MX_ADC2_Init+0xb4>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800088a:	4b20      	ldr	r3, [pc, #128]	@ (800090c <MX_ADC2_Init+0xb4>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000890:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <MX_ADC2_Init+0xb4>)
 8000892:	2204      	movs	r2, #4
 8000894:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000896:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <MX_ADC2_Init+0xb4>)
 8000898:	2200      	movs	r2, #0
 800089a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800089c:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <MX_ADC2_Init+0xb4>)
 800089e:	2201      	movs	r2, #1
 80008a0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_ADC2_Init+0xb4>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008a8:	4b18      	ldr	r3, [pc, #96]	@ (800090c <MX_ADC2_Init+0xb4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80008b0:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MX_ADC2_Init+0xb4>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_ADC2_Init+0xb4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <MX_ADC2_Init+0xb4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008c6:	4811      	ldr	r0, [pc, #68]	@ (800090c <MX_ADC2_Init+0xb4>)
 80008c8:	f002 fd6e 	bl	80033a8 <HAL_ADC_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80008d2:	f001 f993 	bl	8001bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_ADC2_Init+0xbc>)
 80008d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008da:	2306      	movs	r3, #6
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008e2:	237f      	movs	r3, #127	@ 0x7f
 80008e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008e6:	2304      	movs	r3, #4
 80008e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	@ (800090c <MX_ADC2_Init+0xb4>)
 80008f4:	f003 f988 	bl	8003c08 <HAL_ADC_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80008fe:	f001 f97d 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200100e4 	.word	0x200100e4
 8000910:	50000100 	.word	0x50000100
 8000914:	21800100 	.word	0x21800100

08000918 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	@ 0x30
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800091e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2220      	movs	r2, #32
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f008 fffd 	bl	8009930 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000936:	4b34      	ldr	r3, [pc, #208]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 8000938:	4a34      	ldr	r2, [pc, #208]	@ (8000a0c <MX_ADC3_Init+0xf4>)
 800093a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800093c:	4b32      	ldr	r3, [pc, #200]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 800093e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000942:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000944:	4b30      	ldr	r3, [pc, #192]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800094a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000950:	4b2d      	ldr	r3, [pc, #180]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000956:	4b2c      	ldr	r3, [pc, #176]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 800095e:	2204      	movs	r2, #4
 8000960:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000962:	4b29      	ldr	r3, [pc, #164]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 8000964:	2200      	movs	r2, #0
 8000966:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000968:	4b27      	ldr	r3, [pc, #156]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 800096a:	2201      	movs	r2, #1
 800096c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800096e:	4b26      	ldr	r3, [pc, #152]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 8000970:	2201      	movs	r2, #1
 8000972:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000974:	4b24      	ldr	r3, [pc, #144]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097c:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 800097e:	2200      	movs	r2, #0
 8000980:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000982:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 8000984:	2200      	movs	r2, #0
 8000986:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000988:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 800098a:	2200      	movs	r2, #0
 800098c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000990:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 8000992:	2200      	movs	r2, #0
 8000994:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000996:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800099e:	481a      	ldr	r0, [pc, #104]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 80009a0:	f002 fd02 	bl	80033a8 <HAL_ADC_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80009aa:	f001 f927 	bl	8001bfc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80009ae:	2306      	movs	r3, #6
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 80009b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80009bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	4811      	ldr	r0, [pc, #68]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 80009c4:	f003 ffd2 	bl	800496c <HAL_ADCEx_MultiModeConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 80009ce:	f001 f915 	bl	8001bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_ADC3_Init+0xf8>)
 80009d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009d6:	2306      	movs	r3, #6
 80009d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009de:	237f      	movs	r3, #127	@ 0x7f
 80009e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009e2:	2304      	movs	r3, #4
 80009e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <MX_ADC3_Init+0xf0>)
 80009f0:	f003 f90a 	bl	8003c08 <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC3_Init+0xe6>
  {
    Error_Handler();
 80009fa:	f001 f8ff 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3730      	adds	r7, #48	@ 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20010150 	.word	0x20010150
 8000a0c:	50000400 	.word	0x50000400
 8000a10:	3ac04000 	.word	0x3ac04000

08000a14 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2220      	movs	r2, #32
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f008 ff85 	bl	8009930 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000a26:	4b28      	ldr	r3, [pc, #160]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a28:	4a28      	ldr	r2, [pc, #160]	@ (8000acc <MX_ADC4_Init+0xb8>)
 8000a2a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a2c:	4b26      	ldr	r3, [pc, #152]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a32:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000a34:	4b24      	ldr	r3, [pc, #144]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a3a:	4b23      	ldr	r3, [pc, #140]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000a40:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a46:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a4e:	2204      	movs	r2, #4
 8000a50:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000a82:	4811      	ldr	r0, [pc, #68]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000a84:	f002 fc90 	bl	80033a8 <HAL_ADC_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 8000a8e:	f001 f8b5 	bl	8001bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <MX_ADC4_Init+0xbc>)
 8000a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a96:	2306      	movs	r3, #6
 8000a98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a9e:	237f      	movs	r3, #127	@ 0x7f
 8000aa0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	@ (8000ac8 <MX_ADC4_Init+0xb4>)
 8000ab0:	f003 f8aa 	bl	8003c08 <HAL_ADC_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8000aba:	f001 f89f 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200101bc 	.word	0x200101bc
 8000acc:	50000500 	.word	0x50000500
 8000ad0:	04300002 	.word	0x04300002

08000ad4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	@ 0x30
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ada:	463b      	mov	r3, r7
 8000adc:	2230      	movs	r2, #48	@ 0x30
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f008 ff25 	bl	8009930 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <MX_DAC1_Init+0x80>)
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b58 <MX_DAC1_Init+0x84>)
 8000aea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000aec:	4819      	ldr	r0, [pc, #100]	@ (8000b54 <MX_DAC1_Init+0x80>)
 8000aee:	f004 f954 	bl	8004d9a <HAL_DAC_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000af8:	f001 f880 	bl	8001bfc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000afc:	2302      	movs	r3, #2
 8000afe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	4619      	mov	r1, r3
 8000b26:	480b      	ldr	r0, [pc, #44]	@ (8000b54 <MX_DAC1_Init+0x80>)
 8000b28:	f004 f95a 	bl	8004de0 <HAL_DAC_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000b32:	f001 f863 	bl	8001bfc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	2210      	movs	r2, #16
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_DAC1_Init+0x80>)
 8000b3e:	f004 f94f 	bl	8004de0 <HAL_DAC_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000b48:	f001 f858 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	3730      	adds	r7, #48	@ 0x30
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200103a8 	.word	0x200103a8
 8000b58:	50000800 	.word	0x50000800

08000b5c <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000b60:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <MX_OPAMP3_Init+0x48>)
 8000b62:	4a11      	ldr	r2, [pc, #68]	@ (8000ba8 <MX_OPAMP3_Init+0x4c>)
 8000b64:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <MX_OPAMP3_Init+0x48>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_STANDALONE_MODE;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <MX_OPAMP3_Init+0x48>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hopamp3.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_OPAMP3_Init+0x48>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <MX_OPAMP3_Init+0x48>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_OPAMP3_Init+0x48>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <MX_OPAMP3_Init+0x48>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_OPAMP3_Init+0x48>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MX_OPAMP3_Init+0x48>)
 8000b92:	f004 feeb 	bl	800596c <HAL_OPAMP_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_OPAMP3_Init+0x44>
  {
    Error_Handler();
 8000b9c:	f001 f82e 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200103bc 	.word	0x200103bc
 8000ba8:	40010308 	.word	0x40010308

08000bac <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_OPAMP4_Init+0x48>)
 8000bb2:	4a11      	ldr	r2, [pc, #68]	@ (8000bf8 <MX_OPAMP4_Init+0x4c>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <MX_OPAMP4_Init+0x48>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_STANDALONE_MODE;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <MX_OPAMP4_Init+0x48>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hopamp4.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_OPAMP4_Init+0x48>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_OPAMP4_Init+0x48>)
 8000bca:	2208      	movs	r2, #8
 8000bcc:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_OPAMP4_Init+0x48>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <MX_OPAMP4_Init+0x48>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_OPAMP4_Init+0x48>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <MX_OPAMP4_Init+0x48>)
 8000be2:	f004 fec3 	bl	800596c <HAL_OPAMP_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_OPAMP4_Init+0x44>
  {
    Error_Handler();
 8000bec:	f001 f806 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200103f8 	.word	0x200103f8
 8000bf8:	4001030c 	.word	0x4001030c

08000bfc <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8000c00:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <MX_OPAMP5_Init+0x48>)
 8000c02:	4a11      	ldr	r2, [pc, #68]	@ (8000c48 <MX_OPAMP5_Init+0x4c>)
 8000c04:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <MX_OPAMP5_Init+0x48>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_STANDALONE_MODE;
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <MX_OPAMP5_Init+0x48>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hopamp5.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000c12:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_OPAMP5_Init+0x48>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <MX_OPAMP5_Init+0x48>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = DISABLE;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <MX_OPAMP5_Init+0x48>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <MX_OPAMP5_Init+0x48>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_OPAMP5_Init+0x48>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <MX_OPAMP5_Init+0x48>)
 8000c32:	f004 fe9b 	bl	800596c <HAL_OPAMP_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_OPAMP5_Init+0x44>
  {
    Error_Handler();
 8000c3c:	f000 ffde 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20010434 	.word	0x20010434
 8000c48:	40010310 	.word	0x40010310

08000c4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_SPI1_Init+0x68>)
 8000c52:	4a19      	ldr	r2, [pc, #100]	@ (8000cb8 <MX_SPI1_Init+0x6c>)
 8000c54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000c56:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <MX_SPI1_Init+0x68>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_SPI1_Init+0x68>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c62:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_SPI1_Init+0x68>)
 8000c64:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <MX_SPI1_Init+0x68>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <MX_SPI1_Init+0x68>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_SPI1_Init+0x68>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <MX_SPI1_Init+0x68>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_SPI1_Init+0x68>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <MX_SPI1_Init+0x68>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_SPI1_Init+0x68>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <MX_SPI1_Init+0x68>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_SPI1_Init+0x68>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <MX_SPI1_Init+0x68>)
 8000ca2:	f005 ff63 	bl	8006b6c <HAL_SPI_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000cac:	f000 ffa6 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20010470 	.word	0x20010470
 8000cb8:	40013000 	.word	0x40013000

08000cbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0a0      	sub	sp, #128	@ 0x80
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cc2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000cde:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2234      	movs	r2, #52	@ 0x34
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f008 fe13 	bl	8009930 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d0a:	4b57      	ldr	r3, [pc, #348]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000d0c:	4a57      	ldr	r2, [pc, #348]	@ (8000e6c <MX_TIM1_Init+0x1b0>)
 8000d0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d10:	4b55      	ldr	r3, [pc, #340]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b54      	ldr	r3, [pc, #336]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d1c:	4b52      	ldr	r3, [pc, #328]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000d1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d24:	4b50      	ldr	r3, [pc, #320]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b4d      	ldr	r3, [pc, #308]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d36:	484c      	ldr	r0, [pc, #304]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000d38:	f005 ffc3 	bl	8006cc2 <HAL_TIM_Base_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000d42:	f000 ff5b 	bl	8001bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d46:	4848      	ldr	r0, [pc, #288]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000d48:	f006 f873 	bl	8006e32 <HAL_TIM_PWM_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000d52:	f000 ff53 	bl	8001bfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000d56:	2306      	movs	r3, #6
 8000d58:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000d5e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d62:	4619      	mov	r1, r3
 8000d64:	4840      	ldr	r0, [pc, #256]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000d66:	f006 fd03 	bl	8007770 <HAL_TIM_SlaveConfigSynchro>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000d70:	f000 ff44 	bl	8001bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	667b      	str	r3, [r7, #100]	@ 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d80:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d84:	4619      	mov	r1, r3
 8000d86:	4838      	ldr	r0, [pc, #224]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000d88:	f007 fc68 	bl	800865c <HAL_TIMEx_MasterConfigSynchronization>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000d92:	f000 ff33 	bl	8001bfc <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000d96:	2301      	movs	r3, #1
 8000d98:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000da2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000da6:	461a      	mov	r2, r3
 8000da8:	2101      	movs	r1, #1
 8000daa:	482f      	ldr	r0, [pc, #188]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000dac:	f007 fd80 	bl	80088b0 <HAL_TIMEx_ConfigBreakInput>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000db6:	f000 ff21 	bl	8001bfc <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000dba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	4829      	ldr	r0, [pc, #164]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000dc4:	f007 fd74 	bl	80088b0 <HAL_TIMEx_ConfigBreakInput>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000dce:	f000 ff15 	bl	8001bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd2:	2360      	movs	r3, #96	@ 0x60
 8000dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dde:	2300      	movs	r3, #0
 8000de0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000df2:	2208      	movs	r2, #8
 8000df4:	4619      	mov	r1, r3
 8000df6:	481c      	ldr	r0, [pc, #112]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000df8:	f006 fa9a 	bl	8007330 <HAL_TIM_PWM_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000e02:	f000 fefb 	bl	8001bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000e06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000e0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000e2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4807      	ldr	r0, [pc, #28]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000e4c:	f007 fc9c 	bl	8008788 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 8000e56:	f000 fed1 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e5a:	4803      	ldr	r0, [pc, #12]	@ (8000e68 <MX_TIM1_Init+0x1ac>)
 8000e5c:	f001 fd6e 	bl	800293c <HAL_TIM_MspPostInit>

}
 8000e60:	bf00      	nop
 8000e62:	3780      	adds	r7, #128	@ 0x80
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200104d4 	.word	0x200104d4
 8000e6c:	40012c00 	.word	0x40012c00

08000e70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b090      	sub	sp, #64	@ 0x40
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	2224      	movs	r2, #36	@ 0x24
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f008 fd56 	bl	8009930 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e90:	463b      	mov	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f5c <MX_TIM2_Init+0xec>)
 8000e9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ea2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f5c <MX_TIM2_Init+0xec>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8000f5c <MX_TIM2_Init+0xec>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <MX_TIM2_Init+0xec>)
 8000eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb8:	4b28      	ldr	r3, [pc, #160]	@ (8000f5c <MX_TIM2_Init+0xec>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebe:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <MX_TIM2_Init+0xec>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ec4:	4825      	ldr	r0, [pc, #148]	@ (8000f5c <MX_TIM2_Init+0xec>)
 8000ec6:	f006 f815 	bl	8006ef4 <HAL_TIM_IC_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000ed0:	f000 fe94 	bl	8001bfc <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000edc:	2301      	movs	r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Filter = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eec:	2301      	movs	r3, #1
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Filter = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4817      	ldr	r0, [pc, #92]	@ (8000f5c <MX_TIM2_Init+0xec>)
 8000f00:	f006 f84f 	bl	8006fa2 <HAL_TIM_Encoder_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000f0a:	f000 fe77 	bl	8001bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480f      	ldr	r0, [pc, #60]	@ (8000f5c <MX_TIM2_Init+0xec>)
 8000f1e:	f007 fb9d 	bl	800865c <HAL_TIMEx_MasterConfigSynchronization>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000f28:	f000 fe68 	bl	8001bfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f30:	2301      	movs	r3, #1
 8000f32:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2208      	movs	r2, #8
 8000f40:	4619      	mov	r1, r3
 8000f42:	4806      	ldr	r0, [pc, #24]	@ (8000f5c <MX_TIM2_Init+0xec>)
 8000f44:	f006 f958 	bl	80071f8 <HAL_TIM_IC_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000f4e:	f000 fe55 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	3740      	adds	r7, #64	@ 0x40
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20010520 	.word	0x20010520

08000f60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f8c:	4b26      	ldr	r3, [pc, #152]	@ (8001028 <MX_TIM3_Init+0xc8>)
 8000f8e:	4a27      	ldr	r2, [pc, #156]	@ (800102c <MX_TIM3_Init+0xcc>)
 8000f90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f92:	4b25      	ldr	r3, [pc, #148]	@ (8001028 <MX_TIM3_Init+0xc8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b23      	ldr	r3, [pc, #140]	@ (8001028 <MX_TIM3_Init+0xc8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f9e:	4b22      	ldr	r3, [pc, #136]	@ (8001028 <MX_TIM3_Init+0xc8>)
 8000fa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b20      	ldr	r3, [pc, #128]	@ (8001028 <MX_TIM3_Init+0xc8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <MX_TIM3_Init+0xc8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fb2:	481d      	ldr	r0, [pc, #116]	@ (8001028 <MX_TIM3_Init+0xc8>)
 8000fb4:	f005 fe85 	bl	8006cc2 <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000fbe:	f000 fe1d 	bl	8001bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4816      	ldr	r0, [pc, #88]	@ (8001028 <MX_TIM3_Init+0xc8>)
 8000fd0:	f006 fac2 	bl	8007558 <HAL_TIM_ConfigClockSource>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000fda:	f000 fe0f 	bl	8001bfc <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <MX_TIM3_Init+0xc8>)
 8000ff6:	f007 fa77 	bl	80084e8 <HAL_TIMEx_HallSensor_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8001000:	f000 fdfc 	bl	8001bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001004:	2350      	movs	r3, #80	@ 0x50
 8001006:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	@ (8001028 <MX_TIM3_Init+0xc8>)
 8001012:	f007 fb23 	bl	800865c <HAL_TIMEx_MasterConfigSynchronization>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 800101c:	f000 fdee 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	3730      	adds	r7, #48	@ 0x30
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2001056c 	.word	0x2001056c
 800102c:	40000400 	.word	0x40000400

08001030 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	@ 0x30
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800105c:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <MX_TIM4_Init+0xc8>)
 800105e:	4a27      	ldr	r2, [pc, #156]	@ (80010fc <MX_TIM4_Init+0xcc>)
 8001060:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001062:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <MX_TIM4_Init+0xc8>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <MX_TIM4_Init+0xc8>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800106e:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <MX_TIM4_Init+0xc8>)
 8001070:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001074:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b20      	ldr	r3, [pc, #128]	@ (80010f8 <MX_TIM4_Init+0xc8>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <MX_TIM4_Init+0xc8>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001082:	481d      	ldr	r0, [pc, #116]	@ (80010f8 <MX_TIM4_Init+0xc8>)
 8001084:	f005 fe1d 	bl	8006cc2 <HAL_TIM_Base_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800108e:	f000 fdb5 	bl	8001bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001096:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	4619      	mov	r1, r3
 800109e:	4816      	ldr	r0, [pc, #88]	@ (80010f8 <MX_TIM4_Init+0xc8>)
 80010a0:	f006 fa5a 	bl	8007558 <HAL_TIM_ConfigClockSource>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80010aa:	f000 fda7 	bl	8001bfc <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4619      	mov	r1, r3
 80010c4:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <MX_TIM4_Init+0xc8>)
 80010c6:	f007 fa0f 	bl	80084e8 <HAL_TIMEx_HallSensor_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 80010d0:	f000 fd94 	bl	8001bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80010d4:	2350      	movs	r3, #80	@ 0x50
 80010d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_TIM4_Init+0xc8>)
 80010e2:	f007 fabb 	bl	800865c <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 80010ec:	f000 fd86 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3730      	adds	r7, #48	@ 0x30
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200105b8 	.word	0x200105b8
 80010fc:	40000800 	.word	0x40000800

08001100 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b090      	sub	sp, #64	@ 0x40
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	2224      	movs	r2, #36	@ 0x24
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f008 fc0e 	bl	8009930 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001120:	463b      	mov	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800112c:	4b2e      	ldr	r3, [pc, #184]	@ (80011e8 <MX_TIM5_Init+0xe8>)
 800112e:	4a2f      	ldr	r2, [pc, #188]	@ (80011ec <MX_TIM5_Init+0xec>)
 8001130:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001132:	4b2d      	ldr	r3, [pc, #180]	@ (80011e8 <MX_TIM5_Init+0xe8>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b2b      	ldr	r3, [pc, #172]	@ (80011e8 <MX_TIM5_Init+0xe8>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800113e:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <MX_TIM5_Init+0xe8>)
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001146:	4b28      	ldr	r3, [pc, #160]	@ (80011e8 <MX_TIM5_Init+0xe8>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114c:	4b26      	ldr	r3, [pc, #152]	@ (80011e8 <MX_TIM5_Init+0xe8>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001152:	4825      	ldr	r0, [pc, #148]	@ (80011e8 <MX_TIM5_Init+0xe8>)
 8001154:	f005 fece 	bl	8006ef4 <HAL_TIM_IC_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 800115e:	f000 fd4d 	bl	8001bfc <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001162:	2301      	movs	r3, #1
 8001164:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800116a:	2301      	movs	r3, #1
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Filter = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001176:	2300      	movs	r3, #0
 8001178:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800117a:	2301      	movs	r3, #1
 800117c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Filter = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	4816      	ldr	r0, [pc, #88]	@ (80011e8 <MX_TIM5_Init+0xe8>)
 800118e:	f005 ff08 	bl	8006fa2 <HAL_TIM_Encoder_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001198:	f000 fd30 	bl	8001bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	4619      	mov	r1, r3
 80011aa:	480f      	ldr	r0, [pc, #60]	@ (80011e8 <MX_TIM5_Init+0xe8>)
 80011ac:	f007 fa56 	bl	800865c <HAL_TIMEx_MasterConfigSynchronization>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM5_Init+0xba>
  {
    Error_Handler();
 80011b6:	f000 fd21 	bl	8001bfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011be:	2301      	movs	r3, #1
 80011c0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80011ca:	463b      	mov	r3, r7
 80011cc:	2208      	movs	r2, #8
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <MX_TIM5_Init+0xe8>)
 80011d2:	f006 f811 	bl	80071f8 <HAL_TIM_IC_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM5_Init+0xe0>
  {
    Error_Handler();
 80011dc:	f000 fd0e 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	3740      	adds	r7, #64	@ 0x40
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20010604 	.word	0x20010604
 80011ec:	40000c00 	.word	0x40000c00

080011f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0a0      	sub	sp, #128	@ 0x80
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011f6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001206:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001212:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	615a      	str	r2, [r3, #20]
 8001230:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2234      	movs	r2, #52	@ 0x34
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f008 fb79 	bl	8009930 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800123e:	4b68      	ldr	r3, [pc, #416]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 8001240:	4a68      	ldr	r2, [pc, #416]	@ (80013e4 <MX_TIM8_Init+0x1f4>)
 8001242:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001244:	4b66      	ldr	r3, [pc, #408]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b65      	ldr	r3, [pc, #404]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001250:	4b63      	ldr	r3, [pc, #396]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 8001252:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001256:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b61      	ldr	r3, [pc, #388]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800125e:	4b60      	ldr	r3, [pc, #384]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b5e      	ldr	r3, [pc, #376]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800126a:	485d      	ldr	r0, [pc, #372]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 800126c:	f005 fd29 	bl	8006cc2 <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001276:	f000 fcc1 	bl	8001bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800127a:	4859      	ldr	r0, [pc, #356]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 800127c:	f005 fdd9 	bl	8006e32 <HAL_TIM_PWM_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001286:	f000 fcb9 	bl	8001bfc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800128a:	4855      	ldr	r0, [pc, #340]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 800128c:	f005 fd70 	bl	8006d70 <HAL_TIM_OC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001296:	f000 fcb1 	bl	8001bfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800129a:	2306      	movs	r3, #6
 800129c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800129e:	2310      	movs	r3, #16
 80012a0:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80012a2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012a6:	4619      	mov	r1, r3
 80012a8:	484d      	ldr	r0, [pc, #308]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 80012aa:	f006 fa61 	bl	8007770 <HAL_TIM_SlaveConfigSynchro>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80012b4:	f000 fca2 	bl	8001bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	667b      	str	r3, [r7, #100]	@ 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012c4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80012c8:	4619      	mov	r1, r3
 80012ca:	4845      	ldr	r0, [pc, #276]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 80012cc:	f007 f9c6 	bl	800865c <HAL_TIMEx_MasterConfigSynchronization>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM8_Init+0xea>
  {
    Error_Handler();
 80012d6:	f000 fc91 	bl	8001bfc <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80012da:	2301      	movs	r3, #1
 80012dc:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80012de:	2301      	movs	r3, #1
 80012e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80012e2:	2300      	movs	r3, #0
 80012e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80012e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ea:	461a      	mov	r2, r3
 80012ec:	2101      	movs	r1, #1
 80012ee:	483c      	ldr	r0, [pc, #240]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 80012f0:	f007 fade 	bl	80088b0 <HAL_TIMEx_ConfigBreakInput>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80012fa:	f000 fc7f 	bl	8001bfc <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80012fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001302:	461a      	mov	r2, r3
 8001304:	2102      	movs	r1, #2
 8001306:	4836      	ldr	r0, [pc, #216]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 8001308:	f007 fad2 	bl	80088b0 <HAL_TIMEx_ConfigBreakInput>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001312:	f000 fc73 	bl	8001bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001316:	2360      	movs	r3, #96	@ 0x60
 8001318:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131e:	2300      	movs	r3, #0
 8001320:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001322:	2300      	movs	r3, #0
 8001324:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001332:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001336:	2200      	movs	r2, #0
 8001338:	4619      	mov	r1, r3
 800133a:	4829      	ldr	r0, [pc, #164]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 800133c:	f005 fff8 	bl	8007330 <HAL_TIM_PWM_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8001346:	f000 fc59 	bl	8001bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800134a:	2300      	movs	r3, #0
 800134c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800134e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001352:	2204      	movs	r2, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4822      	ldr	r0, [pc, #136]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 8001358:	f005 fed4 	bl	8007104 <HAL_TIM_OC_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM8_Init+0x176>
  {
    Error_Handler();
 8001362:	f000 fc4b 	bl	8001bfc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001366:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800136a:	2208      	movs	r2, #8
 800136c:	4619      	mov	r1, r3
 800136e:	481c      	ldr	r0, [pc, #112]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 8001370:	f005 fec8 	bl	8007104 <HAL_TIM_OC_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM8_Init+0x18e>
  {
    Error_Handler();
 800137a:	f000 fc3f 	bl	8001bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800137e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001382:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001384:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001388:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001392:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001396:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001398:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800139c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80013a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 80013c4:	f007 f9e0 	bl	8008788 <HAL_TIMEx_ConfigBreakDeadTime>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM8_Init+0x1e2>
  {
    Error_Handler();
 80013ce:	f000 fc15 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013d2:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <MX_TIM8_Init+0x1f0>)
 80013d4:	f001 fab2 	bl	800293c <HAL_TIM_MspPostInit>

}
 80013d8:	bf00      	nop
 80013da:	3780      	adds	r7, #128	@ 0x80
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20010650 	.word	0x20010650
 80013e4:	40013400 	.word	0x40013400

080013e8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b098      	sub	sp, #96	@ 0x60
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80013ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
 800140a:	615a      	str	r2, [r3, #20]
 800140c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2234      	movs	r2, #52	@ 0x34
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f008 fa8b 	bl	8009930 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800141a:	4b3a      	ldr	r3, [pc, #232]	@ (8001504 <MX_TIM16_Init+0x11c>)
 800141c:	4a3a      	ldr	r2, [pc, #232]	@ (8001508 <MX_TIM16_Init+0x120>)
 800141e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001420:	4b38      	ldr	r3, [pc, #224]	@ (8001504 <MX_TIM16_Init+0x11c>)
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	4b37      	ldr	r3, [pc, #220]	@ (8001504 <MX_TIM16_Init+0x11c>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800142c:	4b35      	ldr	r3, [pc, #212]	@ (8001504 <MX_TIM16_Init+0x11c>)
 800142e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001432:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001434:	4b33      	ldr	r3, [pc, #204]	@ (8001504 <MX_TIM16_Init+0x11c>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800143a:	4b32      	ldr	r3, [pc, #200]	@ (8001504 <MX_TIM16_Init+0x11c>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001440:	4b30      	ldr	r3, [pc, #192]	@ (8001504 <MX_TIM16_Init+0x11c>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001446:	482f      	ldr	r0, [pc, #188]	@ (8001504 <MX_TIM16_Init+0x11c>)
 8001448:	f005 fc3b 	bl	8006cc2 <HAL_TIM_Base_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001452:	f000 fbd3 	bl	8001bfc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001456:	482b      	ldr	r0, [pc, #172]	@ (8001504 <MX_TIM16_Init+0x11c>)
 8001458:	f005 fc8a 	bl	8006d70 <HAL_TIM_OC_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM16_Init+0x7e>
  {
    Error_Handler();
 8001462:	f000 fbcb 	bl	8001bfc <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001466:	2301      	movs	r3, #1
 8001468:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800146a:	2301      	movs	r3, #1
 800146c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800146e:	2300      	movs	r3, #0
 8001470:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim16, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001472:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001476:	461a      	mov	r2, r3
 8001478:	2101      	movs	r1, #1
 800147a:	4822      	ldr	r0, [pc, #136]	@ (8001504 <MX_TIM16_Init+0x11c>)
 800147c:	f007 fa18 	bl	80088b0 <HAL_TIMEx_ConfigBreakInput>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM16_Init+0xa2>
  {
    Error_Handler();
 8001486:	f000 fbb9 	bl	8001bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800148a:	2300      	movs	r3, #0
 800148c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001492:	2300      	movs	r3, #0
 8001494:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001496:	2300      	movs	r3, #0
 8001498:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014aa:	2200      	movs	r2, #0
 80014ac:	4619      	mov	r1, r3
 80014ae:	4815      	ldr	r0, [pc, #84]	@ (8001504 <MX_TIM16_Init+0x11c>)
 80014b0:	f005 fe28 	bl	8007104 <HAL_TIM_OC_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM16_Init+0xd6>
  {
    Error_Handler();
 80014ba:	f000 fb9f 	bl	8001bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80014ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4807      	ldr	r0, [pc, #28]	@ (8001504 <MX_TIM16_Init+0x11c>)
 80014e8:	f007 f94e 	bl	8008788 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM16_Init+0x10e>
  {
    Error_Handler();
 80014f2:	f000 fb83 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80014f6:	4803      	ldr	r0, [pc, #12]	@ (8001504 <MX_TIM16_Init+0x11c>)
 80014f8:	f001 fa20 	bl	800293c <HAL_TIM_MspPostInit>

}
 80014fc:	bf00      	nop
 80014fe:	3760      	adds	r7, #96	@ 0x60
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2001069c 	.word	0x2001069c
 8001508:	40014400 	.word	0x40014400

0800150c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b098      	sub	sp, #96	@ 0x60
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001512:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	615a      	str	r2, [r3, #20]
 8001530:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2234      	movs	r2, #52	@ 0x34
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f008 f9f9 	bl	8009930 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800153e:	4b3a      	ldr	r3, [pc, #232]	@ (8001628 <MX_TIM17_Init+0x11c>)
 8001540:	4a3a      	ldr	r2, [pc, #232]	@ (800162c <MX_TIM17_Init+0x120>)
 8001542:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001544:	4b38      	ldr	r3, [pc, #224]	@ (8001628 <MX_TIM17_Init+0x11c>)
 8001546:	2200      	movs	r2, #0
 8001548:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b37      	ldr	r3, [pc, #220]	@ (8001628 <MX_TIM17_Init+0x11c>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001550:	4b35      	ldr	r3, [pc, #212]	@ (8001628 <MX_TIM17_Init+0x11c>)
 8001552:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001556:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001558:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <MX_TIM17_Init+0x11c>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800155e:	4b32      	ldr	r3, [pc, #200]	@ (8001628 <MX_TIM17_Init+0x11c>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001564:	4b30      	ldr	r3, [pc, #192]	@ (8001628 <MX_TIM17_Init+0x11c>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800156a:	482f      	ldr	r0, [pc, #188]	@ (8001628 <MX_TIM17_Init+0x11c>)
 800156c:	f005 fba9 	bl	8006cc2 <HAL_TIM_Base_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8001576:	f000 fb41 	bl	8001bfc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 800157a:	482b      	ldr	r0, [pc, #172]	@ (8001628 <MX_TIM17_Init+0x11c>)
 800157c:	f005 fbf8 	bl	8006d70 <HAL_TIM_OC_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM17_Init+0x7e>
  {
    Error_Handler();
 8001586:	f000 fb39 	bl	8001bfc <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 800158a:	2301      	movs	r3, #1
 800158c:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800158e:	2301      	movs	r3, #1
 8001590:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim17, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001596:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800159a:	461a      	mov	r2, r3
 800159c:	2101      	movs	r1, #1
 800159e:	4822      	ldr	r0, [pc, #136]	@ (8001628 <MX_TIM17_Init+0x11c>)
 80015a0:	f007 f986 	bl	80088b0 <HAL_TIMEx_ConfigBreakInput>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM17_Init+0xa2>
  {
    Error_Handler();
 80015aa:	f000 fb27 	bl	8001bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015ae:	2300      	movs	r3, #0
 80015b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b6:	2300      	movs	r3, #0
 80015b8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ba:	2300      	movs	r3, #0
 80015bc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c2:	2300      	movs	r3, #0
 80015c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4815      	ldr	r0, [pc, #84]	@ (8001628 <MX_TIM17_Init+0x11c>)
 80015d4:	f005 fd96 	bl	8007104 <HAL_TIM_OC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM17_Init+0xd6>
  {
    Error_Handler();
 80015de:	f000 fb0d 	bl	8001bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80015f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4807      	ldr	r0, [pc, #28]	@ (8001628 <MX_TIM17_Init+0x11c>)
 800160c:	f007 f8bc 	bl	8008788 <HAL_TIMEx_ConfigBreakDeadTime>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM17_Init+0x10e>
  {
    Error_Handler();
 8001616:	f000 faf1 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800161a:	4803      	ldr	r0, [pc, #12]	@ (8001628 <MX_TIM17_Init+0x11c>)
 800161c:	f001 f98e 	bl	800293c <HAL_TIM_MspPostInit>

}
 8001620:	bf00      	nop
 8001622:	3760      	adds	r7, #96	@ 0x60
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200106e8 	.word	0x200106e8
 800162c:	40014800 	.word	0x40014800

08001630 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0a0      	sub	sp, #128	@ 0x80
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001636:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001646:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001652:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	615a      	str	r2, [r3, #20]
 8001670:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2234      	movs	r2, #52	@ 0x34
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f008 f959 	bl	8009930 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 800167e:	4b62      	ldr	r3, [pc, #392]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 8001680:	4a62      	ldr	r2, [pc, #392]	@ (800180c <MX_TIM20_Init+0x1dc>)
 8001682:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001684:	4b60      	ldr	r3, [pc, #384]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 8001686:	2200      	movs	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b5f      	ldr	r3, [pc, #380]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001690:	4b5d      	ldr	r3, [pc, #372]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 8001692:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001696:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001698:	4b5b      	ldr	r3, [pc, #364]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800169e:	4b5a      	ldr	r3, [pc, #360]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b58      	ldr	r3, [pc, #352]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80016aa:	4857      	ldr	r0, [pc, #348]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 80016ac:	f005 fb09 	bl	8006cc2 <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM20_Init+0x8a>
  {
    Error_Handler();
 80016b6:	f000 faa1 	bl	8001bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 80016ba:	4853      	ldr	r0, [pc, #332]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 80016bc:	f005 fbb9 	bl	8006e32 <HAL_TIM_PWM_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM20_Init+0x9a>
  {
    Error_Handler();
 80016c6:	f000 fa99 	bl	8001bfc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim20) != HAL_OK)
 80016ca:	484f      	ldr	r0, [pc, #316]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 80016cc:	f005 fb50 	bl	8006d70 <HAL_TIM_OC_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM20_Init+0xaa>
  {
    Error_Handler();
 80016d6:	f000 fa91 	bl	8001bfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80016da:	2306      	movs	r3, #6
 80016dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80016de:	2310      	movs	r3, #16
 80016e0:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 80016e2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016e6:	4619      	mov	r1, r3
 80016e8:	4847      	ldr	r0, [pc, #284]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 80016ea:	f006 f841 	bl	8007770 <HAL_TIM_SlaveConfigSynchro>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM20_Init+0xc8>
  {
    Error_Handler();
 80016f4:	f000 fa82 	bl	8001bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	667b      	str	r3, [r7, #100]	@ 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001704:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001708:	4619      	mov	r1, r3
 800170a:	483f      	ldr	r0, [pc, #252]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 800170c:	f006 ffa6 	bl	800865c <HAL_TIMEx_MasterConfigSynchronization>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM20_Init+0xea>
  {
    Error_Handler();
 8001716:	f000 fa71 	bl	8001bfc <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 800171a:	2301      	movs	r3, #1
 800171c:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800171e:	2301      	movs	r3, #1
 8001720:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001722:	2300      	movs	r3, #0
 8001724:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim20, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001726:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800172a:	461a      	mov	r2, r3
 800172c:	2101      	movs	r1, #1
 800172e:	4836      	ldr	r0, [pc, #216]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 8001730:	f007 f8be 	bl	80088b0 <HAL_TIMEx_ConfigBreakInput>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM20_Init+0x10e>
  {
    Error_Handler();
 800173a:	f000 fa5f 	bl	8001bfc <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim20, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 800173e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001742:	461a      	mov	r2, r3
 8001744:	2102      	movs	r1, #2
 8001746:	4830      	ldr	r0, [pc, #192]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 8001748:	f007 f8b2 	bl	80088b0 <HAL_TIMEx_ConfigBreakInput>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM20_Init+0x126>
  {
    Error_Handler();
 8001752:	f000 fa53 	bl	8001bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001756:	2360      	movs	r3, #96	@ 0x60
 8001758:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800175e:	2300      	movs	r3, #0
 8001760:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001762:	2300      	movs	r3, #0
 8001764:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001772:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001776:	2204      	movs	r2, #4
 8001778:	4619      	mov	r1, r3
 800177a:	4823      	ldr	r0, [pc, #140]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 800177c:	f005 fdd8 	bl	8007330 <HAL_TIM_PWM_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM20_Init+0x15a>
  {
    Error_Handler();
 8001786:	f000 fa39 	bl	8001bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800178a:	2300      	movs	r3, #0
 800178c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800178e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001792:	2208      	movs	r2, #8
 8001794:	4619      	mov	r1, r3
 8001796:	481c      	ldr	r0, [pc, #112]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 8001798:	f005 fcb4 	bl	8007104 <HAL_TIM_OC_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM20_Init+0x176>
  {
    Error_Handler();
 80017a2:	f000 fa2b 	bl	8001bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80017a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80017ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80017ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80017ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017de:	2300      	movs	r3, #0
 80017e0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	4807      	ldr	r0, [pc, #28]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 80017ec:	f006 ffcc 	bl	8008788 <HAL_TIMEx_ConfigBreakDeadTime>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM20_Init+0x1ca>
  {
    Error_Handler();
 80017f6:	f000 fa01 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 80017fa:	4803      	ldr	r0, [pc, #12]	@ (8001808 <MX_TIM20_Init+0x1d8>)
 80017fc:	f001 f89e 	bl	800293c <HAL_TIM_MspPostInit>

}
 8001800:	bf00      	nop
 8001802:	3780      	adds	r7, #128	@ 0x80
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20010734 	.word	0x20010734
 800180c:	40015000 	.word	0x40015000

08001810 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001814:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 8001816:	4a23      	ldr	r2, [pc, #140]	@ (80018a4 <MX_USART1_UART_Init+0x94>)
 8001818:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800181a:	4b21      	ldr	r3, [pc, #132]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 800181c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001820:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001822:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001828:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800182e:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001834:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 8001836:	220c      	movs	r2, #12
 8001838:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183a:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001840:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001846:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800184c:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001852:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 8001854:	2200      	movs	r2, #0
 8001856:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001858:	4811      	ldr	r0, [pc, #68]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 800185a:	f007 f94b 	bl	8008af4 <HAL_UART_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001864:	f000 f9ca 	bl	8001bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001868:	2100      	movs	r1, #0
 800186a:	480d      	ldr	r0, [pc, #52]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 800186c:	f007 ff74 	bl	8009758 <HAL_UARTEx_SetTxFifoThreshold>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001876:	f000 f9c1 	bl	8001bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800187a:	2100      	movs	r1, #0
 800187c:	4808      	ldr	r0, [pc, #32]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 800187e:	f007 ffa9 	bl	80097d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001888:	f000 f9b8 	bl	8001bfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800188c:	4804      	ldr	r0, [pc, #16]	@ (80018a0 <MX_USART1_UART_Init+0x90>)
 800188e:	f007 ff2a 	bl	80096e6 <HAL_UARTEx_DisableFifoMode>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001898:	f000 f9b0 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20010780 	.word	0x20010780
 80018a4:	40013800 	.word	0x40013800

080018a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018ae:	4b24      	ldr	r3, [pc, #144]	@ (8001940 <MX_DMA_Init+0x98>)
 80018b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b2:	4a23      	ldr	r2, [pc, #140]	@ (8001940 <MX_DMA_Init+0x98>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80018ba:	4b21      	ldr	r3, [pc, #132]	@ (8001940 <MX_DMA_Init+0x98>)
 80018bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001940 <MX_DMA_Init+0x98>)
 80018c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001940 <MX_DMA_Init+0x98>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80018d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001940 <MX_DMA_Init+0x98>)
 80018d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018de:	4b18      	ldr	r3, [pc, #96]	@ (8001940 <MX_DMA_Init+0x98>)
 80018e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e2:	4a17      	ldr	r2, [pc, #92]	@ (8001940 <MX_DMA_Init+0x98>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <MX_DMA_Init+0x98>)
 80018ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	200e      	movs	r0, #14
 80018fc:	f003 fa19 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001900:	200e      	movs	r0, #14
 8001902:	f003 fa30 	bl	8004d66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	2038      	movs	r0, #56	@ 0x38
 800190c:	f003 fa11 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001910:	2038      	movs	r0, #56	@ 0x38
 8001912:	f003 fa28 	bl	8004d66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	2039      	movs	r0, #57	@ 0x39
 800191c:	f003 fa09 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001920:	2039      	movs	r0, #57	@ 0x39
 8001922:	f003 fa20 	bl	8004d66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel8_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	2060      	movs	r0, #96	@ 0x60
 800192c:	f003 fa01 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 8001930:	2060      	movs	r0, #96	@ 0x60
 8001932:	f003 fa18 	bl	8004d66 <HAL_NVIC_EnableIRQ>

}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000

08001944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08c      	sub	sp, #48	@ 0x30
 8001948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800195a:	4b78      	ldr	r3, [pc, #480]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	4a77      	ldr	r2, [pc, #476]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 8001960:	f043 0310 	orr.w	r3, r3, #16
 8001964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001966:	4b75      	ldr	r3, [pc, #468]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001972:	4b72      	ldr	r3, [pc, #456]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001976:	4a71      	ldr	r2, [pc, #452]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800197e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800198a:	4b6c      	ldr	r3, [pc, #432]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	4a6b      	ldr	r2, [pc, #428]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 8001990:	f043 0320 	orr.w	r3, r3, #32
 8001994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001996:	4b69      	ldr	r3, [pc, #420]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019a2:	4b66      	ldr	r3, [pc, #408]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	4a65      	ldr	r2, [pc, #404]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 80019a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ae:	4b63      	ldr	r3, [pc, #396]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	4b60      	ldr	r3, [pc, #384]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	4a5f      	ldr	r2, [pc, #380]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	4b5a      	ldr	r3, [pc, #360]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d6:	4a59      	ldr	r2, [pc, #356]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019de:	4b57      	ldr	r3, [pc, #348]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ea:	4b54      	ldr	r3, [pc, #336]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ee:	4a53      	ldr	r2, [pc, #332]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 80019f0:	f043 0308 	orr.w	r3, r3, #8
 80019f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f6:	4b51      	ldr	r3, [pc, #324]	@ (8001b3c <MX_GPIO_Init+0x1f8>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_ENABLE1_GPIO_GPIO_Port, M2_ENABLE1_GPIO_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2120      	movs	r1, #32
 8001a06:	484e      	ldr	r0, [pc, #312]	@ (8001b40 <MX_GPIO_Init+0x1fc>)
 8001a08:	f003 ff98 	bl	800593c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_OUT_LED_GREEN_Pin|M1_ENABLE1_GPIO_Pin|M1_ENABLE2_GPIO_Pin|M2_ENABLE2_GPIO_Pin
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f648 013c 	movw	r1, #34876	@ 0x883c
 8001a12:	484c      	ldr	r0, [pc, #304]	@ (8001b44 <MX_GPIO_Init+0x200>)
 8001a14:	f003 ff92 	bl	800593c <HAL_GPIO_WritePin>
                          |GPIO_OUT_INRUSH_Pin|GPIO_OUT_ID_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M3_ENABLE1_GPIO_GPIO_Port, M3_ENABLE1_GPIO_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a1e:	484a      	ldr	r0, [pc, #296]	@ (8001b48 <MX_GPIO_Init+0x204>)
 8001a20:	f003 ff8c 	bl	800593c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_OUT_M2_ENABLE_Pin|GPIO_OUT_M1_ENABLE_Pin|GPIO_OUT_M1_BRAKE_Pin, GPIO_PIN_RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001a2a:	4848      	ldr	r0, [pc, #288]	@ (8001b4c <MX_GPIO_Init+0x208>)
 8001a2c:	f003 ff86 	bl	800593c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_OUT_M22_BRAKE_Pin|M3_ENABLE2_GPIO_Pin|GPIO_OUT_LED_YELLOW_Pin|GPIO_OUT_LED_RED_Pin, GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2165      	movs	r1, #101	@ 0x65
 8001a34:	4846      	ldr	r0, [pc, #280]	@ (8001b50 <MX_GPIO_Init+0x20c>)
 8001a36:	f003 ff81 	bl	800593c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : M2_ENABLE1_GPIO_Pin */
  GPIO_InitStruct.Pin = M2_ENABLE1_GPIO_Pin;
 8001a3a:	2320      	movs	r3, #32
 8001a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(M2_ENABLE1_GPIO_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4619      	mov	r1, r3
 8001a50:	483b      	ldr	r0, [pc, #236]	@ (8001b40 <MX_GPIO_Init+0x1fc>)
 8001a52:	f003 fdf1 	bl	8005638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4837      	ldr	r0, [pc, #220]	@ (8001b48 <MX_GPIO_Init+0x204>)
 8001a6c:	f003 fde4 	bl	8005638 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_LED_GREEN_Pin M1_ENABLE1_GPIO_Pin M1_ENABLE2_GPIO_Pin M2_ENABLE2_GPIO_Pin
                           GPIO_OUT_INRUSH_Pin GPIO_OUT_ID_ENABLE_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_LED_GREEN_Pin|M1_ENABLE1_GPIO_Pin|M1_ENABLE2_GPIO_Pin|M2_ENABLE2_GPIO_Pin
 8001a70:	f648 033c 	movw	r3, #34876	@ 0x883c
 8001a74:	61fb      	str	r3, [r7, #28]
                          |GPIO_OUT_INRUSH_Pin|GPIO_OUT_ID_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	4619      	mov	r1, r3
 8001a88:	482e      	ldr	r0, [pc, #184]	@ (8001b44 <MX_GPIO_Init+0x200>)
 8001a8a:	f003 fdd5 	bl	8005638 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_RESET_Pin */
  GPIO_InitStruct.Pin = BUTTON_RESET_Pin;
 8001a8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_RESET_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	482a      	ldr	r0, [pc, #168]	@ (8001b4c <MX_GPIO_Init+0x208>)
 8001aa4:	f003 fdc8 	bl	8005638 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_VOLT_V_ADC345_IN16_Pin */
  GPIO_InitStruct.Pin = M1_VOLT_V_ADC345_IN16_Pin;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(M1_VOLT_V_ADC345_IN16_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	4820      	ldr	r0, [pc, #128]	@ (8001b40 <MX_GPIO_Init+0x1fc>)
 8001abe:	f003 fdbb 	bl	8005638 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC45_IN12_PFC_Current1_Pin ADC45_IN13_PFC_Current2_Pin M1_VOLT_U_ADC345_IN7_Pin M1_CURR_U_ADC345_IN8_Pin
                           M1_CURR_V_ADC345_IN9_Pin M1_VOLT_W_ADC345_IN10_Pin M1_CURR_W_ADC345_IN11_Pin */
  GPIO_InitStruct.Pin = ADC45_IN12_PFC_Current1_Pin|ADC45_IN13_PFC_Current2_Pin|M1_VOLT_U_ADC345_IN7_Pin|M1_CURR_U_ADC345_IN8_Pin
 8001ac2:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8001ac6:	61fb      	str	r3, [r7, #28]
                          |M1_CURR_V_ADC345_IN9_Pin|M1_VOLT_W_ADC345_IN10_Pin|M1_CURR_W_ADC345_IN11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	481e      	ldr	r0, [pc, #120]	@ (8001b50 <MX_GPIO_Init+0x20c>)
 8001ad8:	f003 fdae 	bl	8005638 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3_ENABLE1_GPIO_Pin */
  GPIO_InitStruct.Pin = M3_ENABLE1_GPIO_Pin;
 8001adc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(M3_ENABLE1_GPIO_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	4814      	ldr	r0, [pc, #80]	@ (8001b48 <MX_GPIO_Init+0x204>)
 8001af6:	f003 fd9f 	bl	8005638 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_M2_ENABLE_Pin GPIO_OUT_M1_ENABLE_Pin GPIO_OUT_M1_BRAKE_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_M2_ENABLE_Pin|GPIO_OUT_M1_ENABLE_Pin|GPIO_OUT_M1_BRAKE_Pin;
 8001afa:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	4619      	mov	r1, r3
 8001b12:	480e      	ldr	r0, [pc, #56]	@ (8001b4c <MX_GPIO_Init+0x208>)
 8001b14:	f003 fd90 	bl	8005638 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_M22_BRAKE_Pin M3_ENABLE2_GPIO_Pin GPIO_OUT_LED_YELLOW_Pin GPIO_OUT_LED_RED_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_M22_BRAKE_Pin|M3_ENABLE2_GPIO_Pin|GPIO_OUT_LED_YELLOW_Pin|GPIO_OUT_LED_RED_Pin;
 8001b18:	2365      	movs	r3, #101	@ 0x65
 8001b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4808      	ldr	r0, [pc, #32]	@ (8001b50 <MX_GPIO_Init+0x20c>)
 8001b30:	f003 fd82 	bl	8005638 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b34:	bf00      	nop
 8001b36:	3730      	adds	r7, #48	@ 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	48001000 	.word	0x48001000
 8001b44:	48001400 	.word	0x48001400
 8001b48:	48000800 	.word	0x48000800
 8001b4c:	48001800 	.word	0x48001800
 8001b50:	48000c00 	.word	0x48000c00

08001b54 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
//Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b64:	d105      	bne.n	8001b72 <HAL_ADC_ConvHalfCpltCallback+0x1e>
	{
	 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8001b66:	2201      	movs	r2, #1
 8001b68:	2108      	movs	r1, #8
 8001b6a:	480c      	ldr	r0, [pc, #48]	@ (8001b9c <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8001b6c:	f003 fee6 	bl	800593c <HAL_GPIO_WritePin>
	}
	else
	{
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
	}
}
 8001b70:	e00f      	b.n	8001b92 <HAL_ADC_ConvHalfCpltCallback+0x3e>
	else if (hadc->Instance == ADC2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d105      	bne.n	8001b88 <HAL_ADC_ConvHalfCpltCallback+0x34>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2140      	movs	r1, #64	@ 0x40
 8001b80:	4808      	ldr	r0, [pc, #32]	@ (8001ba4 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8001b82:	f003 fedb 	bl	800593c <HAL_GPIO_WritePin>
}
 8001b86:	e004      	b.n	8001b92 <HAL_ADC_ConvHalfCpltCallback+0x3e>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2120      	movs	r1, #32
 8001b8c:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8001b8e:	f003 fed5 	bl	800593c <HAL_GPIO_WritePin>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	48001400 	.word	0x48001400
 8001ba0:	50000100 	.word	0x50000100
 8001ba4:	48000c00 	.word	0x48000c00

08001ba8 <HAL_ADC_ConvCpltCallback>:

//Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bb8:	d105      	bne.n	8001bc6 <HAL_ADC_ConvCpltCallback+0x1e>
	{
	 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2108      	movs	r1, #8
 8001bbe:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <HAL_ADC_ConvCpltCallback+0x48>)
 8001bc0:	f003 febc 	bl	800593c <HAL_GPIO_WritePin>
	}
	else
	{
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
	}
}
 8001bc4:	e00f      	b.n	8001be6 <HAL_ADC_ConvCpltCallback+0x3e>
	else if (hadc->Instance == ADC2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d105      	bne.n	8001bdc <HAL_ADC_ConvCpltCallback+0x34>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2140      	movs	r1, #64	@ 0x40
 8001bd4:	4808      	ldr	r0, [pc, #32]	@ (8001bf8 <HAL_ADC_ConvCpltCallback+0x50>)
 8001bd6:	f003 feb1 	bl	800593c <HAL_GPIO_WritePin>
}
 8001bda:	e004      	b.n	8001be6 <HAL_ADC_ConvCpltCallback+0x3e>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2120      	movs	r1, #32
 8001be0:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <HAL_ADC_ConvCpltCallback+0x50>)
 8001be2:	f003 feab 	bl	800593c <HAL_GPIO_WritePin>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	48001400 	.word	0x48001400
 8001bf4:	50000100 	.word	0x50000100
 8001bf8:	48000c00 	.word	0x48000c00

08001bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c00:	b672      	cpsid	i
}
 8001c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <Error_Handler+0x8>

08001c08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <HAL_MspInit+0x44>)
 8001c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c12:	4a0e      	ldr	r2, [pc, #56]	@ (8001c4c <HAL_MspInit+0x44>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <HAL_MspInit+0x44>)
 8001c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <HAL_MspInit+0x44>)
 8001c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2a:	4a08      	ldr	r2, [pc, #32]	@ (8001c4c <HAL_MspInit+0x44>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_MspInit+0x44>)
 8001c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c3e:	f004 f809 	bl	8005c54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000

08001c50 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b0ac      	sub	sp, #176	@ 0xb0
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c68:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c6c:	2254      	movs	r2, #84	@ 0x54
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f007 fe5d 	bl	8009930 <memset>
  if(hadc->Instance==ADC1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c7e:	f040 8092 	bne.w	8001da6 <HAL_ADC_MspInit+0x156>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c86:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c88:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c90:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c94:	4618      	mov	r0, r3
 8001c96:	f004 fd1b 	bl	80066d0 <HAL_RCCEx_PeriphCLKConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8001ca0:	f7ff ffac 	bl	8001bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ca4:	4ba7      	ldr	r3, [pc, #668]	@ (8001f44 <HAL_ADC_MspInit+0x2f4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	4aa6      	ldr	r2, [pc, #664]	@ (8001f44 <HAL_ADC_MspInit+0x2f4>)
 8001cac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001cae:	4ba5      	ldr	r3, [pc, #660]	@ (8001f44 <HAL_ADC_MspInit+0x2f4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d10b      	bne.n	8001cce <HAL_ADC_MspInit+0x7e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001cb6:	4ba4      	ldr	r3, [pc, #656]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cba:	4aa3      	ldr	r2, [pc, #652]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001cbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc2:	4ba1      	ldr	r3, [pc, #644]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cca:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	4b9e      	ldr	r3, [pc, #632]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	4a9d      	ldr	r2, [pc, #628]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cda:	4b9b      	ldr	r3, [pc, #620]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b98      	ldr	r3, [pc, #608]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	4a97      	ldr	r2, [pc, #604]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf2:	4b95      	ldr	r3, [pc, #596]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d04:	2303      	movs	r3, #3
 8001d06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d14:	4619      	mov	r1, r3
 8001d16:	488d      	ldr	r0, [pc, #564]	@ (8001f4c <HAL_ADC_MspInit+0x2fc>)
 8001d18:	f003 fc8e 	bl	8005638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d22:	2303      	movs	r3, #3
 8001d24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d32:	4619      	mov	r1, r3
 8001d34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d38:	f003 fc7e 	bl	8005638 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8001d3c:	4b84      	ldr	r3, [pc, #528]	@ (8001f50 <HAL_ADC_MspInit+0x300>)
 8001d3e:	4a85      	ldr	r2, [pc, #532]	@ (8001f54 <HAL_ADC_MspInit+0x304>)
 8001d40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d42:	4b83      	ldr	r3, [pc, #524]	@ (8001f50 <HAL_ADC_MspInit+0x300>)
 8001d44:	2205      	movs	r2, #5
 8001d46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d48:	4b81      	ldr	r3, [pc, #516]	@ (8001f50 <HAL_ADC_MspInit+0x300>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d4e:	4b80      	ldr	r3, [pc, #512]	@ (8001f50 <HAL_ADC_MspInit+0x300>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d54:	4b7e      	ldr	r3, [pc, #504]	@ (8001f50 <HAL_ADC_MspInit+0x300>)
 8001d56:	2280      	movs	r2, #128	@ 0x80
 8001d58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d5a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f50 <HAL_ADC_MspInit+0x300>)
 8001d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d62:	4b7b      	ldr	r3, [pc, #492]	@ (8001f50 <HAL_ADC_MspInit+0x300>)
 8001d64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d6a:	4b79      	ldr	r3, [pc, #484]	@ (8001f50 <HAL_ADC_MspInit+0x300>)
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001d70:	4b77      	ldr	r3, [pc, #476]	@ (8001f50 <HAL_ADC_MspInit+0x300>)
 8001d72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d78:	4875      	ldr	r0, [pc, #468]	@ (8001f50 <HAL_ADC_MspInit+0x300>)
 8001d7a:	f003 f9eb 	bl	8005154 <HAL_DMA_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001d84:	f7ff ff3a 	bl	8001bfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a71      	ldr	r2, [pc, #452]	@ (8001f50 <HAL_ADC_MspInit+0x300>)
 8001d8c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d8e:	4a70      	ldr	r2, [pc, #448]	@ (8001f50 <HAL_ADC_MspInit+0x300>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2101      	movs	r1, #1
 8001d98:	2012      	movs	r0, #18
 8001d9a:	f002 ffca 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d9e:	2012      	movs	r0, #18
 8001da0:	f002 ffe1 	bl	8004d66 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC4_MspInit 1 */

    /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001da4:	e21f      	b.n	80021e6 <HAL_ADC_MspInit+0x596>
  else if(hadc->Instance==ADC2)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6b      	ldr	r2, [pc, #428]	@ (8001f58 <HAL_ADC_MspInit+0x308>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	f040 80dd 	bne.w	8001f6c <HAL_ADC_MspInit+0x31c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001db6:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001db8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001dbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f004 fc83 	bl	80066d0 <HAL_RCCEx_PeriphCLKConfig>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8001dd0:	f7ff ff14 	bl	8001bfc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001dd4:	4b5b      	ldr	r3, [pc, #364]	@ (8001f44 <HAL_ADC_MspInit+0x2f4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	4a5a      	ldr	r2, [pc, #360]	@ (8001f44 <HAL_ADC_MspInit+0x2f4>)
 8001ddc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001dde:	4b59      	ldr	r3, [pc, #356]	@ (8001f44 <HAL_ADC_MspInit+0x2f4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d10b      	bne.n	8001dfe <HAL_ADC_MspInit+0x1ae>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001de6:	4b58      	ldr	r3, [pc, #352]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dea:	4a57      	ldr	r2, [pc, #348]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001dec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df2:	4b55      	ldr	r3, [pc, #340]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dfe:	4b52      	ldr	r3, [pc, #328]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e02:	4a51      	ldr	r2, [pc, #324]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001e04:	f043 0320 	orr.w	r3, r3, #32
 8001e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e0a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	4b4c      	ldr	r3, [pc, #304]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1a:	4a4b      	ldr	r2, [pc, #300]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e22:	4b49      	ldr	r3, [pc, #292]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b46      	ldr	r3, [pc, #280]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e32:	4a45      	ldr	r2, [pc, #276]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e3a:	4b43      	ldr	r3, [pc, #268]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e46:	4b40      	ldr	r3, [pc, #256]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e52:	4b3d      	ldr	r3, [pc, #244]	@ (8001f48 <HAL_ADC_MspInit+0x2f8>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = ADC2_IN10_PFC_AC_V_Pin;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e64:	2303      	movs	r3, #3
 8001e66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(ADC2_IN10_PFC_AC_V_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e74:	4619      	mov	r1, r3
 8001e76:	4839      	ldr	r0, [pc, #228]	@ (8001f5c <HAL_ADC_MspInit+0x30c>)
 8001e78:	f003 fbde 	bl	8005638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e7c:	233f      	movs	r3, #63	@ 0x3f
 8001e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e82:	2303      	movs	r3, #3
 8001e84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e92:	4619      	mov	r1, r3
 8001e94:	482d      	ldr	r0, [pc, #180]	@ (8001f4c <HAL_ADC_MspInit+0x2fc>)
 8001e96:	f003 fbcf 	bl	8005638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2_RES_EX_DAC1_OUT2_Pin|M3_TEMP_ID_ADC2IN3_Pin;
 8001e9a:	2360      	movs	r3, #96	@ 0x60
 8001e9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb6:	f003 fbbf 	bl	8005638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4823      	ldr	r0, [pc, #140]	@ (8001f60 <HAL_ADC_MspInit+0x310>)
 8001ed4:	f003 fbb0 	bl	8005638 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel8;
 8001ed8:	4b22      	ldr	r3, [pc, #136]	@ (8001f64 <HAL_ADC_MspInit+0x314>)
 8001eda:	4a23      	ldr	r2, [pc, #140]	@ (8001f68 <HAL_ADC_MspInit+0x318>)
 8001edc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001ede:	4b21      	ldr	r3, [pc, #132]	@ (8001f64 <HAL_ADC_MspInit+0x314>)
 8001ee0:	2224      	movs	r2, #36	@ 0x24
 8001ee2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f64 <HAL_ADC_MspInit+0x314>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eea:	4b1e      	ldr	r3, [pc, #120]	@ (8001f64 <HAL_ADC_MspInit+0x314>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f64 <HAL_ADC_MspInit+0x314>)
 8001ef2:	2280      	movs	r2, #128	@ 0x80
 8001ef4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <HAL_ADC_MspInit+0x314>)
 8001ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001efc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001efe:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <HAL_ADC_MspInit+0x314>)
 8001f00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f04:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001f06:	4b17      	ldr	r3, [pc, #92]	@ (8001f64 <HAL_ADC_MspInit+0x314>)
 8001f08:	2220      	movs	r2, #32
 8001f0a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8001f0c:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <HAL_ADC_MspInit+0x314>)
 8001f0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001f14:	4813      	ldr	r0, [pc, #76]	@ (8001f64 <HAL_ADC_MspInit+0x314>)
 8001f16:	f003 f91d 	bl	8005154 <HAL_DMA_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_ADC_MspInit+0x2d4>
      Error_Handler();
 8001f20:	f7ff fe6c 	bl	8001bfc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a0f      	ldr	r2, [pc, #60]	@ (8001f64 <HAL_ADC_MspInit+0x314>)
 8001f28:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f64 <HAL_ADC_MspInit+0x314>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2101      	movs	r1, #1
 8001f34:	2012      	movs	r0, #18
 8001f36:	f002 fefc 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f3a:	2012      	movs	r0, #18
 8001f3c:	f002 ff13 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 8001f40:	e151      	b.n	80021e6 <HAL_ADC_MspInit+0x596>
 8001f42:	bf00      	nop
 8001f44:	20010844 	.word	0x20010844
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	48000800 	.word	0x48000800
 8001f50:	20010228 	.word	0x20010228
 8001f54:	40020044 	.word	0x40020044
 8001f58:	50000100 	.word	0x50000100
 8001f5c:	48001400 	.word	0x48001400
 8001f60:	48000400 	.word	0x48000400
 8001f64:	20010288 	.word	0x20010288
 8001f68:	40020094 	.word	0x40020094
  else if(hadc->Instance==ADC3)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a9f      	ldr	r2, [pc, #636]	@ (80021f0 <HAL_ADC_MspInit+0x5a0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	f040 80a7 	bne.w	80020c6 <HAL_ADC_MspInit+0x476>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001f78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001f7e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001f82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f86:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 fba0 	bl	80066d0 <HAL_RCCEx_PeriphCLKConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_ADC_MspInit+0x34a>
      Error_Handler();
 8001f96:	f7ff fe31 	bl	8001bfc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001f9a:	4b96      	ldr	r3, [pc, #600]	@ (80021f4 <HAL_ADC_MspInit+0x5a4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	4a94      	ldr	r2, [pc, #592]	@ (80021f4 <HAL_ADC_MspInit+0x5a4>)
 8001fa2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001fa4:	4b93      	ldr	r3, [pc, #588]	@ (80021f4 <HAL_ADC_MspInit+0x5a4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d10b      	bne.n	8001fc4 <HAL_ADC_MspInit+0x374>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001fac:	4b92      	ldr	r3, [pc, #584]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8001fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb0:	4a91      	ldr	r2, [pc, #580]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8001fb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb8:	4b8f      	ldr	r3, [pc, #572]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc4:	4b8c      	ldr	r3, [pc, #560]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc8:	4a8b      	ldr	r2, [pc, #556]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8001fca:	f043 0310 	orr.w	r3, r3, #16
 8001fce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd0:	4b89      	ldr	r3, [pc, #548]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	623b      	str	r3, [r7, #32]
 8001fda:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fdc:	4b86      	ldr	r3, [pc, #536]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8001fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe0:	4a85      	ldr	r2, [pc, #532]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fe8:	4b83      	ldr	r3, [pc, #524]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8001fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff4:	4b80      	ldr	r3, [pc, #512]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff8:	4a7f      	ldr	r2, [pc, #508]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8001ffa:	f043 0308 	orr.w	r3, r3, #8
 8001ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002000:	4b7d      	ldr	r3, [pc, #500]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|M1_VOLT_V_ADC345_IN16_Pin;
 800200c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002010:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002014:	2303      	movs	r3, #3
 8002016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002020:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002024:	4619      	mov	r1, r3
 8002026:	4875      	ldr	r0, [pc, #468]	@ (80021fc <HAL_ADC_MspInit+0x5ac>)
 8002028:	f003 fb06 	bl	8005638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_VBUS_ADC3_IN5_Pin;
 800202c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002030:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002034:	2303      	movs	r3, #3
 8002036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(M1_VBUS_ADC3_IN5_GPIO_Port, &GPIO_InitStruct);
 8002040:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002044:	4619      	mov	r1, r3
 8002046:	486e      	ldr	r0, [pc, #440]	@ (8002200 <HAL_ADC_MspInit+0x5b0>)
 8002048:	f003 faf6 	bl	8005638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_VOLT_U_ADC345_IN7_Pin|M1_CURR_U_ADC345_IN8_Pin|M1_CURR_V_ADC345_IN9_Pin|M1_VOLT_W_ADC345_IN10_Pin
 800204c:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 8002050:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002054:	2303      	movs	r3, #3
 8002056:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002060:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002064:	4619      	mov	r1, r3
 8002066:	4867      	ldr	r0, [pc, #412]	@ (8002204 <HAL_ADC_MspInit+0x5b4>)
 8002068:	f003 fae6 	bl	8005638 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel1;
 800206c:	4b66      	ldr	r3, [pc, #408]	@ (8002208 <HAL_ADC_MspInit+0x5b8>)
 800206e:	4a67      	ldr	r2, [pc, #412]	@ (800220c <HAL_ADC_MspInit+0x5bc>)
 8002070:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002072:	4b65      	ldr	r3, [pc, #404]	@ (8002208 <HAL_ADC_MspInit+0x5b8>)
 8002074:	2225      	movs	r2, #37	@ 0x25
 8002076:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002078:	4b63      	ldr	r3, [pc, #396]	@ (8002208 <HAL_ADC_MspInit+0x5b8>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800207e:	4b62      	ldr	r3, [pc, #392]	@ (8002208 <HAL_ADC_MspInit+0x5b8>)
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002084:	4b60      	ldr	r3, [pc, #384]	@ (8002208 <HAL_ADC_MspInit+0x5b8>)
 8002086:	2280      	movs	r2, #128	@ 0x80
 8002088:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800208a:	4b5f      	ldr	r3, [pc, #380]	@ (8002208 <HAL_ADC_MspInit+0x5b8>)
 800208c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002090:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002092:	4b5d      	ldr	r3, [pc, #372]	@ (8002208 <HAL_ADC_MspInit+0x5b8>)
 8002094:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002098:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800209a:	4b5b      	ldr	r3, [pc, #364]	@ (8002208 <HAL_ADC_MspInit+0x5b8>)
 800209c:	2220      	movs	r2, #32
 800209e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80020a0:	4b59      	ldr	r3, [pc, #356]	@ (8002208 <HAL_ADC_MspInit+0x5b8>)
 80020a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80020a8:	4857      	ldr	r0, [pc, #348]	@ (8002208 <HAL_ADC_MspInit+0x5b8>)
 80020aa:	f003 f853 	bl	8005154 <HAL_DMA_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_ADC_MspInit+0x468>
      Error_Handler();
 80020b4:	f7ff fda2 	bl	8001bfc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a53      	ldr	r2, [pc, #332]	@ (8002208 <HAL_ADC_MspInit+0x5b8>)
 80020bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80020be:	4a52      	ldr	r2, [pc, #328]	@ (8002208 <HAL_ADC_MspInit+0x5b8>)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80020c4:	e08f      	b.n	80021e6 <HAL_ADC_MspInit+0x596>
  else if(hadc->Instance==ADC4)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a51      	ldr	r2, [pc, #324]	@ (8002210 <HAL_ADC_MspInit+0x5c0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	f040 808a 	bne.w	80021e6 <HAL_ADC_MspInit+0x596>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80020d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020d6:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80020d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80020dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020e4:	4618      	mov	r0, r3
 80020e6:	f004 faf3 	bl	80066d0 <HAL_RCCEx_PeriphCLKConfig>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_ADC_MspInit+0x4a4>
      Error_Handler();
 80020f0:	f7ff fd84 	bl	8001bfc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80020f4:	4b3f      	ldr	r3, [pc, #252]	@ (80021f4 <HAL_ADC_MspInit+0x5a4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	3301      	adds	r3, #1
 80020fa:	4a3e      	ldr	r2, [pc, #248]	@ (80021f4 <HAL_ADC_MspInit+0x5a4>)
 80020fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80020fe:	4b3d      	ldr	r3, [pc, #244]	@ (80021f4 <HAL_ADC_MspInit+0x5a4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d10b      	bne.n	800211e <HAL_ADC_MspInit+0x4ce>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8002106:	4b3c      	ldr	r3, [pc, #240]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	4a3b      	ldr	r2, [pc, #236]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002112:	4b39      	ldr	r3, [pc, #228]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800211e:	4b36      	ldr	r3, [pc, #216]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	4a35      	ldr	r2, [pc, #212]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8002124:	f043 0310 	orr.w	r3, r3, #16
 8002128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800212a:	4b33      	ldr	r3, [pc, #204]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002136:	4b30      	ldr	r3, [pc, #192]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213a:	4a2f      	ldr	r2, [pc, #188]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 800213c:	f043 0308 	orr.w	r3, r3, #8
 8002140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002142:	4b2d      	ldr	r3, [pc, #180]	@ (80021f8 <HAL_ADC_MspInit+0x5a8>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_VOLT_V_ADC345_IN16_Pin|ADC4_IN1_MORPHO_Pin|M1_TEMP_ID_ADC4_IN2_Pin;
 800214e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002152:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002156:	2303      	movs	r3, #3
 8002158:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002162:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002166:	4619      	mov	r1, r3
 8002168:	4824      	ldr	r0, [pc, #144]	@ (80021fc <HAL_ADC_MspInit+0x5ac>)
 800216a:	f003 fa65 	bl	8005638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC45_IN12_PFC_Current1_Pin|ADC45_IN13_PFC_Current2_Pin|M1_VOLT_U_ADC345_IN7_Pin|M1_CURR_U_ADC345_IN8_Pin
 800216e:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8002172:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002176:	2303      	movs	r3, #3
 8002178:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002182:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002186:	4619      	mov	r1, r3
 8002188:	481e      	ldr	r0, [pc, #120]	@ (8002204 <HAL_ADC_MspInit+0x5b4>)
 800218a:	f003 fa55 	bl	8005638 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 800218e:	4b21      	ldr	r3, [pc, #132]	@ (8002214 <HAL_ADC_MspInit+0x5c4>)
 8002190:	4a21      	ldr	r2, [pc, #132]	@ (8002218 <HAL_ADC_MspInit+0x5c8>)
 8002192:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8002194:	4b1f      	ldr	r3, [pc, #124]	@ (8002214 <HAL_ADC_MspInit+0x5c4>)
 8002196:	2226      	movs	r2, #38	@ 0x26
 8002198:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800219a:	4b1e      	ldr	r3, [pc, #120]	@ (8002214 <HAL_ADC_MspInit+0x5c4>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002214 <HAL_ADC_MspInit+0x5c4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80021a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <HAL_ADC_MspInit+0x5c4>)
 80021a8:	2280      	movs	r2, #128	@ 0x80
 80021aa:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_ADC_MspInit+0x5c4>)
 80021ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021b2:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021b4:	4b17      	ldr	r3, [pc, #92]	@ (8002214 <HAL_ADC_MspInit+0x5c4>)
 80021b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021ba:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80021bc:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <HAL_ADC_MspInit+0x5c4>)
 80021be:	2220      	movs	r2, #32
 80021c0:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 80021c2:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <HAL_ADC_MspInit+0x5c4>)
 80021c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80021ca:	4812      	ldr	r0, [pc, #72]	@ (8002214 <HAL_ADC_MspInit+0x5c4>)
 80021cc:	f002 ffc2 	bl	8005154 <HAL_DMA_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_ADC_MspInit+0x58a>
      Error_Handler();
 80021d6:	f7ff fd11 	bl	8001bfc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <HAL_ADC_MspInit+0x5c4>)
 80021de:	655a      	str	r2, [r3, #84]	@ 0x54
 80021e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002214 <HAL_ADC_MspInit+0x5c4>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80021e6:	bf00      	nop
 80021e8:	37b0      	adds	r7, #176	@ 0xb0
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	50000400 	.word	0x50000400
 80021f4:	20010848 	.word	0x20010848
 80021f8:	40021000 	.word	0x40021000
 80021fc:	48001000 	.word	0x48001000
 8002200:	48000400 	.word	0x48000400
 8002204:	48000c00 	.word	0x48000c00
 8002208:	200102e8 	.word	0x200102e8
 800220c:	40020408 	.word	0x40020408
 8002210:	50000500 	.word	0x50000500
 8002214:	20010348 	.word	0x20010348
 8002218:	4002041c 	.word	0x4002041c

0800221c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	@ 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a15      	ldr	r2, [pc, #84]	@ (8002290 <HAL_DAC_MspInit+0x74>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d124      	bne.n	8002288 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <HAL_DAC_MspInit+0x78>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002242:	4a14      	ldr	r2, [pc, #80]	@ (8002294 <HAL_DAC_MspInit+0x78>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800224a:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <HAL_DAC_MspInit+0x78>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <HAL_DAC_MspInit+0x78>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	4a0e      	ldr	r2, [pc, #56]	@ (8002294 <HAL_DAC_MspInit+0x78>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002262:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <HAL_DAC_MspInit+0x78>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = M1_RES_EX_DAC1_OUT1_Pin|M2_RES_EX_DAC1_OUT2_Pin;
 800226e:	2330      	movs	r3, #48	@ 0x30
 8002270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002272:	2303      	movs	r3, #3
 8002274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4619      	mov	r1, r3
 8002280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002284:	f003 f9d8 	bl	8005638 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002288:	bf00      	nop
 800228a:	3728      	adds	r7, #40	@ 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	50000800 	.word	0x50000800
 8002294:	40021000 	.word	0x40021000

08002298 <HAL_OPAMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hopamp: OPAMP handle pointer
  * @retval None
  */
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08c      	sub	sp, #48	@ 0x30
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a3b      	ldr	r2, [pc, #236]	@ (80023a4 <HAL_OPAMP_MspInit+0x10c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d118      	bne.n	80022ec <HAL_OPAMP_MspInit+0x54>
  {
    /* USER CODE BEGIN OPAMP3_MspInit 0 */

    /* USER CODE END OPAMP3_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ba:	4b3b      	ldr	r3, [pc, #236]	@ (80023a8 <HAL_OPAMP_MspInit+0x110>)
 80022bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022be:	4a3a      	ldr	r2, [pc, #232]	@ (80023a8 <HAL_OPAMP_MspInit+0x110>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022c6:	4b38      	ldr	r3, [pc, #224]	@ (80023a8 <HAL_OPAMP_MspInit+0x110>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP3 GPIO Configuration
    PB0     ------> OPAMP3_VINP
    PB1     ------> OPAMP3_VOUT
    PB2     ------> OPAMP3_VINM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80022d2:	2307      	movs	r3, #7
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022d6:	2303      	movs	r3, #3
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	4619      	mov	r1, r3
 80022e4:	4831      	ldr	r0, [pc, #196]	@ (80023ac <HAL_OPAMP_MspInit+0x114>)
 80022e6:	f003 f9a7 	bl	8005638 <HAL_GPIO_Init>
    /* USER CODE BEGIN OPAMP5_MspInit 1 */

    /* USER CODE END OPAMP5_MspInit 1 */
  }

}
 80022ea:	e056      	b.n	800239a <HAL_OPAMP_MspInit+0x102>
  else if(hopamp->Instance==OPAMP4)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a2f      	ldr	r2, [pc, #188]	@ (80023b0 <HAL_OPAMP_MspInit+0x118>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d119      	bne.n	800232a <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f6:	4b2c      	ldr	r3, [pc, #176]	@ (80023a8 <HAL_OPAMP_MspInit+0x110>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fa:	4a2b      	ldr	r2, [pc, #172]	@ (80023a8 <HAL_OPAMP_MspInit+0x110>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002302:	4b29      	ldr	r3, [pc, #164]	@ (80023a8 <HAL_OPAMP_MspInit+0x110>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800230e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002314:	2303      	movs	r3, #3
 8002316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4619      	mov	r1, r3
 8002322:	4822      	ldr	r0, [pc, #136]	@ (80023ac <HAL_OPAMP_MspInit+0x114>)
 8002324:	f003 f988 	bl	8005638 <HAL_GPIO_Init>
}
 8002328:	e037      	b.n	800239a <HAL_OPAMP_MspInit+0x102>
  else if(hopamp->Instance==OPAMP5)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a21      	ldr	r2, [pc, #132]	@ (80023b4 <HAL_OPAMP_MspInit+0x11c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d132      	bne.n	800239a <HAL_OPAMP_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002334:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <HAL_OPAMP_MspInit+0x110>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002338:	4a1b      	ldr	r2, [pc, #108]	@ (80023a8 <HAL_OPAMP_MspInit+0x110>)
 800233a:	f043 0302 	orr.w	r3, r3, #2
 800233e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_OPAMP_MspInit+0x110>)
 8002342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234c:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <HAL_OPAMP_MspInit+0x110>)
 800234e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002350:	4a15      	ldr	r2, [pc, #84]	@ (80023a8 <HAL_OPAMP_MspInit+0x110>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002358:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <HAL_OPAMP_MspInit+0x110>)
 800235a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002364:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800236a:	2303      	movs	r3, #3
 800236c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002372:	f107 031c 	add.w	r3, r7, #28
 8002376:	4619      	mov	r1, r3
 8002378:	480c      	ldr	r0, [pc, #48]	@ (80023ac <HAL_OPAMP_MspInit+0x114>)
 800237a:	f003 f95d 	bl	8005638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800237e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002384:	2303      	movs	r3, #3
 8002386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	4619      	mov	r1, r3
 8002392:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002396:	f003 f94f 	bl	8005638 <HAL_GPIO_Init>
}
 800239a:	bf00      	nop
 800239c:	3730      	adds	r7, #48	@ 0x30
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40010308 	.word	0x40010308
 80023a8:	40021000 	.word	0x40021000
 80023ac:	48000400 	.word	0x48000400
 80023b0:	4001030c 	.word	0x4001030c
 80023b4:	40010310 	.word	0x40010310

080023b8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	@ 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a17      	ldr	r2, [pc, #92]	@ (8002434 <HAL_SPI_MspInit+0x7c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d127      	bne.n	800242a <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023da:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <HAL_SPI_MspInit+0x80>)
 80023dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023de:	4a16      	ldr	r2, [pc, #88]	@ (8002438 <HAL_SPI_MspInit+0x80>)
 80023e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80023e6:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <HAL_SPI_MspInit+0x80>)
 80023e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023f2:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <HAL_SPI_MspInit+0x80>)
 80023f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f6:	4a10      	ldr	r2, [pc, #64]	@ (8002438 <HAL_SPI_MspInit+0x80>)
 80023f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002438 <HAL_SPI_MspInit+0x80>)
 8002400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    PG5     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800240a:	233c      	movs	r3, #60	@ 0x3c
 800240c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800241a:	2305      	movs	r3, #5
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	4805      	ldr	r0, [pc, #20]	@ (800243c <HAL_SPI_MspInit+0x84>)
 8002426:	f003 f907 	bl	8005638 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800242a:	bf00      	nop
 800242c:	3728      	adds	r7, #40	@ 0x28
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40013000 	.word	0x40013000
 8002438:	40021000 	.word	0x40021000
 800243c:	48001800 	.word	0x48001800

08002440 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b09a      	sub	sp, #104	@ 0x68
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a9f      	ldr	r2, [pc, #636]	@ (80026dc <HAL_TIM_Base_MspInit+0x29c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d159      	bne.n	8002516 <HAL_TIM_Base_MspInit+0xd6>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002462:	4b9f      	ldr	r3, [pc, #636]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002466:	4a9e      	ldr	r2, [pc, #632]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002468:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800246c:	6613      	str	r3, [r2, #96]	@ 0x60
 800246e:	4b9c      	ldr	r3, [pc, #624]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002472:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002476:	653b      	str	r3, [r7, #80]	@ 0x50
 8002478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800247a:	4b99      	ldr	r3, [pc, #612]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247e:	4a98      	ldr	r2, [pc, #608]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002480:	f043 0310 	orr.w	r3, r3, #16
 8002484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002486:	4b96      	ldr	r3, [pc, #600]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	4b93      	ldr	r3, [pc, #588]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002496:	4a92      	ldr	r2, [pc, #584]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800249e:	4b90      	ldr	r3, [pc, #576]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PA11     ------> TIM1_BKIN2
    PA15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = M2_PWM_UH_TIM1_CH1_Pin|M2_PWM_VH_TIM1_CH2_Pin;
 80024aa:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80024ae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80024bc:	2302      	movs	r3, #2
 80024be:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024c4:	4619      	mov	r1, r3
 80024c6:	4887      	ldr	r0, [pc, #540]	@ (80026e4 <HAL_TIM_Base_MspInit+0x2a4>)
 80024c8:	f003 f8b6 	bl	8005638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M2_TIM1_BKIN2_Pin;
 80024cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024d0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d2:	2312      	movs	r3, #18
 80024d4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 80024de:	230c      	movs	r3, #12
 80024e0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M2_TIM1_BKIN2_GPIO_Port, &GPIO_InitStruct);
 80024e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024e6:	4619      	mov	r1, r3
 80024e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ec:	f003 f8a4 	bl	8005638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024f4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f6:	2312      	movs	r3, #18
 80024f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8002502:	2309      	movs	r3, #9
 8002504:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800250a:	4619      	mov	r1, r3
 800250c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002510:	f003 f892 	bl	8005638 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 8002514:	e18d      	b.n	8002832 <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM3)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a73      	ldr	r2, [pc, #460]	@ (80026e8 <HAL_TIM_Base_MspInit+0x2a8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d128      	bne.n	8002572 <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002520:	4b6f      	ldr	r3, [pc, #444]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002524:	4a6e      	ldr	r2, [pc, #440]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002526:	f043 0302 	orr.w	r3, r3, #2
 800252a:	6593      	str	r3, [r2, #88]	@ 0x58
 800252c:	4b6c      	ldr	r3, [pc, #432]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	647b      	str	r3, [r7, #68]	@ 0x44
 8002536:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002538:	4b69      	ldr	r3, [pc, #420]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 800253a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253c:	4a68      	ldr	r2, [pc, #416]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 800253e:	f043 0310 	orr.w	r3, r3, #16
 8002542:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002544:	4b66      	ldr	r3, [pc, #408]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	643b      	str	r3, [r7, #64]	@ 0x40
 800254e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pin = M1_HALL_H1_TIM3_CH1_Pin|M1_HALL_H2_TIM3_CH2_Pin|M1_HALL_H3_TIM3_CH3_Pin;
 8002550:	231c      	movs	r3, #28
 8002552:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	2300      	movs	r3, #0
 800255e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002560:	2302      	movs	r3, #2
 8002562:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002564:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002568:	4619      	mov	r1, r3
 800256a:	485e      	ldr	r0, [pc, #376]	@ (80026e4 <HAL_TIM_Base_MspInit+0x2a4>)
 800256c:	f003 f864 	bl	8005638 <HAL_GPIO_Init>
}
 8002570:	e15f      	b.n	8002832 <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM4)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a5d      	ldr	r2, [pc, #372]	@ (80026ec <HAL_TIM_Base_MspInit+0x2ac>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d147      	bne.n	800260c <HAL_TIM_Base_MspInit+0x1cc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800257c:	4b58      	ldr	r3, [pc, #352]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002580:	4a57      	ldr	r2, [pc, #348]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	6593      	str	r3, [r2, #88]	@ 0x58
 8002588:	4b55      	ldr	r3, [pc, #340]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002594:	4b52      	ldr	r3, [pc, #328]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002598:	4a51      	ldr	r2, [pc, #324]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a0:	4b4f      	ldr	r3, [pc, #316]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 80025a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ac:	4b4c      	ldr	r3, [pc, #304]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 80025ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b0:	4a4b      	ldr	r2, [pc, #300]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 80025b2:	f043 0302 	orr.w	r3, r3, #2
 80025b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025b8:	4b49      	ldr	r3, [pc, #292]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 80025ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Pin = M2_HALL_H2_TIM4_CH2_Pin;
 80025c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80025d6:	230a      	movs	r3, #10
 80025d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M2_HALL_H2_TIM4_CH2_GPIO_Port, &GPIO_InitStruct);
 80025da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025de:	4619      	mov	r1, r3
 80025e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025e4:	f003 f828 	bl	8005638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2_HALL_H1_TIM4_CH1_Pin|M2_HALL_H3_TIM4_CH3_Pin;
 80025e8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80025ec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f6:	2300      	movs	r3, #0
 80025f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025fa:	2302      	movs	r3, #2
 80025fc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002602:	4619      	mov	r1, r3
 8002604:	483a      	ldr	r0, [pc, #232]	@ (80026f0 <HAL_TIM_Base_MspInit+0x2b0>)
 8002606:	f003 f817 	bl	8005638 <HAL_GPIO_Init>
}
 800260a:	e112      	b.n	8002832 <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM8)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a38      	ldr	r2, [pc, #224]	@ (80026f4 <HAL_TIM_Base_MspInit+0x2b4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d172      	bne.n	80026fc <HAL_TIM_Base_MspInit+0x2bc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002616:	4b32      	ldr	r3, [pc, #200]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800261a:	4a31      	ldr	r2, [pc, #196]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 800261c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002620:	6613      	str	r3, [r2, #96]	@ 0x60
 8002622:	4b2f      	ldr	r3, [pc, #188]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002626:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800262a:	633b      	str	r3, [r7, #48]	@ 0x30
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	4b2c      	ldr	r3, [pc, #176]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002632:	4a2b      	ldr	r2, [pc, #172]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800263a:	4b29      	ldr	r3, [pc, #164]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 800263c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002646:	4b26      	ldr	r3, [pc, #152]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264a:	4a25      	ldr	r2, [pc, #148]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 800264c:	f043 0308 	orr.w	r3, r3, #8
 8002650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002652:	4b23      	ldr	r3, [pc, #140]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800265c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265e:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002662:	4a1f      	ldr	r2, [pc, #124]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800266a:	4b1d      	ldr	r3, [pc, #116]	@ (80026e0 <HAL_TIM_Base_MspInit+0x2a0>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = M1_TIM8_ETR_Pin;
 8002676:	2301      	movs	r3, #1
 8002678:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002686:	230a      	movs	r3, #10
 8002688:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M1_TIM8_ETR_GPIO_Port, &GPIO_InitStruct);
 800268a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800268e:	4619      	mov	r1, r3
 8002690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002694:	f002 ffd0 	bl	8005638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TIM8_BKIN2_Pin;
 8002698:	2302      	movs	r3, #2
 800269a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800269c:	2312      	movs	r3, #18
 800269e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a4:	2300      	movs	r3, #0
 80026a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 80026a8:	2306      	movs	r3, #6
 80026aa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M1_TIM8_BKIN2_GPIO_Port, &GPIO_InitStruct);
 80026ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026b0:	4619      	mov	r1, r3
 80026b2:	4811      	ldr	r0, [pc, #68]	@ (80026f8 <HAL_TIM_Base_MspInit+0x2b8>)
 80026b4:	f002 ffc0 	bl	8005638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TIM8_BKIN_Pin;
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026bc:	2312      	movs	r3, #18
 80026be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	2300      	movs	r3, #0
 80026c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80026c8:	2305      	movs	r3, #5
 80026ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M1_TIM8_BKIN_GPIO_Port, &GPIO_InitStruct);
 80026cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026d0:	4619      	mov	r1, r3
 80026d2:	4807      	ldr	r0, [pc, #28]	@ (80026f0 <HAL_TIM_Base_MspInit+0x2b0>)
 80026d4:	f002 ffb0 	bl	8005638 <HAL_GPIO_Init>
}
 80026d8:	e0ab      	b.n	8002832 <HAL_TIM_Base_MspInit+0x3f2>
 80026da:	bf00      	nop
 80026dc:	40012c00 	.word	0x40012c00
 80026e0:	40021000 	.word	0x40021000
 80026e4:	48001000 	.word	0x48001000
 80026e8:	40000400 	.word	0x40000400
 80026ec:	40000800 	.word	0x40000800
 80026f0:	48000400 	.word	0x48000400
 80026f4:	40013400 	.word	0x40013400
 80026f8:	48000c00 	.word	0x48000c00
  else if(htim_base->Instance==TIM16)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a4e      	ldr	r2, [pc, #312]	@ (800283c <HAL_TIM_Base_MspInit+0x3fc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d128      	bne.n	8002758 <HAL_TIM_Base_MspInit+0x318>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002706:	4b4e      	ldr	r3, [pc, #312]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 8002708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270a:	4a4d      	ldr	r2, [pc, #308]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 800270c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002710:	6613      	str	r3, [r2, #96]	@ 0x60
 8002712:	4b4b      	ldr	r3, [pc, #300]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 8002714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	623b      	str	r3, [r7, #32]
 800271c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271e:	4b48      	ldr	r3, [pc, #288]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	4a47      	ldr	r2, [pc, #284]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800272a:	4b45      	ldr	r3, [pc, #276]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PFC_TIM16_BKIN_Pin;
 8002736:	2320      	movs	r3, #32
 8002738:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800273a:	2312      	movs	r3, #18
 800273c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002746:	2301      	movs	r3, #1
 8002748:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(PFC_TIM16_BKIN_GPIO_Port, &GPIO_InitStruct);
 800274a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800274e:	4619      	mov	r1, r3
 8002750:	483c      	ldr	r0, [pc, #240]	@ (8002844 <HAL_TIM_Base_MspInit+0x404>)
 8002752:	f002 ff71 	bl	8005638 <HAL_GPIO_Init>
}
 8002756:	e06c      	b.n	8002832 <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM17)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a3a      	ldr	r2, [pc, #232]	@ (8002848 <HAL_TIM_Base_MspInit+0x408>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d128      	bne.n	80027b4 <HAL_TIM_Base_MspInit+0x374>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002762:	4b37      	ldr	r3, [pc, #220]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 8002764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002766:	4a36      	ldr	r2, [pc, #216]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 8002768:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800276c:	6613      	str	r3, [r2, #96]	@ 0x60
 800276e:	4b34      	ldr	r3, [pc, #208]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 8002770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002772:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277a:	4b31      	ldr	r3, [pc, #196]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 800277c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277e:	4a30      	ldr	r2, [pc, #192]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002786:	4b2e      	ldr	r3, [pc, #184]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PFC_TIM17_BKIN_Pin;
 8002792:	2310      	movs	r3, #16
 8002794:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002796:	2312      	movs	r3, #18
 8002798:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80027a2:	230a      	movs	r3, #10
 80027a4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(PFC_TIM17_BKIN_GPIO_Port, &GPIO_InitStruct);
 80027a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027aa:	4619      	mov	r1, r3
 80027ac:	4825      	ldr	r0, [pc, #148]	@ (8002844 <HAL_TIM_Base_MspInit+0x404>)
 80027ae:	f002 ff43 	bl	8005638 <HAL_GPIO_Init>
}
 80027b2:	e03e      	b.n	8002832 <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM20)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a24      	ldr	r2, [pc, #144]	@ (800284c <HAL_TIM_Base_MspInit+0x40c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d139      	bne.n	8002832 <HAL_TIM_Base_MspInit+0x3f2>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80027be:	4b20      	ldr	r3, [pc, #128]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 80027c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 80027c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80027ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 80027cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027da:	4a19      	ldr	r2, [pc, #100]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 80027dc:	f043 0320 	orr.w	r3, r3, #32
 80027e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027e2:	4b17      	ldr	r3, [pc, #92]	@ (8002840 <HAL_TIM_Base_MspInit+0x400>)
 80027e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_TIM20_BKIN_Pin|M3_TIM20_BKIN2_Pin;
 80027ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80027f2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027f4:	2312      	movs	r3, #18
 80027f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 8002800:	2302      	movs	r3, #2
 8002802:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002804:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002808:	4619      	mov	r1, r3
 800280a:	4811      	ldr	r0, [pc, #68]	@ (8002850 <HAL_TIM_Base_MspInit+0x410>)
 800280c:	f002 ff14 	bl	8005638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3_PWM_UH_TIM20_CH1_Pin;
 8002810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002814:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 8002822:	2302      	movs	r3, #2
 8002824:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M3_PWM_UH_TIM20_CH1_GPIO_Port, &GPIO_InitStruct);
 8002826:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800282a:	4619      	mov	r1, r3
 800282c:	4808      	ldr	r0, [pc, #32]	@ (8002850 <HAL_TIM_Base_MspInit+0x410>)
 800282e:	f002 ff03 	bl	8005638 <HAL_GPIO_Init>
}
 8002832:	bf00      	nop
 8002834:	3768      	adds	r7, #104	@ 0x68
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40014400 	.word	0x40014400
 8002840:	40021000 	.word	0x40021000
 8002844:	48000400 	.word	0x48000400
 8002848:	40014800 	.word	0x40014800
 800284c:	40015000 	.word	0x40015000
 8002850:	48001400 	.word	0x48001400

08002854 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08c      	sub	sp, #48	@ 0x30
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 031c 	add.w	r3, r7, #28
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002874:	d128      	bne.n	80028c8 <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002876:	4b2d      	ldr	r3, [pc, #180]	@ (800292c <HAL_TIM_IC_MspInit+0xd8>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287a:	4a2c      	ldr	r2, [pc, #176]	@ (800292c <HAL_TIM_IC_MspInit+0xd8>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6593      	str	r3, [r2, #88]	@ 0x58
 8002882:	4b2a      	ldr	r3, [pc, #168]	@ (800292c <HAL_TIM_IC_MspInit+0xd8>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800288e:	4b27      	ldr	r3, [pc, #156]	@ (800292c <HAL_TIM_IC_MspInit+0xd8>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002892:	4a26      	ldr	r2, [pc, #152]	@ (800292c <HAL_TIM_IC_MspInit+0xd8>)
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800289a:	4b24      	ldr	r3, [pc, #144]	@ (800292c <HAL_TIM_IC_MspInit+0xd8>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = M2_ENCA_TIM2_CH1_Pin|M2_ENCB_TIM2_CH2_Pin|M2_ENCZ_TIM2_CH3_Pin;
 80028a6:	2398      	movs	r3, #152	@ 0x98
 80028a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80028b6:	2302      	movs	r3, #2
 80028b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028ba:	f107 031c 	add.w	r3, r7, #28
 80028be:	4619      	mov	r1, r3
 80028c0:	481b      	ldr	r0, [pc, #108]	@ (8002930 <HAL_TIM_IC_MspInit+0xdc>)
 80028c2:	f002 feb9 	bl	8005638 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 80028c6:	e02d      	b.n	8002924 <HAL_TIM_IC_MspInit+0xd0>
  else if(htim_ic->Instance==TIM5)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a19      	ldr	r2, [pc, #100]	@ (8002934 <HAL_TIM_IC_MspInit+0xe0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d128      	bne.n	8002924 <HAL_TIM_IC_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028d2:	4b16      	ldr	r3, [pc, #88]	@ (800292c <HAL_TIM_IC_MspInit+0xd8>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d6:	4a15      	ldr	r2, [pc, #84]	@ (800292c <HAL_TIM_IC_MspInit+0xd8>)
 80028d8:	f043 0308 	orr.w	r3, r3, #8
 80028dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80028de:	4b13      	ldr	r3, [pc, #76]	@ (800292c <HAL_TIM_IC_MspInit+0xd8>)
 80028e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ea:	4b10      	ldr	r3, [pc, #64]	@ (800292c <HAL_TIM_IC_MspInit+0xd8>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ee:	4a0f      	ldr	r2, [pc, #60]	@ (800292c <HAL_TIM_IC_MspInit+0xd8>)
 80028f0:	f043 0320 	orr.w	r3, r3, #32
 80028f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028f6:	4b0d      	ldr	r3, [pc, #52]	@ (800292c <HAL_TIM_IC_MspInit+0xd8>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_ENCB_TIM5_CH2_Pin|M1_ENCZ_TIM5_CH3_Pin|M1_ENCA_TIM5_CH1_Pin;
 8002902:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 8002914:	2306      	movs	r3, #6
 8002916:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002918:	f107 031c 	add.w	r3, r7, #28
 800291c:	4619      	mov	r1, r3
 800291e:	4806      	ldr	r0, [pc, #24]	@ (8002938 <HAL_TIM_IC_MspInit+0xe4>)
 8002920:	f002 fe8a 	bl	8005638 <HAL_GPIO_Init>
}
 8002924:	bf00      	nop
 8002926:	3730      	adds	r7, #48	@ 0x30
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	48000c00 	.word	0x48000c00
 8002934:	40000c00 	.word	0x40000c00
 8002938:	48001400 	.word	0x48001400

0800293c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b090      	sub	sp, #64	@ 0x40
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a81      	ldr	r2, [pc, #516]	@ (8002b60 <HAL_TIM_MspPostInit+0x224>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d13a      	bne.n	80029d4 <HAL_TIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800295e:	4b81      	ldr	r3, [pc, #516]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002962:	4a80      	ldr	r2, [pc, #512]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002964:	f043 0310 	orr.w	r3, r3, #16
 8002968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800296a:	4b7e      	ldr	r3, [pc, #504]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 800296c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002976:	4b7b      	ldr	r3, [pc, #492]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297a:	4a7a      	ldr	r2, [pc, #488]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 800297c:	f043 0302 	orr.w	r3, r3, #2
 8002980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002982:	4b78      	ldr	r3, [pc, #480]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = M2_PWM_WL_TIM1_CH3_Pin;
 800298e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80029a0:	2302      	movs	r3, #2
 80029a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M2_PWM_WL_TIM1_CH3_GPIO_Port, &GPIO_InitStruct);
 80029a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029a8:	4619      	mov	r1, r3
 80029aa:	486f      	ldr	r0, [pc, #444]	@ (8002b68 <HAL_TIM_MspPostInit+0x22c>)
 80029ac:	f002 fe44 	bl	8005638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M2_PWM_WL_TIM1_CH3N_Pin;
 80029b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2300      	movs	r3, #0
 80029c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 80029c2:	230c      	movs	r3, #12
 80029c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M2_PWM_WL_TIM1_CH3N_GPIO_Port, &GPIO_InitStruct);
 80029c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029ca:	4619      	mov	r1, r3
 80029cc:	4867      	ldr	r0, [pc, #412]	@ (8002b6c <HAL_TIM_MspPostInit+0x230>)
 80029ce:	f002 fe33 	bl	8005638 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 80029d2:	e0c0      	b.n	8002b56 <HAL_TIM_MspPostInit+0x21a>
  else if(htim->Instance==TIM8)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a65      	ldr	r2, [pc, #404]	@ (8002b70 <HAL_TIM_MspPostInit+0x234>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d11d      	bne.n	8002a1a <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029de:	4b61      	ldr	r3, [pc, #388]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e2:	4a60      	ldr	r2, [pc, #384]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 80029e4:	f043 0304 	orr.w	r3, r3, #4
 80029e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ea:	4b5e      	ldr	r3, [pc, #376]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	623b      	str	r3, [r7, #32]
 80029f4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = M1_PWM_UH_TIM8_CH1_Pin|M1_PWM_VH_TIM8_CH2_Pin|M1_PWM_WH_TIM8_CH3_Pin|M1_PWM_UL_TIM8_CH1N_Pin
 80029f6:	f44f 53ee 	mov.w	r3, #7616	@ 0x1dc0
 80029fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2300      	movs	r3, #0
 8002a06:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002a08:	2304      	movs	r3, #4
 8002a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a10:	4619      	mov	r1, r3
 8002a12:	4858      	ldr	r0, [pc, #352]	@ (8002b74 <HAL_TIM_MspPostInit+0x238>)
 8002a14:	f002 fe10 	bl	8005638 <HAL_GPIO_Init>
}
 8002a18:	e09d      	b.n	8002b56 <HAL_TIM_MspPostInit+0x21a>
  else if(htim->Instance==TIM16)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a56      	ldr	r2, [pc, #344]	@ (8002b78 <HAL_TIM_MspPostInit+0x23c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d11c      	bne.n	8002a5e <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a24:	4b4f      	ldr	r3, [pc, #316]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a28:	4a4e      	ldr	r2, [pc, #312]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002a2a:	f043 0310 	orr.w	r3, r3, #16
 8002a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a30:	4b4c      	ldr	r3, [pc, #304]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PFC_PWM1_TIM16_CH1_Pin;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM16;
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(PFC_PWM1_TIM16_CH1_GPIO_Port, &GPIO_InitStruct);
 8002a50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a54:	4619      	mov	r1, r3
 8002a56:	4844      	ldr	r0, [pc, #272]	@ (8002b68 <HAL_TIM_MspPostInit+0x22c>)
 8002a58:	f002 fdee 	bl	8005638 <HAL_GPIO_Init>
}
 8002a5c:	e07b      	b.n	8002b56 <HAL_TIM_MspPostInit+0x21a>
  else if(htim->Instance==TIM17)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a46      	ldr	r2, [pc, #280]	@ (8002b7c <HAL_TIM_MspPostInit+0x240>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d11c      	bne.n	8002aa2 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a68:	4b3e      	ldr	r3, [pc, #248]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6c:	4a3d      	ldr	r2, [pc, #244]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002a6e:	f043 0310 	orr.w	r3, r3, #16
 8002a72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a74:	4b3b      	ldr	r3, [pc, #236]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PFC_PWM2_TIM17_CH1_Pin;
 8002a80:	2302      	movs	r3, #2
 8002a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM17;
 8002a90:	2304      	movs	r3, #4
 8002a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(PFC_PWM2_TIM17_CH1_GPIO_Port, &GPIO_InitStruct);
 8002a94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4833      	ldr	r0, [pc, #204]	@ (8002b68 <HAL_TIM_MspPostInit+0x22c>)
 8002a9c:	f002 fdcc 	bl	8005638 <HAL_GPIO_Init>
}
 8002aa0:	e059      	b.n	8002b56 <HAL_TIM_MspPostInit+0x21a>
  else if(htim->Instance==TIM20)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a36      	ldr	r2, [pc, #216]	@ (8002b80 <HAL_TIM_MspPostInit+0x244>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d154      	bne.n	8002b56 <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aac:	4b2d      	ldr	r3, [pc, #180]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab0:	4a2c      	ldr	r2, [pc, #176]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002ab2:	f043 0310 	orr.w	r3, r3, #16
 8002ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ac4:	4b27      	ldr	r3, [pc, #156]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac8:	4a26      	ldr	r2, [pc, #152]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002aca:	f043 0320 	orr.w	r3, r3, #32
 8002ace:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ad0:	4b24      	ldr	r3, [pc, #144]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002adc:	4b21      	ldr	r3, [pc, #132]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae0:	4a20      	ldr	r2, [pc, #128]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ae6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <HAL_TIM_MspPostInit+0x228>)
 8002aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_WL_TIM20_CH3N_Pin;
 8002af4:	2340      	movs	r3, #64	@ 0x40
 8002af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	2300      	movs	r3, #0
 8002b02:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8002b04:	2306      	movs	r3, #6
 8002b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M3_PWM_WL_TIM20_CH3N_GPIO_Port, &GPIO_InitStruct);
 8002b08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4816      	ldr	r0, [pc, #88]	@ (8002b68 <HAL_TIM_MspPostInit+0x22c>)
 8002b10:	f002 fd92 	bl	8005638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3_PWM_VH_TIM20_CH2_Pin|M3_PWM_WH_TIM20_CH3_Pin;
 8002b14:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 8002b26:	2302      	movs	r3, #2
 8002b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4814      	ldr	r0, [pc, #80]	@ (8002b84 <HAL_TIM_MspPostInit+0x248>)
 8002b32:	f002 fd81 	bl	8005638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3_PWM_UL_TIM20_CH1N_Pin|M3_PWM_VL_TIM20_CH2N_Pin;
 8002b36:	2303      	movs	r3, #3
 8002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 8002b46:	2302      	movs	r3, #2
 8002b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b4e:	4619      	mov	r1, r3
 8002b50:	480d      	ldr	r0, [pc, #52]	@ (8002b88 <HAL_TIM_MspPostInit+0x24c>)
 8002b52:	f002 fd71 	bl	8005638 <HAL_GPIO_Init>
}
 8002b56:	bf00      	nop
 8002b58:	3740      	adds	r7, #64	@ 0x40
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40012c00 	.word	0x40012c00
 8002b64:	40021000 	.word	0x40021000
 8002b68:	48001000 	.word	0x48001000
 8002b6c:	48000400 	.word	0x48000400
 8002b70:	40013400 	.word	0x40013400
 8002b74:	48000800 	.word	0x48000800
 8002b78:	40014400 	.word	0x40014400
 8002b7c:	40014800 	.word	0x40014800
 8002b80:	40015000 	.word	0x40015000
 8002b84:	48001400 	.word	0x48001400
 8002b88:	48001800 	.word	0x48001800

08002b8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b0a0      	sub	sp, #128	@ 0x80
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ba4:	f107 0318 	add.w	r3, r7, #24
 8002ba8:	2254      	movs	r2, #84	@ 0x54
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f006 febf 	bl	8009930 <memset>
  if(huart->Instance==USART1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2e      	ldr	r2, [pc, #184]	@ (8002c70 <HAL_UART_MspInit+0xe4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d154      	bne.n	8002c66 <HAL_UART_MspInit+0xda>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bc4:	f107 0318 	add.w	r3, r7, #24
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 fd81 	bl	80066d0 <HAL_RCCEx_PeriphCLKConfig>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bd4:	f7ff f812 	bl	8001bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bd8:	4b26      	ldr	r3, [pc, #152]	@ (8002c74 <HAL_UART_MspInit+0xe8>)
 8002bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bdc:	4a25      	ldr	r2, [pc, #148]	@ (8002c74 <HAL_UART_MspInit+0xe8>)
 8002bde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002be2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002be4:	4b23      	ldr	r3, [pc, #140]	@ (8002c74 <HAL_UART_MspInit+0xe8>)
 8002be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf0:	4b20      	ldr	r3, [pc, #128]	@ (8002c74 <HAL_UART_MspInit+0xe8>)
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c74 <HAL_UART_MspInit+0xe8>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c74 <HAL_UART_MspInit+0xe8>)
 8002bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c08:	4b1a      	ldr	r3, [pc, #104]	@ (8002c74 <HAL_UART_MspInit+0xe8>)
 8002c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0c:	4a19      	ldr	r2, [pc, #100]	@ (8002c74 <HAL_UART_MspInit+0xe8>)
 8002c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c14:	4b17      	ldr	r3, [pc, #92]	@ (8002c74 <HAL_UART_MspInit+0xe8>)
 8002c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PG9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c32:	2307      	movs	r3, #7
 8002c34:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c40:	f002 fcfa 	bl	8005638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c48:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2300      	movs	r3, #0
 8002c54:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c56:	2307      	movs	r3, #7
 8002c58:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c5a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4805      	ldr	r0, [pc, #20]	@ (8002c78 <HAL_UART_MspInit+0xec>)
 8002c62:	f002 fce9 	bl	8005638 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002c66:	bf00      	nop
 8002c68:	3780      	adds	r7, #128	@ 0x80
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40013800 	.word	0x40013800
 8002c74:	40021000 	.word	0x40021000
 8002c78:	48001800 	.word	0x48001800

08002c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c80:	bf00      	nop
 8002c82:	e7fd      	b.n	8002c80 <NMI_Handler+0x4>

08002c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <HardFault_Handler+0x4>

08002c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <MemManage_Handler+0x4>

08002c94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <BusFault_Handler+0x4>

08002c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <UsageFault_Handler+0x4>

08002ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd2:	f000 f8fd 	bl	8002ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ce0:	4802      	ldr	r0, [pc, #8]	@ (8002cec <DMA1_Channel4_IRQHandler+0x10>)
 8002ce2:	f002 fb5a 	bl	800539a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20010228 	.word	0x20010228

08002cf0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002cf4:	4803      	ldr	r0, [pc, #12]	@ (8002d04 <ADC1_2_IRQHandler+0x14>)
 8002cf6:	f000 fd13 	bl	8003720 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002cfa:	4803      	ldr	r0, [pc, #12]	@ (8002d08 <ADC1_2_IRQHandler+0x18>)
 8002cfc:	f000 fd10 	bl	8003720 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20010078 	.word	0x20010078
 8002d08:	200100e4 	.word	0x200100e4

08002d0c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002d10:	4802      	ldr	r0, [pc, #8]	@ (8002d1c <DMA2_Channel1_IRQHandler+0x10>)
 8002d12:	f002 fb42 	bl	800539a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200102e8 	.word	0x200102e8

08002d20 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8002d24:	4802      	ldr	r0, [pc, #8]	@ (8002d30 <DMA2_Channel2_IRQHandler+0x10>)
 8002d26:	f002 fb38 	bl	800539a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20010348 	.word	0x20010348

08002d34 <DMA1_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA1 channel8 global interrupt.
  */
void DMA1_Channel8_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel8_IRQn 0 */

  /* USER CODE END DMA1_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002d38:	4802      	ldr	r0, [pc, #8]	@ (8002d44 <DMA1_Channel8_IRQHandler+0x10>)
 8002d3a:	f002 fb2e 	bl	800539a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel8_IRQn 1 */

  /* USER CODE END DMA1_Channel8_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20010288 	.word	0x20010288

08002d48 <_sbrk>:
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	4a14      	ldr	r2, [pc, #80]	@ (8002da4 <_sbrk+0x5c>)
 8002d52:	4b15      	ldr	r3, [pc, #84]	@ (8002da8 <_sbrk+0x60>)
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	4b13      	ldr	r3, [pc, #76]	@ (8002dac <_sbrk+0x64>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <_sbrk+0x22>
 8002d64:	4b11      	ldr	r3, [pc, #68]	@ (8002dac <_sbrk+0x64>)
 8002d66:	4a12      	ldr	r2, [pc, #72]	@ (8002db0 <_sbrk+0x68>)
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	4b10      	ldr	r3, [pc, #64]	@ (8002dac <_sbrk+0x64>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d207      	bcs.n	8002d88 <_sbrk+0x40>
 8002d78:	f006 fde2 	bl	8009940 <__errno>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	220c      	movs	r2, #12
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	f04f 33ff 	mov.w	r3, #4294967295
 8002d86:	e009      	b.n	8002d9c <_sbrk+0x54>
 8002d88:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <_sbrk+0x64>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	4b07      	ldr	r3, [pc, #28]	@ (8002dac <_sbrk+0x64>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	4a05      	ldr	r2, [pc, #20]	@ (8002dac <_sbrk+0x64>)
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20020000 	.word	0x20020000
 8002da8:	00000400 	.word	0x00000400
 8002dac:	2001084c 	.word	0x2001084c
 8002db0:	200109a0 	.word	0x200109a0

08002db4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002db8:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <SystemInit+0x20>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbe:	4a05      	ldr	r2, [pc, #20]	@ (8002dd4 <SystemInit+0x20>)
 8002dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <Reset_Handler>:
 8002dd8:	480d      	ldr	r0, [pc, #52]	@ (8002e10 <LoopForever+0x2>)
 8002dda:	4685      	mov	sp, r0
 8002ddc:	f7ff ffea 	bl	8002db4 <SystemInit>
 8002de0:	480c      	ldr	r0, [pc, #48]	@ (8002e14 <LoopForever+0x6>)
 8002de2:	490d      	ldr	r1, [pc, #52]	@ (8002e18 <LoopForever+0xa>)
 8002de4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e1c <LoopForever+0xe>)
 8002de6:	2300      	movs	r3, #0
 8002de8:	e002      	b.n	8002df0 <LoopCopyDataInit>

08002dea <CopyDataInit>:
 8002dea:	58d4      	ldr	r4, [r2, r3]
 8002dec:	50c4      	str	r4, [r0, r3]
 8002dee:	3304      	adds	r3, #4

08002df0 <LoopCopyDataInit>:
 8002df0:	18c4      	adds	r4, r0, r3
 8002df2:	428c      	cmp	r4, r1
 8002df4:	d3f9      	bcc.n	8002dea <CopyDataInit>
 8002df6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e20 <LoopForever+0x12>)
 8002df8:	4c0a      	ldr	r4, [pc, #40]	@ (8002e24 <LoopForever+0x16>)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e001      	b.n	8002e02 <LoopFillZerobss>

08002dfe <FillZerobss>:
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	3204      	adds	r2, #4

08002e02 <LoopFillZerobss>:
 8002e02:	42a2      	cmp	r2, r4
 8002e04:	d3fb      	bcc.n	8002dfe <FillZerobss>
 8002e06:	f006 fda1 	bl	800994c <__libc_init_array>
 8002e0a:	f7fd fbf7 	bl	80005fc <main>

08002e0e <LoopForever>:
 8002e0e:	e7fe      	b.n	8002e0e <LoopForever>
 8002e10:	20020000 	.word	0x20020000
 8002e14:	20000000 	.word	0x20000000
 8002e18:	2000005c 	.word	0x2000005c
 8002e1c:	0800a2dc 	.word	0x0800a2dc
 8002e20:	2000005c 	.word	0x2000005c
 8002e24:	2001099c 	.word	0x2001099c

08002e28 <ADC3_IRQHandler>:
 8002e28:	e7fe      	b.n	8002e28 <ADC3_IRQHandler>

08002e2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e34:	2003      	movs	r0, #3
 8002e36:	f001 ff71 	bl	8004d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f000 f80e 	bl	8002e5c <HAL_InitTick>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	71fb      	strb	r3, [r7, #7]
 8002e4a:	e001      	b.n	8002e50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e4c:	f7fe fedc 	bl	8001c08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e50:	79fb      	ldrb	r3, [r7, #7]

}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002e68:	4b16      	ldr	r3, [pc, #88]	@ (8002ec4 <HAL_InitTick+0x68>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d022      	beq.n	8002eb6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002e70:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <HAL_InitTick+0x6c>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b13      	ldr	r3, [pc, #76]	@ (8002ec4 <HAL_InitTick+0x68>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002e7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 ff7c 	bl	8004d82 <HAL_SYSTICK_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10f      	bne.n	8002eb0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	d809      	bhi.n	8002eaa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e96:	2200      	movs	r2, #0
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9e:	f001 ff48 	bl	8004d32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ecc <HAL_InitTick+0x70>)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	e007      	b.n	8002eba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
 8002eae:	e004      	b.n	8002eba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
 8002eb4:	e001      	b.n	8002eba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000008 	.word	0x20000008
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	20000004 	.word	0x20000004

08002ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ed4:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <HAL_IncTick+0x1c>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <HAL_IncTick+0x20>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4413      	add	r3, r2
 8002ede:	4a03      	ldr	r2, [pc, #12]	@ (8002eec <HAL_IncTick+0x1c>)
 8002ee0:	6013      	str	r3, [r2, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	20010850 	.word	0x20010850
 8002ef0:	20000008 	.word	0x20000008

08002ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	@ (8002f08 <HAL_GetTick+0x14>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	20010850 	.word	0x20010850

08002f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7ff ffee 	bl	8002ef4 <HAL_GetTick>
 8002f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d004      	beq.n	8002f30 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f26:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <HAL_Delay+0x40>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f30:	bf00      	nop
 8002f32:	f7ff ffdf 	bl	8002ef4 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d8f7      	bhi.n	8002f32 <HAL_Delay+0x26>
  {
  }
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000008 	.word	0x20000008

08002f50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	609a      	str	r2, [r3, #8]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3360      	adds	r3, #96	@ 0x60
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <LL_ADC_SetOffset+0x44>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ff0:	bf00      	nop
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	03fff000 	.word	0x03fff000

08003000 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3360      	adds	r3, #96	@ 0x60
 800300e:	461a      	mov	r2, r3
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3360      	adds	r3, #96	@ 0x60
 800303c:	461a      	mov	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	431a      	orrs	r2, r3
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003056:	bf00      	nop
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003062:	b480      	push	{r7}
 8003064:	b087      	sub	sp, #28
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3360      	adds	r3, #96	@ 0x60
 8003072:	461a      	mov	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	431a      	orrs	r2, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800308c:	bf00      	nop
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3360      	adds	r3, #96	@ 0x60
 80030a8:	461a      	mov	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	431a      	orrs	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	615a      	str	r2, [r3, #20]
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800311a:	b480      	push	{r7}
 800311c:	b087      	sub	sp, #28
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3330      	adds	r3, #48	@ 0x30
 800312a:	461a      	mov	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	4413      	add	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	211f      	movs	r1, #31
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	401a      	ands	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	0e9b      	lsrs	r3, r3, #26
 8003152:	f003 011f 	and.w	r1, r3, #31
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	431a      	orrs	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3314      	adds	r3, #20
 80031a8:	461a      	mov	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	0e5b      	lsrs	r3, r3, #25
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	4413      	add	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	0d1b      	lsrs	r3, r3, #20
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	2107      	movs	r1, #7
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	401a      	ands	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	0d1b      	lsrs	r3, r3, #20
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	431a      	orrs	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031e2:	bf00      	nop
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003208:	43db      	mvns	r3, r3
 800320a:	401a      	ands	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0318 	and.w	r3, r3, #24
 8003212:	4908      	ldr	r1, [pc, #32]	@ (8003234 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003214:	40d9      	lsrs	r1, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	400b      	ands	r3, r1
 800321a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321e:	431a      	orrs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003226:	bf00      	nop
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	0007ffff 	.word	0x0007ffff

08003238 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 031f 	and.w	r3, r3, #31
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003280:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6093      	str	r3, [r2, #8]
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032a8:	d101      	bne.n	80032ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032f8:	d101      	bne.n	80032fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800331c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003320:	f043 0201 	orr.w	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <LL_ADC_IsEnabled+0x18>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <LL_ADC_IsEnabled+0x1a>
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b04      	cmp	r3, #4
 800336c:	d101      	bne.n	8003372 <LL_ADC_REG_IsConversionOngoing+0x18>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b08      	cmp	r3, #8
 8003392:	d101      	bne.n	8003398 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b089      	sub	sp, #36	@ 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e1a9      	b.n	8003716 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fe fc3d 	bl	8001c50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff53 	bl	8003294 <LL_ADC_IsDeepPowerDownEnabled>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d004      	beq.n	80033fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff39 	bl	8003270 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff ff6e 	bl	80032e4 <LL_ADC_IsInternalRegulatorEnabled>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d115      	bne.n	800343a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ff52 	bl	80032bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003418:	4b9c      	ldr	r3, [pc, #624]	@ (800368c <HAL_ADC_Init+0x2e4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	099b      	lsrs	r3, r3, #6
 800341e:	4a9c      	ldr	r2, [pc, #624]	@ (8003690 <HAL_ADC_Init+0x2e8>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	099b      	lsrs	r3, r3, #6
 8003426:	3301      	adds	r3, #1
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800342c:	e002      	b.n	8003434 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	3b01      	subs	r3, #1
 8003432:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f9      	bne.n	800342e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff ff50 	bl	80032e4 <LL_ADC_IsInternalRegulatorEnabled>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10d      	bne.n	8003466 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344e:	f043 0210 	orr.w	r2, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800345a:	f043 0201 	orr.w	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff ff75 	bl	800335a <LL_ADC_REG_IsConversionOngoing>
 8003470:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	f040 8142 	bne.w	8003704 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f040 813e 	bne.w	8003704 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003490:	f043 0202 	orr.w	r2, r3, #2
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff49 	bl	8003334 <LL_ADC_IsEnabled>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d141      	bne.n	800352c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b0:	d004      	beq.n	80034bc <HAL_ADC_Init+0x114>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a77      	ldr	r2, [pc, #476]	@ (8003694 <HAL_ADC_Init+0x2ec>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d10f      	bne.n	80034dc <HAL_ADC_Init+0x134>
 80034bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034c0:	f7ff ff38 	bl	8003334 <LL_ADC_IsEnabled>
 80034c4:	4604      	mov	r4, r0
 80034c6:	4873      	ldr	r0, [pc, #460]	@ (8003694 <HAL_ADC_Init+0x2ec>)
 80034c8:	f7ff ff34 	bl	8003334 <LL_ADC_IsEnabled>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4323      	orrs	r3, r4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e012      	b.n	8003502 <HAL_ADC_Init+0x15a>
 80034dc:	486e      	ldr	r0, [pc, #440]	@ (8003698 <HAL_ADC_Init+0x2f0>)
 80034de:	f7ff ff29 	bl	8003334 <LL_ADC_IsEnabled>
 80034e2:	4604      	mov	r4, r0
 80034e4:	486d      	ldr	r0, [pc, #436]	@ (800369c <HAL_ADC_Init+0x2f4>)
 80034e6:	f7ff ff25 	bl	8003334 <LL_ADC_IsEnabled>
 80034ea:	4603      	mov	r3, r0
 80034ec:	431c      	orrs	r4, r3
 80034ee:	486c      	ldr	r0, [pc, #432]	@ (80036a0 <HAL_ADC_Init+0x2f8>)
 80034f0:	f7ff ff20 	bl	8003334 <LL_ADC_IsEnabled>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4323      	orrs	r3, r4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d012      	beq.n	800352c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800350e:	d004      	beq.n	800351a <HAL_ADC_Init+0x172>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a5f      	ldr	r2, [pc, #380]	@ (8003694 <HAL_ADC_Init+0x2ec>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_ADC_Init+0x176>
 800351a:	4a62      	ldr	r2, [pc, #392]	@ (80036a4 <HAL_ADC_Init+0x2fc>)
 800351c:	e000      	b.n	8003520 <HAL_ADC_Init+0x178>
 800351e:	4a62      	ldr	r2, [pc, #392]	@ (80036a8 <HAL_ADC_Init+0x300>)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4619      	mov	r1, r3
 8003526:	4610      	mov	r0, r2
 8003528:	f7ff fd12 	bl	8002f50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7f5b      	ldrb	r3, [r3, #29]
 8003530:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003536:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800353c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003542:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800354a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003556:	2b01      	cmp	r3, #1
 8003558:	d106      	bne.n	8003568 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355e:	3b01      	subs	r3, #1
 8003560:	045b      	lsls	r3, r3, #17
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003574:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	4b48      	ldr	r3, [pc, #288]	@ (80036ac <HAL_ADC_Init+0x304>)
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	69b9      	ldr	r1, [r7, #24]
 8003594:	430b      	orrs	r3, r1
 8003596:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fee4 	bl	8003380 <LL_ADC_INJ_IsConversionOngoing>
 80035b8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d17f      	bne.n	80036c0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d17c      	bne.n	80036c0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035ca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80035d2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035e2:	f023 0302 	bic.w	r3, r3, #2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	69b9      	ldr	r1, [r7, #24]
 80035ec:	430b      	orrs	r3, r1
 80035ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d017      	beq.n	8003628 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003606:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003610:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003614:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6911      	ldr	r1, [r2, #16]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	430b      	orrs	r3, r1
 8003622:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003626:	e013      	b.n	8003650 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003636:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003648:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800364c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003656:	2b01      	cmp	r3, #1
 8003658:	d12a      	bne.n	80036b0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003664:	f023 0304 	bic.w	r3, r3, #4
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003670:	4311      	orrs	r1, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003676:	4311      	orrs	r1, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800367c:	430a      	orrs	r2, r1
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	611a      	str	r2, [r3, #16]
 800368a:	e019      	b.n	80036c0 <HAL_ADC_Init+0x318>
 800368c:	20000000 	.word	0x20000000
 8003690:	053e2d63 	.word	0x053e2d63
 8003694:	50000100 	.word	0x50000100
 8003698:	50000400 	.word	0x50000400
 800369c:	50000500 	.word	0x50000500
 80036a0:	50000600 	.word	0x50000600
 80036a4:	50000300 	.word	0x50000300
 80036a8:	50000700 	.word	0x50000700
 80036ac:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d10c      	bne.n	80036e2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	f023 010f 	bic.w	r1, r3, #15
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	1e5a      	subs	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	631a      	str	r2, [r3, #48]	@ 0x30
 80036e0:	e007      	b.n	80036f2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 020f 	bic.w	r2, r2, #15
 80036f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f6:	f023 0303 	bic.w	r3, r3, #3
 80036fa:	f043 0201 	orr.w	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003702:	e007      	b.n	8003714 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003708:	f043 0210 	orr.w	r2, r3, #16
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003714:	7ffb      	ldrb	r3, [r7, #31]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3724      	adds	r7, #36	@ 0x24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd90      	pop	{r4, r7, pc}
 800371e:	bf00      	nop

08003720 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	@ 0x28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003744:	d004      	beq.n	8003750 <HAL_ADC_IRQHandler+0x30>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a8e      	ldr	r2, [pc, #568]	@ (8003984 <HAL_ADC_IRQHandler+0x264>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d101      	bne.n	8003754 <HAL_ADC_IRQHandler+0x34>
 8003750:	4b8d      	ldr	r3, [pc, #564]	@ (8003988 <HAL_ADC_IRQHandler+0x268>)
 8003752:	e000      	b.n	8003756 <HAL_ADC_IRQHandler+0x36>
 8003754:	4b8d      	ldr	r3, [pc, #564]	@ (800398c <HAL_ADC_IRQHandler+0x26c>)
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fd6e 	bl	8003238 <LL_ADC_GetMultimode>
 800375c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d017      	beq.n	8003798 <HAL_ADC_IRQHandler+0x78>
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d012      	beq.n	8003798 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003782:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f001 f8e4 	bl	8004958 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2202      	movs	r2, #2
 8003796:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d004      	beq.n	80037ac <HAL_ADC_IRQHandler+0x8c>
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8094 	beq.w	80038e0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 808e 	beq.w	80038e0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d105      	bne.n	80037dc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fc87 	bl	80030f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d072      	beq.n	80038d2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a64      	ldr	r2, [pc, #400]	@ (8003984 <HAL_ADC_IRQHandler+0x264>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_ADC_IRQHandler+0xea>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a65      	ldr	r2, [pc, #404]	@ (8003990 <HAL_ADC_IRQHandler+0x270>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d002      	beq.n	8003806 <HAL_ADC_IRQHandler+0xe6>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	e003      	b.n	800380e <HAL_ADC_IRQHandler+0xee>
 8003806:	4b63      	ldr	r3, [pc, #396]	@ (8003994 <HAL_ADC_IRQHandler+0x274>)
 8003808:	e001      	b.n	800380e <HAL_ADC_IRQHandler+0xee>
 800380a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	4293      	cmp	r3, r2
 8003814:	d008      	beq.n	8003828 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2b05      	cmp	r3, #5
 8003820:	d002      	beq.n	8003828 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b09      	cmp	r3, #9
 8003826:	d104      	bne.n	8003832 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	623b      	str	r3, [r7, #32]
 8003830:	e014      	b.n	800385c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a53      	ldr	r2, [pc, #332]	@ (8003984 <HAL_ADC_IRQHandler+0x264>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d009      	beq.n	8003850 <HAL_ADC_IRQHandler+0x130>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a53      	ldr	r2, [pc, #332]	@ (8003990 <HAL_ADC_IRQHandler+0x270>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d002      	beq.n	800384c <HAL_ADC_IRQHandler+0x12c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	e003      	b.n	8003854 <HAL_ADC_IRQHandler+0x134>
 800384c:	4b51      	ldr	r3, [pc, #324]	@ (8003994 <HAL_ADC_IRQHandler+0x274>)
 800384e:	e001      	b.n	8003854 <HAL_ADC_IRQHandler+0x134>
 8003850:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003854:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d135      	bne.n	80038d2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b08      	cmp	r3, #8
 8003872:	d12e      	bne.n	80038d2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fd6e 	bl	800335a <LL_ADC_REG_IsConversionOngoing>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d11a      	bne.n	80038ba <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 020c 	bic.w	r2, r2, #12
 8003892:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003898:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d112      	bne.n	80038d2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b0:	f043 0201 	orr.w	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038b8:	e00b      	b.n	80038d2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038be:	f043 0210 	orr.w	r2, r3, #16
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ca:	f043 0201 	orr.w	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fe f968 	bl	8001ba8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	220c      	movs	r2, #12
 80038de:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d004      	beq.n	80038f4 <HAL_ADC_IRQHandler+0x1d4>
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10b      	bne.n	800390c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80b3 	beq.w	8003a66 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80ad 	beq.w	8003a66 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fc22 	bl	8003172 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800392e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fbdd 	bl	80030f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800393a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a10      	ldr	r2, [pc, #64]	@ (8003984 <HAL_ADC_IRQHandler+0x264>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d009      	beq.n	800395a <HAL_ADC_IRQHandler+0x23a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a11      	ldr	r2, [pc, #68]	@ (8003990 <HAL_ADC_IRQHandler+0x270>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d002      	beq.n	8003956 <HAL_ADC_IRQHandler+0x236>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	e003      	b.n	800395e <HAL_ADC_IRQHandler+0x23e>
 8003956:	4b0f      	ldr	r3, [pc, #60]	@ (8003994 <HAL_ADC_IRQHandler+0x274>)
 8003958:	e001      	b.n	800395e <HAL_ADC_IRQHandler+0x23e>
 800395a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	4293      	cmp	r3, r2
 8003964:	d008      	beq.n	8003978 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b06      	cmp	r3, #6
 8003970:	d002      	beq.n	8003978 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b07      	cmp	r3, #7
 8003976:	d10f      	bne.n	8003998 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	e01f      	b.n	80039c2 <HAL_ADC_IRQHandler+0x2a2>
 8003982:	bf00      	nop
 8003984:	50000100 	.word	0x50000100
 8003988:	50000300 	.word	0x50000300
 800398c:	50000700 	.word	0x50000700
 8003990:	50000500 	.word	0x50000500
 8003994:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a8b      	ldr	r2, [pc, #556]	@ (8003bcc <HAL_ADC_IRQHandler+0x4ac>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d009      	beq.n	80039b6 <HAL_ADC_IRQHandler+0x296>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a8a      	ldr	r2, [pc, #552]	@ (8003bd0 <HAL_ADC_IRQHandler+0x4b0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d002      	beq.n	80039b2 <HAL_ADC_IRQHandler+0x292>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	e003      	b.n	80039ba <HAL_ADC_IRQHandler+0x29a>
 80039b2:	4b88      	ldr	r3, [pc, #544]	@ (8003bd4 <HAL_ADC_IRQHandler+0x4b4>)
 80039b4:	e001      	b.n	80039ba <HAL_ADC_IRQHandler+0x29a>
 80039b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039ba:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d047      	beq.n	8003a58 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_ADC_IRQHandler+0x2c2>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d03f      	beq.n	8003a58 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d13a      	bne.n	8003a58 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ec:	2b40      	cmp	r3, #64	@ 0x40
 80039ee:	d133      	bne.n	8003a58 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d12e      	bne.n	8003a58 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fcbe 	bl	8003380 <LL_ADC_INJ_IsConversionOngoing>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11a      	bne.n	8003a40 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a18:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d112      	bne.n	8003a58 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a36:	f043 0201 	orr.w	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a3e:	e00b      	b.n	8003a58 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a44:	f043 0210 	orr.w	r2, r3, #16
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a50:	f043 0201 	orr.w	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 ff55 	bl	8004908 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2260      	movs	r2, #96	@ 0x60
 8003a64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d011      	beq.n	8003a94 <HAL_ADC_IRQHandler+0x374>
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00c      	beq.n	8003a94 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8aa 	bl	8003be0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2280      	movs	r2, #128	@ 0x80
 8003a92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d012      	beq.n	8003ac4 <HAL_ADC_IRQHandler+0x3a4>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00d      	beq.n	8003ac4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 ff3b 	bl	8004930 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ac2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d012      	beq.n	8003af4 <HAL_ADC_IRQHandler+0x3d4>
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00d      	beq.n	8003af4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003adc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 ff2d 	bl	8004944 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003af2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d043      	beq.n	8003b86 <HAL_ADC_IRQHandler+0x466>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d03e      	beq.n	8003b86 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d102      	bne.n	8003b16 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003b10:	2301      	movs	r3, #1
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b14:	e021      	b.n	8003b5a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d015      	beq.n	8003b48 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b24:	d004      	beq.n	8003b30 <HAL_ADC_IRQHandler+0x410>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a28      	ldr	r2, [pc, #160]	@ (8003bcc <HAL_ADC_IRQHandler+0x4ac>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <HAL_ADC_IRQHandler+0x414>
 8003b30:	4b29      	ldr	r3, [pc, #164]	@ (8003bd8 <HAL_ADC_IRQHandler+0x4b8>)
 8003b32:	e000      	b.n	8003b36 <HAL_ADC_IRQHandler+0x416>
 8003b34:	4b29      	ldr	r3, [pc, #164]	@ (8003bdc <HAL_ADC_IRQHandler+0x4bc>)
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fb8c 	bl	8003254 <LL_ADC_GetMultiDMATransfer>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003b42:	2301      	movs	r3, #1
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b46:	e008      	b.n	8003b5a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003b56:	2301      	movs	r3, #1
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d10e      	bne.n	8003b7e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b64:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b70:	f043 0202 	orr.w	r2, r3, #2
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f83b 	bl	8003bf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2210      	movs	r2, #16
 8003b84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d018      	beq.n	8003bc2 <HAL_ADC_IRQHandler+0x4a2>
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d013      	beq.n	8003bc2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003baa:	f043 0208 	orr.w	r2, r3, #8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bba:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fead 	bl	800491c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003bc2:	bf00      	nop
 8003bc4:	3728      	adds	r7, #40	@ 0x28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	50000100 	.word	0x50000100
 8003bd0:	50000500 	.word	0x50000500
 8003bd4:	50000400 	.word	0x50000400
 8003bd8:	50000300 	.word	0x50000300
 8003bdc:	50000700 	.word	0x50000700

08003be0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b0b6      	sub	sp, #216	@ 0xd8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d102      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x24>
 8003c26:	2302      	movs	r3, #2
 8003c28:	f000 bc13 	b.w	8004452 <HAL_ADC_ConfigChannel+0x84a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff fb8e 	bl	800335a <LL_ADC_REG_IsConversionOngoing>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f040 83f3 	bne.w	800442c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6859      	ldr	r1, [r3, #4]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	f7ff fa61 	bl	800311a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fb7c 	bl	800335a <LL_ADC_REG_IsConversionOngoing>
 8003c62:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fb88 	bl	8003380 <LL_ADC_INJ_IsConversionOngoing>
 8003c70:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f040 81d9 	bne.w	8004030 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f040 81d4 	bne.w	8004030 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c90:	d10f      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f7ff fa7b 	bl	8003198 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fa0f 	bl	80030ce <LL_ADC_SetSamplingTimeCommonConfig>
 8003cb0:	e00e      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6819      	ldr	r1, [r3, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f7ff fa6a 	bl	8003198 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff f9ff 	bl	80030ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	08db      	lsrs	r3, r3, #3
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d022      	beq.n	8003d38 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6919      	ldr	r1, [r3, #16]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d02:	f7ff f959 	bl	8002fb8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6919      	ldr	r1, [r3, #16]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	461a      	mov	r2, r3
 8003d14:	f7ff f9a5 	bl	8003062 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d102      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x126>
 8003d28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d2c:	e000      	b.n	8003d30 <HAL_ADC_ConfigChannel+0x128>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	461a      	mov	r2, r3
 8003d32:	f7ff f9b1 	bl	8003098 <LL_ADC_SetOffsetSaturation>
 8003d36:	e17b      	b.n	8004030 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff f95e 	bl	8003000 <LL_ADC_GetOffsetChannel>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10a      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x15c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2100      	movs	r1, #0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff f953 	bl	8003000 <LL_ADC_GetOffsetChannel>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	0e9b      	lsrs	r3, r3, #26
 8003d5e:	f003 021f 	and.w	r2, r3, #31
 8003d62:	e01e      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x19a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff f948 	bl	8003000 <LL_ADC_GetOffsetChannel>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d7a:	fa93 f3a3 	rbit	r3, r3
 8003d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003d92:	2320      	movs	r3, #32
 8003d94:	e004      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003d96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d9a:	fab3 f383 	clz	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d105      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x1b2>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	0e9b      	lsrs	r3, r3, #26
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	e018      	b.n	8003dec <HAL_ADC_ConfigChannel+0x1e4>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003dd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003dde:	2320      	movs	r3, #32
 8003de0:	e004      	b.n	8003dec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003de2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d106      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2200      	movs	r2, #0
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff f917 	bl	800302c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2101      	movs	r1, #1
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff f8fb 	bl	8003000 <LL_ADC_GetOffsetChannel>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <HAL_ADC_ConfigChannel+0x222>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2101      	movs	r1, #1
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff f8f0 	bl	8003000 <LL_ADC_GetOffsetChannel>
 8003e20:	4603      	mov	r3, r0
 8003e22:	0e9b      	lsrs	r3, r3, #26
 8003e24:	f003 021f 	and.w	r2, r3, #31
 8003e28:	e01e      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x260>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff f8e5 	bl	8003000 <LL_ADC_GetOffsetChannel>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003e48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003e50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003e58:	2320      	movs	r3, #32
 8003e5a:	e004      	b.n	8003e66 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003e5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e60:	fab3 f383 	clz	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d105      	bne.n	8003e80 <HAL_ADC_ConfigChannel+0x278>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	0e9b      	lsrs	r3, r3, #26
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	e018      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x2aa>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e8c:	fa93 f3a3 	rbit	r3, r3
 8003e90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003e94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003ea4:	2320      	movs	r3, #32
 8003ea6:	e004      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003eac:	fab3 f383 	clz	r3, r3
 8003eb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d106      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff f8b4 	bl	800302c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2102      	movs	r1, #2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff f898 	bl	8003000 <LL_ADC_GetOffsetChannel>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x2e8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2102      	movs	r1, #2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff f88d 	bl	8003000 <LL_ADC_GetOffsetChannel>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	0e9b      	lsrs	r3, r3, #26
 8003eea:	f003 021f 	and.w	r2, r3, #31
 8003eee:	e01e      	b.n	8003f2e <HAL_ADC_ConfigChannel+0x326>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff f882 	bl	8003000 <LL_ADC_GetOffsetChannel>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003f0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003f16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003f1e:	2320      	movs	r3, #32
 8003f20:	e004      	b.n	8003f2c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003f22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f26:	fab3 f383 	clz	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <HAL_ADC_ConfigChannel+0x33e>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	0e9b      	lsrs	r3, r3, #26
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	e016      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x36c>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003f58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003f66:	2320      	movs	r3, #32
 8003f68:	e004      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f6e:	fab3 f383 	clz	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d106      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2102      	movs	r1, #2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff f853 	bl	800302c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2103      	movs	r1, #3
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff f837 	bl	8003000 <LL_ADC_GetOffsetChannel>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x3aa>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2103      	movs	r1, #3
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff f82c 	bl	8003000 <LL_ADC_GetOffsetChannel>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	0e9b      	lsrs	r3, r3, #26
 8003fac:	f003 021f 	and.w	r2, r3, #31
 8003fb0:	e017      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0x3da>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2103      	movs	r1, #3
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff f821 	bl	8003000 <LL_ADC_GetOffsetChannel>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fc4:	fa93 f3a3 	rbit	r3, r3
 8003fc8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003fca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fcc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003fce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003fd4:	2320      	movs	r3, #32
 8003fd6:	e003      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003fd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d105      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x3f2>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	0e9b      	lsrs	r3, r3, #26
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	e011      	b.n	800401e <HAL_ADC_ConfigChannel+0x416>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800400a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800400c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004012:	2320      	movs	r3, #32
 8004014:	e003      	b.n	800401e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004018:	fab3 f383 	clz	r3, r3
 800401c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800401e:	429a      	cmp	r2, r3
 8004020:	d106      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2200      	movs	r2, #0
 8004028:	2103      	movs	r1, #3
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe fffe 	bl	800302c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff f97d 	bl	8003334 <LL_ADC_IsEnabled>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	f040 813d 	bne.w	80042bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6819      	ldr	r1, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	461a      	mov	r2, r3
 8004050:	f7ff f8ce 	bl	80031f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4aa2      	ldr	r2, [pc, #648]	@ (80042e4 <HAL_ADC_ConfigChannel+0x6dc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	f040 812e 	bne.w	80042bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x480>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0e9b      	lsrs	r3, r3, #26
 8004076:	3301      	adds	r3, #1
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	2b09      	cmp	r3, #9
 800407e:	bf94      	ite	ls
 8004080:	2301      	movls	r3, #1
 8004082:	2300      	movhi	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e019      	b.n	80040bc <HAL_ADC_ConfigChannel+0x4b4>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004098:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800409a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80040a0:	2320      	movs	r3, #32
 80040a2:	e003      	b.n	80040ac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80040a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	3301      	adds	r3, #1
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	2b09      	cmp	r3, #9
 80040b4:	bf94      	ite	ls
 80040b6:	2301      	movls	r3, #1
 80040b8:	2300      	movhi	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d079      	beq.n	80041b4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d107      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x4d4>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	0e9b      	lsrs	r3, r3, #26
 80040d2:	3301      	adds	r3, #1
 80040d4:	069b      	lsls	r3, r3, #26
 80040d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040da:	e015      	b.n	8004108 <HAL_ADC_ConfigChannel+0x500>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80040ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80040ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80040f4:	2320      	movs	r3, #32
 80040f6:	e003      	b.n	8004100 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80040f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	3301      	adds	r3, #1
 8004102:	069b      	lsls	r3, r3, #26
 8004104:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004110:	2b00      	cmp	r3, #0
 8004112:	d109      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x520>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	0e9b      	lsrs	r3, r3, #26
 800411a:	3301      	adds	r3, #1
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	2101      	movs	r1, #1
 8004122:	fa01 f303 	lsl.w	r3, r1, r3
 8004126:	e017      	b.n	8004158 <HAL_ADC_ConfigChannel+0x550>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004130:	fa93 f3a3 	rbit	r3, r3
 8004134:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004138:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800413a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004140:	2320      	movs	r3, #32
 8004142:	e003      	b.n	800414c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	3301      	adds	r3, #1
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	2101      	movs	r1, #1
 8004154:	fa01 f303 	lsl.w	r3, r1, r3
 8004158:	ea42 0103 	orr.w	r1, r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <HAL_ADC_ConfigChannel+0x576>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	0e9b      	lsrs	r3, r3, #26
 800416e:	3301      	adds	r3, #1
 8004170:	f003 021f 	and.w	r2, r3, #31
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	051b      	lsls	r3, r3, #20
 800417c:	e018      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x5a8>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004186:	fa93 f3a3 	rbit	r3, r3
 800418a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800418c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800418e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004196:	2320      	movs	r3, #32
 8004198:	e003      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800419a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800419c:	fab3 f383 	clz	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	3301      	adds	r3, #1
 80041a4:	f003 021f 	and.w	r2, r3, #31
 80041a8:	4613      	mov	r3, r2
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	4413      	add	r3, r2
 80041ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041b0:	430b      	orrs	r3, r1
 80041b2:	e07e      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d107      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x5c8>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	0e9b      	lsrs	r3, r3, #26
 80041c6:	3301      	adds	r3, #1
 80041c8:	069b      	lsls	r3, r3, #26
 80041ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041ce:	e015      	b.n	80041fc <HAL_ADC_ConfigChannel+0x5f4>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d8:	fa93 f3a3 	rbit	r3, r3
 80041dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80041de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80041e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80041e8:	2320      	movs	r3, #32
 80041ea:	e003      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80041ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ee:	fab3 f383 	clz	r3, r3
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	3301      	adds	r3, #1
 80041f6:	069b      	lsls	r3, r3, #26
 80041f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <HAL_ADC_ConfigChannel+0x614>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	0e9b      	lsrs	r3, r3, #26
 800420e:	3301      	adds	r3, #1
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	2101      	movs	r1, #1
 8004216:	fa01 f303 	lsl.w	r3, r1, r3
 800421a:	e017      	b.n	800424c <HAL_ADC_ConfigChannel+0x644>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	fa93 f3a3 	rbit	r3, r3
 8004228:	61fb      	str	r3, [r7, #28]
  return result;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004234:	2320      	movs	r3, #32
 8004236:	e003      	b.n	8004240 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	b2db      	uxtb	r3, r3
 8004240:	3301      	adds	r3, #1
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	2101      	movs	r1, #1
 8004248:	fa01 f303 	lsl.w	r3, r1, r3
 800424c:	ea42 0103 	orr.w	r1, r2, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10d      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x670>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	0e9b      	lsrs	r3, r3, #26
 8004262:	3301      	adds	r3, #1
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	3b1e      	subs	r3, #30
 8004270:	051b      	lsls	r3, r3, #20
 8004272:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004276:	e01b      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x6a8>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	fa93 f3a3 	rbit	r3, r3
 8004284:	613b      	str	r3, [r7, #16]
  return result;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004290:	2320      	movs	r3, #32
 8004292:	e003      	b.n	800429c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	fab3 f383 	clz	r3, r3
 800429a:	b2db      	uxtb	r3, r3
 800429c:	3301      	adds	r3, #1
 800429e:	f003 021f 	and.w	r2, r3, #31
 80042a2:	4613      	mov	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	3b1e      	subs	r3, #30
 80042aa:	051b      	lsls	r3, r3, #20
 80042ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b6:	4619      	mov	r1, r3
 80042b8:	f7fe ff6e 	bl	8003198 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b09      	ldr	r3, [pc, #36]	@ (80042e8 <HAL_ADC_ConfigChannel+0x6e0>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80be 	beq.w	8004446 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042d2:	d004      	beq.n	80042de <HAL_ADC_ConfigChannel+0x6d6>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a04      	ldr	r2, [pc, #16]	@ (80042ec <HAL_ADC_ConfigChannel+0x6e4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10a      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x6ec>
 80042de:	4b04      	ldr	r3, [pc, #16]	@ (80042f0 <HAL_ADC_ConfigChannel+0x6e8>)
 80042e0:	e009      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x6ee>
 80042e2:	bf00      	nop
 80042e4:	407f0000 	.word	0x407f0000
 80042e8:	80080000 	.word	0x80080000
 80042ec:	50000100 	.word	0x50000100
 80042f0:	50000300 	.word	0x50000300
 80042f4:	4b59      	ldr	r3, [pc, #356]	@ (800445c <HAL_ADC_ConfigChannel+0x854>)
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe fe50 	bl	8002f9c <LL_ADC_GetCommonPathInternalCh>
 80042fc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a56      	ldr	r2, [pc, #344]	@ (8004460 <HAL_ADC_ConfigChannel+0x858>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d004      	beq.n	8004314 <HAL_ADC_ConfigChannel+0x70c>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a55      	ldr	r2, [pc, #340]	@ (8004464 <HAL_ADC_ConfigChannel+0x85c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d13a      	bne.n	800438a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004318:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d134      	bne.n	800438a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004328:	d005      	beq.n	8004336 <HAL_ADC_ConfigChannel+0x72e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a4e      	ldr	r2, [pc, #312]	@ (8004468 <HAL_ADC_ConfigChannel+0x860>)
 8004330:	4293      	cmp	r3, r2
 8004332:	f040 8085 	bne.w	8004440 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800433e:	d004      	beq.n	800434a <HAL_ADC_ConfigChannel+0x742>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a49      	ldr	r2, [pc, #292]	@ (800446c <HAL_ADC_ConfigChannel+0x864>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d101      	bne.n	800434e <HAL_ADC_ConfigChannel+0x746>
 800434a:	4a49      	ldr	r2, [pc, #292]	@ (8004470 <HAL_ADC_ConfigChannel+0x868>)
 800434c:	e000      	b.n	8004350 <HAL_ADC_ConfigChannel+0x748>
 800434e:	4a43      	ldr	r2, [pc, #268]	@ (800445c <HAL_ADC_ConfigChannel+0x854>)
 8004350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004354:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f7fe fe0b 	bl	8002f76 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004360:	4b44      	ldr	r3, [pc, #272]	@ (8004474 <HAL_ADC_ConfigChannel+0x86c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	099b      	lsrs	r3, r3, #6
 8004366:	4a44      	ldr	r2, [pc, #272]	@ (8004478 <HAL_ADC_ConfigChannel+0x870>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	099b      	lsrs	r3, r3, #6
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	4613      	mov	r3, r2
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800437a:	e002      	b.n	8004382 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3b01      	subs	r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f9      	bne.n	800437c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004388:	e05a      	b.n	8004440 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a3b      	ldr	r2, [pc, #236]	@ (800447c <HAL_ADC_ConfigChannel+0x874>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d125      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004398:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11f      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a31      	ldr	r2, [pc, #196]	@ (800446c <HAL_ADC_ConfigChannel+0x864>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d104      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x7ac>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a34      	ldr	r2, [pc, #208]	@ (8004480 <HAL_ADC_ConfigChannel+0x878>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d047      	beq.n	8004444 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043bc:	d004      	beq.n	80043c8 <HAL_ADC_ConfigChannel+0x7c0>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a2a      	ldr	r2, [pc, #168]	@ (800446c <HAL_ADC_ConfigChannel+0x864>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d101      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x7c4>
 80043c8:	4a29      	ldr	r2, [pc, #164]	@ (8004470 <HAL_ADC_ConfigChannel+0x868>)
 80043ca:	e000      	b.n	80043ce <HAL_ADC_ConfigChannel+0x7c6>
 80043cc:	4a23      	ldr	r2, [pc, #140]	@ (800445c <HAL_ADC_ConfigChannel+0x854>)
 80043ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f7fe fdcc 	bl	8002f76 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043de:	e031      	b.n	8004444 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a27      	ldr	r2, [pc, #156]	@ (8004484 <HAL_ADC_ConfigChannel+0x87c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d12d      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d127      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1c      	ldr	r2, [pc, #112]	@ (800446c <HAL_ADC_ConfigChannel+0x864>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d022      	beq.n	8004446 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004408:	d004      	beq.n	8004414 <HAL_ADC_ConfigChannel+0x80c>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a17      	ldr	r2, [pc, #92]	@ (800446c <HAL_ADC_ConfigChannel+0x864>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d101      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x810>
 8004414:	4a16      	ldr	r2, [pc, #88]	@ (8004470 <HAL_ADC_ConfigChannel+0x868>)
 8004416:	e000      	b.n	800441a <HAL_ADC_ConfigChannel+0x812>
 8004418:	4a10      	ldr	r2, [pc, #64]	@ (800445c <HAL_ADC_ConfigChannel+0x854>)
 800441a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800441e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f7fe fda6 	bl	8002f76 <LL_ADC_SetCommonPathInternalCh>
 800442a:	e00c      	b.n	8004446 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800443e:	e002      	b.n	8004446 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004440:	bf00      	nop
 8004442:	e000      	b.n	8004446 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004444:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800444e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004452:	4618      	mov	r0, r3
 8004454:	37d8      	adds	r7, #216	@ 0xd8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	50000700 	.word	0x50000700
 8004460:	c3210000 	.word	0xc3210000
 8004464:	90c00010 	.word	0x90c00010
 8004468:	50000600 	.word	0x50000600
 800446c:	50000100 	.word	0x50000100
 8004470:	50000300 	.word	0x50000300
 8004474:	20000000 	.word	0x20000000
 8004478:	053e2d63 	.word	0x053e2d63
 800447c:	c7520000 	.word	0xc7520000
 8004480:	50000500 	.word	0x50000500
 8004484:	cb840000 	.word	0xcb840000

08004488 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004490:	2300      	movs	r3, #0
 8004492:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f7fe ff4b 	bl	8003334 <LL_ADC_IsEnabled>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d176      	bne.n	8004592 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	4b3c      	ldr	r3, [pc, #240]	@ (800459c <ADC_Enable+0x114>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b6:	f043 0210 	orr.w	r2, r3, #16
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c2:	f043 0201 	orr.w	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e062      	b.n	8004594 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe ff1a 	bl	800330c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044e0:	d004      	beq.n	80044ec <ADC_Enable+0x64>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a2e      	ldr	r2, [pc, #184]	@ (80045a0 <ADC_Enable+0x118>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <ADC_Enable+0x68>
 80044ec:	4b2d      	ldr	r3, [pc, #180]	@ (80045a4 <ADC_Enable+0x11c>)
 80044ee:	e000      	b.n	80044f2 <ADC_Enable+0x6a>
 80044f0:	4b2d      	ldr	r3, [pc, #180]	@ (80045a8 <ADC_Enable+0x120>)
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fd52 	bl	8002f9c <LL_ADC_GetCommonPathInternalCh>
 80044f8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80044fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d013      	beq.n	800452a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004502:	4b2a      	ldr	r3, [pc, #168]	@ (80045ac <ADC_Enable+0x124>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	4a29      	ldr	r2, [pc, #164]	@ (80045b0 <ADC_Enable+0x128>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	099b      	lsrs	r3, r3, #6
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	4613      	mov	r3, r2
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800451c:	e002      	b.n	8004524 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	3b01      	subs	r3, #1
 8004522:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f9      	bne.n	800451e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800452a:	f7fe fce3 	bl	8002ef4 <HAL_GetTick>
 800452e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004530:	e028      	b.n	8004584 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fefc 	bl	8003334 <LL_ADC_IsEnabled>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d104      	bne.n	800454c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe fee0 	bl	800330c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800454c:	f7fe fcd2 	bl	8002ef4 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d914      	bls.n	8004584 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b01      	cmp	r3, #1
 8004566:	d00d      	beq.n	8004584 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800456c:	f043 0210 	orr.w	r2, r3, #16
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004578:	f043 0201 	orr.w	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e007      	b.n	8004594 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d1cf      	bne.n	8004532 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	8000003f 	.word	0x8000003f
 80045a0:	50000100 	.word	0x50000100
 80045a4:	50000300 	.word	0x50000300
 80045a8:	50000700 	.word	0x50000700
 80045ac:	20000000 	.word	0x20000000
 80045b0:	053e2d63 	.word	0x053e2d63

080045b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d14b      	bne.n	8004666 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d021      	beq.n	800462c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fe fd81 	bl	80030f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d032      	beq.n	800465e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d12b      	bne.n	800465e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004616:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d11f      	bne.n	800465e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004622:	f043 0201 	orr.w	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	65da      	str	r2, [r3, #92]	@ 0x5c
 800462a:	e018      	b.n	800465e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d111      	bne.n	800465e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800464a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d105      	bne.n	800465e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004656:	f043 0201 	orr.w	r2, r3, #1
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f7fd faa2 	bl	8001ba8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004664:	e00e      	b.n	8004684 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7ff fabe 	bl	8003bf4 <HAL_ADC_ErrorCallback>
}
 8004678:	e004      	b.n	8004684 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	4798      	blx	r3
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7fd fa5a 	bl	8001b54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c6:	f043 0204 	orr.w	r2, r3, #4
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7ff fa90 	bl	8003bf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <LL_ADC_IsEnabled>:
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <LL_ADC_IsEnabled+0x18>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <LL_ADC_IsEnabled+0x1a>
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <LL_ADC_REG_StartConversion>:
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004712:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004716:	f043 0204 	orr.w	r2, r3, #4
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	609a      	str	r2, [r3, #8]
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <LL_ADC_REG_IsConversionOngoing>:
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b04      	cmp	r3, #4
 800473c:	d101      	bne.n	8004742 <LL_ADC_REG_IsConversionOngoing+0x18>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b0a2      	sub	sp, #136	@ 0x88
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff ffe2 	bl	800472a <LL_ADC_REG_IsConversionOngoing>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
 800476e:	e096      	b.n	800489e <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800477a:	2302      	movs	r3, #2
 800477c:	e08f      	b.n	800489e <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004786:	2300      	movs	r3, #0
 8004788:	673b      	str	r3, [r7, #112]	@ 0x70
    ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800478a:	2300      	movs	r3, #0
 800478c:	677b      	str	r3, [r7, #116]	@ 0x74

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004796:	d102      	bne.n	800479e <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8004798:	4b43      	ldr	r3, [pc, #268]	@ (80048a8 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	e009      	b.n	80047b2 <HAL_ADCEx_MultiModeStart_DMA+0x62>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a42      	ldr	r2, [pc, #264]	@ (80048ac <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d102      	bne.n	80047ae <HAL_ADCEx_MultiModeStart_DMA+0x5e>
 80047a8:	4b41      	ldr	r3, [pc, #260]	@ (80048b0 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e001      	b.n	80047b2 <HAL_ADCEx_MultiModeStart_DMA+0x62>
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]

    if (tmp_hadc_slave.Instance == NULL)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <HAL_ADCEx_MultiModeStart_DMA+0x80>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047bc:	f043 0220 	orr.w	r2, r3, #32
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e066      	b.n	800489e <HAL_ADCEx_MultiModeStart_DMA+0x14e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff fe59 	bl	8004488 <ADC_Enable>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (tmp_hal_status == HAL_OK)
 80047dc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d107      	bne.n	80047f4 <HAL_ADCEx_MultiModeStart_DMA+0xa4>
    {
      tmp_hal_status = ADC_Enable(&tmp_hadc_slave);
 80047e4:	f107 0314 	add.w	r3, r7, #20
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff fe4d 	bl	8004488 <ADC_Enable>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80047f4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d14a      	bne.n	8004892 <HAL_ADCEx_MultiModeStart_DMA+0x142>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004800:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	65da      	str	r2, [r3, #92]	@ 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481a:	4a26      	ldr	r2, [pc, #152]	@ (80048b4 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 800481c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004822:	4a25      	ldr	r2, [pc, #148]	@ (80048b8 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8004824:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482a:	4a24      	ldr	r2, [pc, #144]	@ (80048bc <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 800482c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004836:	d004      	beq.n	8004842 <HAL_ADCEx_MultiModeStart_DMA+0xf2>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1a      	ldr	r2, [pc, #104]	@ (80048a8 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d101      	bne.n	8004846 <HAL_ADCEx_MultiModeStart_DMA+0xf6>
 8004842:	4b1f      	ldr	r3, [pc, #124]	@ (80048c0 <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 8004844:	e000      	b.n	8004848 <HAL_ADCEx_MultiModeStart_DMA+0xf8>
 8004846:	4b1f      	ldr	r3, [pc, #124]	@ (80048c4 <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 8004848:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	221c      	movs	r2, #28
 8004852:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0210 	orr.w	r2, r2, #16
 800486a:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004870:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004874:	330c      	adds	r3, #12
 8004876:	4619      	mov	r1, r3
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f000 fd12 	bl	80052a4 <HAL_DMA_Start_IT>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff ff39 	bl	8004702 <LL_ADC_REG_StartConversion>
 8004890:	e003      	b.n	800489a <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800489a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3788      	adds	r7, #136	@ 0x88
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	50000100 	.word	0x50000100
 80048ac:	50000400 	.word	0x50000400
 80048b0:	50000500 	.word	0x50000500
 80048b4:	080045b5 	.word	0x080045b5
 80048b8:	0800468d 	.word	0x0800468d
 80048bc:	080046a9 	.word	0x080046a9
 80048c0:	50000300 	.word	0x50000300
 80048c4:	50000700 	.word	0x50000700

080048c8 <HAL_ADCEx_MultiModeGetValue>:
  * @brief  Return the last ADC Master and Slave regular conversions results when in multimode configuration.
  * @param hadc ADC handle of ADC Master (handle of ADC Slave must not be used)
  * @retval The converted data values.
  */
uint32_t HAL_ADCEx_MultiModeGetValue(const ADC_HandleTypeDef *hadc)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning if no assert_param check */
  /* and possible no usage in __LL_ADC_COMMON_INSTANCE() below               */
  UNUSED(hadc);

  /* Pointer to the common control register  */
  tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048d8:	d004      	beq.n	80048e4 <HAL_ADCEx_MultiModeGetValue+0x1c>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a07      	ldr	r2, [pc, #28]	@ (80048fc <HAL_ADCEx_MultiModeGetValue+0x34>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d101      	bne.n	80048e8 <HAL_ADCEx_MultiModeGetValue+0x20>
 80048e4:	4b06      	ldr	r3, [pc, #24]	@ (8004900 <HAL_ADCEx_MultiModeGetValue+0x38>)
 80048e6:	e000      	b.n	80048ea <HAL_ADCEx_MultiModeGetValue+0x22>
 80048e8:	4b06      	ldr	r3, [pc, #24]	@ (8004904 <HAL_ADCEx_MultiModeGetValue+0x3c>)
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Return the multi mode conversion value */
  return tmpADC_Common->CDR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68db      	ldr	r3, [r3, #12]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	50000100 	.word	0x50000100
 8004900:	50000300 	.word	0x50000300
 8004904:	50000700 	.word	0x50000700

08004908 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b0a1      	sub	sp, #132	@ 0x84
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004986:	2302      	movs	r3, #2
 8004988:	e0e7      	b.n	8004b5a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004992:	2300      	movs	r3, #0
 8004994:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004996:	2300      	movs	r3, #0
 8004998:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049a2:	d102      	bne.n	80049aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	e009      	b.n	80049be <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a6e      	ldr	r2, [pc, #440]	@ (8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d102      	bne.n	80049ba <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80049b4:	4b6d      	ldr	r3, [pc, #436]	@ (8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	e001      	b.n	80049be <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049ba:	2300      	movs	r3, #0
 80049bc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c8:	f043 0220 	orr.w	r2, r3, #32
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0be      	b.n	8004b5a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff fea3 	bl	800472a <LL_ADC_REG_IsConversionOngoing>
 80049e4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fe9d 	bl	800472a <LL_ADC_REG_IsConversionOngoing>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f040 80a0 	bne.w	8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80049f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f040 809c 	bne.w	8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a08:	d004      	beq.n	8004a14 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a55      	ldr	r2, [pc, #340]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d101      	bne.n	8004a18 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004a14:	4b56      	ldr	r3, [pc, #344]	@ (8004b70 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004a16:	e000      	b.n	8004a1a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004a18:	4b56      	ldr	r3, [pc, #344]	@ (8004b74 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004a1a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d04b      	beq.n	8004abc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004a24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a36:	035b      	lsls	r3, r3, #13
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a3e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a48:	d004      	beq.n	8004a54 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a45      	ldr	r2, [pc, #276]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d10f      	bne.n	8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004a54:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004a58:	f7ff fe40 	bl	80046dc <LL_ADC_IsEnabled>
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	4841      	ldr	r0, [pc, #260]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a60:	f7ff fe3c 	bl	80046dc <LL_ADC_IsEnabled>
 8004a64:	4603      	mov	r3, r0
 8004a66:	4323      	orrs	r3, r4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2301      	moveq	r3, #1
 8004a6e:	2300      	movne	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	e012      	b.n	8004a9a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004a74:	483c      	ldr	r0, [pc, #240]	@ (8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a76:	f7ff fe31 	bl	80046dc <LL_ADC_IsEnabled>
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	483b      	ldr	r0, [pc, #236]	@ (8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004a7e:	f7ff fe2d 	bl	80046dc <LL_ADC_IsEnabled>
 8004a82:	4603      	mov	r3, r0
 8004a84:	431c      	orrs	r4, r3
 8004a86:	483c      	ldr	r0, [pc, #240]	@ (8004b78 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004a88:	f7ff fe28 	bl	80046dc <LL_ADC_IsEnabled>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	4323      	orrs	r3, r4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bf0c      	ite	eq
 8004a94:	2301      	moveq	r3, #1
 8004a96:	2300      	movne	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d056      	beq.n	8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004aa6:	f023 030f 	bic.w	r3, r3, #15
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	6811      	ldr	r1, [r2, #0]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	6892      	ldr	r2, [r2, #8]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ab8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004aba:	e047      	b.n	8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004abc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ac4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ac6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ad0:	d004      	beq.n	8004adc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a23      	ldr	r2, [pc, #140]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d10f      	bne.n	8004afc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004adc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ae0:	f7ff fdfc 	bl	80046dc <LL_ADC_IsEnabled>
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	481f      	ldr	r0, [pc, #124]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ae8:	f7ff fdf8 	bl	80046dc <LL_ADC_IsEnabled>
 8004aec:	4603      	mov	r3, r0
 8004aee:	4323      	orrs	r3, r4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	e012      	b.n	8004b22 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004afc:	481a      	ldr	r0, [pc, #104]	@ (8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004afe:	f7ff fded 	bl	80046dc <LL_ADC_IsEnabled>
 8004b02:	4604      	mov	r4, r0
 8004b04:	4819      	ldr	r0, [pc, #100]	@ (8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b06:	f7ff fde9 	bl	80046dc <LL_ADC_IsEnabled>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	431c      	orrs	r4, r3
 8004b0e:	481a      	ldr	r0, [pc, #104]	@ (8004b78 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004b10:	f7ff fde4 	bl	80046dc <LL_ADC_IsEnabled>
 8004b14:	4603      	mov	r3, r0
 8004b16:	4323      	orrs	r3, r4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d012      	beq.n	8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004b2e:	f023 030f 	bic.w	r3, r3, #15
 8004b32:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004b34:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b36:	e009      	b.n	8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3c:	f043 0220 	orr.w	r2, r3, #32
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004b4a:	e000      	b.n	8004b4e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b56:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3784      	adds	r7, #132	@ 0x84
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd90      	pop	{r4, r7, pc}
 8004b62:	bf00      	nop
 8004b64:	50000100 	.word	0x50000100
 8004b68:	50000400 	.word	0x50000400
 8004b6c:	50000500 	.word	0x50000500
 8004b70:	50000300 	.word	0x50000300
 8004b74:	50000700 	.word	0x50000700
 8004b78:	50000600 	.word	0x50000600

08004b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b98:	4013      	ands	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bae:	4a04      	ldr	r2, [pc, #16]	@ (8004bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	60d3      	str	r3, [r2, #12]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	e000ed00 	.word	0xe000ed00

08004bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bc8:	4b04      	ldr	r3, [pc, #16]	@ (8004bdc <__NVIC_GetPriorityGrouping+0x18>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	f003 0307 	and.w	r3, r3, #7
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	db0b      	blt.n	8004c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	f003 021f 	and.w	r2, r3, #31
 8004bf8:	4907      	ldr	r1, [pc, #28]	@ (8004c18 <__NVIC_EnableIRQ+0x38>)
 8004bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	2001      	movs	r0, #1
 8004c02:	fa00 f202 	lsl.w	r2, r0, r2
 8004c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	e000e100 	.word	0xe000e100

08004c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	6039      	str	r1, [r7, #0]
 8004c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	db0a      	blt.n	8004c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	490c      	ldr	r1, [pc, #48]	@ (8004c68 <__NVIC_SetPriority+0x4c>)
 8004c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3a:	0112      	lsls	r2, r2, #4
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	440b      	add	r3, r1
 8004c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c44:	e00a      	b.n	8004c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	4908      	ldr	r1, [pc, #32]	@ (8004c6c <__NVIC_SetPriority+0x50>)
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	3b04      	subs	r3, #4
 8004c54:	0112      	lsls	r2, r2, #4
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	440b      	add	r3, r1
 8004c5a:	761a      	strb	r2, [r3, #24]
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	e000e100 	.word	0xe000e100
 8004c6c:	e000ed00 	.word	0xe000ed00

08004c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b089      	sub	sp, #36	@ 0x24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f1c3 0307 	rsb	r3, r3, #7
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	bf28      	it	cs
 8004c8e:	2304      	movcs	r3, #4
 8004c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	3304      	adds	r3, #4
 8004c96:	2b06      	cmp	r3, #6
 8004c98:	d902      	bls.n	8004ca0 <NVIC_EncodePriority+0x30>
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	3b03      	subs	r3, #3
 8004c9e:	e000      	b.n	8004ca2 <NVIC_EncodePriority+0x32>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc2:	43d9      	mvns	r1, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc8:	4313      	orrs	r3, r2
         );
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3724      	adds	r7, #36	@ 0x24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ce8:	d301      	bcc.n	8004cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cea:	2301      	movs	r3, #1
 8004cec:	e00f      	b.n	8004d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cee:	4a0a      	ldr	r2, [pc, #40]	@ (8004d18 <SysTick_Config+0x40>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cf6:	210f      	movs	r1, #15
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfc:	f7ff ff8e 	bl	8004c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d00:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <SysTick_Config+0x40>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d06:	4b04      	ldr	r3, [pc, #16]	@ (8004d18 <SysTick_Config+0x40>)
 8004d08:	2207      	movs	r2, #7
 8004d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	e000e010 	.word	0xe000e010

08004d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff ff29 	bl	8004b7c <__NVIC_SetPriorityGrouping>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4603      	mov	r3, r0
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d40:	f7ff ff40 	bl	8004bc4 <__NVIC_GetPriorityGrouping>
 8004d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	6978      	ldr	r0, [r7, #20]
 8004d4c:	f7ff ff90 	bl	8004c70 <NVIC_EncodePriority>
 8004d50:	4602      	mov	r2, r0
 8004d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d56:	4611      	mov	r1, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff ff5f 	bl	8004c1c <__NVIC_SetPriority>
}
 8004d5e:	bf00      	nop
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff ff33 	bl	8004be0 <__NVIC_EnableIRQ>
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff ffa4 	bl	8004cd8 <SysTick_Config>
 8004d90:	4603      	mov	r3, r0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e014      	b.n	8004dd6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	791b      	ldrb	r3, [r3, #4]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d105      	bne.n	8004dc2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fd fa2d 	bl	800221c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	@ 0x28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_DAC_ConfigChannel+0x1c>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e1a1      	b.n	8005144 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	795b      	ldrb	r3, [r3, #5]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_DAC_ConfigChannel+0x32>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e198      	b.n	8005144 <HAL_DAC_ConfigChannel+0x364>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d17a      	bne.n	8004f1c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004e26:	f7fe f865 	bl	8002ef4 <HAL_GetTick>
 8004e2a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d13d      	bne.n	8004eae <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e32:	e018      	b.n	8004e66 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e34:	f7fe f85e 	bl	8002ef4 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d911      	bls.n	8004e66 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f043 0208 	orr.w	r2, r3, #8
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2203      	movs	r2, #3
 8004e60:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e16e      	b.n	8005144 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1df      	bne.n	8004e34 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e7e:	e020      	b.n	8004ec2 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e80:	f7fe f838 	bl	8002ef4 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d90f      	bls.n	8004eae <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	da0a      	bge.n	8004eae <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f043 0208 	orr.w	r2, r3, #8
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e14a      	b.n	8005144 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	dbe3      	blt.n	8004e80 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	ea02 0103 	and.w	r1, r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f003 0310 	and.w	r3, r3, #16
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	21ff      	movs	r1, #255	@ 0xff
 8004efe:	fa01 f303 	lsl.w	r3, r1, r3
 8004f02:	43db      	mvns	r3, r3
 8004f04:	ea02 0103 	and.w	r1, r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	409a      	lsls	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d11d      	bne.n	8004f60 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f003 0310 	and.w	r3, r3, #16
 8004f32:	221f      	movs	r2, #31
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f54:	4313      	orrs	r3, r2
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f66:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	2207      	movs	r2, #7
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	43db      	mvns	r3, r3
 8004f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f78:	4013      	ands	r3, r2
 8004f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d102      	bne.n	8004f8a <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	623b      	str	r3, [r7, #32]
 8004f88:	e00f      	b.n	8004faa <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d102      	bne.n	8004f98 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004f92:	2301      	movs	r3, #1
 8004f94:	623b      	str	r3, [r7, #32]
 8004f96:	e008      	b.n	8004faa <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	623b      	str	r3, [r7, #32]
 8004fa4:	e001      	b.n	8004faa <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	6a3a      	ldr	r2, [r7, #32]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fcc:	4013      	ands	r3, r2
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	791b      	ldrb	r3, [r3, #4]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d102      	bne.n	8004fde <HAL_DAC_ConfigChannel+0x1fe>
 8004fd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fdc:	e000      	b.n	8004fe0 <HAL_DAC_ConfigChannel+0x200>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f003 0310 	and.w	r3, r3, #16
 8004fec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	795b      	ldrb	r3, [r3, #5]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d102      	bne.n	800500a <HAL_DAC_ConfigChannel+0x22a>
 8005004:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005008:	e000      	b.n	800500c <HAL_DAC_ConfigChannel+0x22c>
 800500a:	2300      	movs	r3, #0
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d114      	bne.n	800504c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005022:	f001 fad7 	bl	80065d4 <HAL_RCC_GetHCLKFreq>
 8005026:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4a48      	ldr	r2, [pc, #288]	@ (800514c <HAL_DAC_ConfigChannel+0x36c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d904      	bls.n	800503a <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
 8005038:	e00f      	b.n	800505a <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4a44      	ldr	r2, [pc, #272]	@ (8005150 <HAL_DAC_ConfigChannel+0x370>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d90a      	bls.n	8005058 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005048:	627b      	str	r3, [r7, #36]	@ 0x24
 800504a:	e006      	b.n	800505a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005052:	4313      	orrs	r3, r2
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24
 8005056:	e000      	b.n	800505a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005058:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005068:	4313      	orrs	r3, r2
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005072:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6819      	ldr	r1, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	43da      	mvns	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	400a      	ands	r2, r1
 8005090:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ac:	4013      	ands	r3, r2
 80050ae:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c4:	4313      	orrs	r3, r2
 80050c6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6819      	ldr	r1, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	22c0      	movs	r2, #192	@ 0xc0
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43da      	mvns	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	400a      	ands	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	089b      	lsrs	r3, r3, #2
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	089b      	lsrs	r3, r3, #2
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800511a:	fa01 f303 	lsl.w	r3, r1, r3
 800511e:	43db      	mvns	r3, r3
 8005120:	ea02 0103 	and.w	r1, r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	409a      	lsls	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005142:	7ffb      	ldrb	r3, [r7, #31]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3728      	adds	r7, #40	@ 0x28
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	09896800 	.word	0x09896800
 8005150:	04c4b400 	.word	0x04c4b400

08005154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e08d      	b.n	8005282 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	4b47      	ldr	r3, [pc, #284]	@ (800528c <HAL_DMA_Init+0x138>)
 800516e:	429a      	cmp	r2, r3
 8005170:	d80f      	bhi.n	8005192 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	4b45      	ldr	r3, [pc, #276]	@ (8005290 <HAL_DMA_Init+0x13c>)
 800517a:	4413      	add	r3, r2
 800517c:	4a45      	ldr	r2, [pc, #276]	@ (8005294 <HAL_DMA_Init+0x140>)
 800517e:	fba2 2303 	umull	r2, r3, r2, r3
 8005182:	091b      	lsrs	r3, r3, #4
 8005184:	009a      	lsls	r2, r3, #2
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a42      	ldr	r2, [pc, #264]	@ (8005298 <HAL_DMA_Init+0x144>)
 800518e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005190:	e00e      	b.n	80051b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	4b40      	ldr	r3, [pc, #256]	@ (800529c <HAL_DMA_Init+0x148>)
 800519a:	4413      	add	r3, r2
 800519c:	4a3d      	ldr	r2, [pc, #244]	@ (8005294 <HAL_DMA_Init+0x140>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	091b      	lsrs	r3, r3, #4
 80051a4:	009a      	lsls	r2, r3, #2
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a3c      	ldr	r2, [pc, #240]	@ (80052a0 <HAL_DMA_Init+0x14c>)
 80051ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80051c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80051d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f9b6 	bl	8005574 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005210:	d102      	bne.n	8005218 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800522c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d010      	beq.n	8005258 <HAL_DMA_Init+0x104>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b04      	cmp	r3, #4
 800523c:	d80c      	bhi.n	8005258 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f9d6 	bl	80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	e008      	b.n	800526a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40020407 	.word	0x40020407
 8005290:	bffdfff8 	.word	0xbffdfff8
 8005294:	cccccccd 	.word	0xcccccccd
 8005298:	40020000 	.word	0x40020000
 800529c:	bffdfbf8 	.word	0xbffdfbf8
 80052a0:	40020400 	.word	0x40020400

080052a4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_DMA_Start_IT+0x20>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e066      	b.n	8005392 <HAL_DMA_Start_IT+0xee>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d155      	bne.n	8005384 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0201 	bic.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 f8fb 	bl	80054f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005306:	2b00      	cmp	r3, #0
 8005308:	d008      	beq.n	800531c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 020e 	orr.w	r2, r2, #14
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	e00f      	b.n	800533c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0204 	bic.w	r2, r2, #4
 800532a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 020a 	orr.w	r2, r2, #10
 800533a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d007      	beq.n	800535a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005354:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005358:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005370:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0201 	orr.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e005      	b.n	8005390 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800538c:	2302      	movs	r3, #2
 800538e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005390:	7dfb      	ldrb	r3, [r7, #23]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	2204      	movs	r2, #4
 80053bc:	409a      	lsls	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d026      	beq.n	8005414 <HAL_DMA_IRQHandler+0x7a>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d021      	beq.n	8005414 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0320 	and.w	r3, r3, #32
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d107      	bne.n	80053ee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0204 	bic.w	r2, r2, #4
 80053ec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f2:	f003 021f 	and.w	r2, r3, #31
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fa:	2104      	movs	r1, #4
 80053fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005400:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005406:	2b00      	cmp	r3, #0
 8005408:	d071      	beq.n	80054ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005412:	e06c      	b.n	80054ee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	2202      	movs	r2, #2
 800541e:	409a      	lsls	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4013      	ands	r3, r2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d02e      	beq.n	8005486 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d029      	beq.n	8005486 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10b      	bne.n	8005458 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 020a 	bic.w	r2, r2, #10
 800544e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545c:	f003 021f 	and.w	r2, r3, #31
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005464:	2102      	movs	r1, #2
 8005466:	fa01 f202 	lsl.w	r2, r1, r2
 800546a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	2b00      	cmp	r3, #0
 800547a:	d038      	beq.n	80054ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005484:	e033      	b.n	80054ee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	2208      	movs	r2, #8
 8005490:	409a      	lsls	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4013      	ands	r3, r2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d02a      	beq.n	80054f0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d025      	beq.n	80054f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 020e 	bic.w	r2, r2, #14
 80054b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b8:	f003 021f 	and.w	r2, r3, #31
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	2101      	movs	r1, #1
 80054c2:	fa01 f202 	lsl.w	r2, r1, r2
 80054c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054ee:	bf00      	nop
 80054f0:	bf00      	nop
}
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800550e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005520:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005526:	f003 021f 	and.w	r2, r3, #31
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	2101      	movs	r1, #1
 8005530:	fa01 f202 	lsl.w	r2, r1, r2
 8005534:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	2b10      	cmp	r3, #16
 8005544:	d108      	bne.n	8005558 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005556:	e007      	b.n	8005568 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	60da      	str	r2, [r3, #12]
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	4b16      	ldr	r3, [pc, #88]	@ (80055dc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005584:	429a      	cmp	r2, r3
 8005586:	d802      	bhi.n	800558e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005588:	4b15      	ldr	r3, [pc, #84]	@ (80055e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e001      	b.n	8005592 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800558e:	4b15      	ldr	r3, [pc, #84]	@ (80055e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005590:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	3b08      	subs	r3, #8
 800559e:	4a12      	ldr	r2, [pc, #72]	@ (80055e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80055a0:	fba2 2303 	umull	r2, r3, r2, r3
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ac:	089b      	lsrs	r3, r3, #2
 80055ae:	009a      	lsls	r2, r3, #2
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4413      	add	r3, r2
 80055b4:	461a      	mov	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a0b      	ldr	r2, [pc, #44]	@ (80055ec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80055be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f003 031f 	and.w	r3, r3, #31
 80055c6:	2201      	movs	r2, #1
 80055c8:	409a      	lsls	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40020407 	.word	0x40020407
 80055e0:	40020800 	.word	0x40020800
 80055e4:	40020820 	.word	0x40020820
 80055e8:	cccccccd 	.word	0xcccccccd
 80055ec:	40020880 	.word	0x40020880

080055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4b0b      	ldr	r3, [pc, #44]	@ (8005630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	461a      	mov	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a08      	ldr	r2, [pc, #32]	@ (8005634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005612:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3b01      	subs	r3, #1
 8005618:	f003 031f 	and.w	r3, r3, #31
 800561c:	2201      	movs	r2, #1
 800561e:	409a      	lsls	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005624:	bf00      	nop
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	1000823f 	.word	0x1000823f
 8005634:	40020940 	.word	0x40020940

08005638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005646:	e15a      	b.n	80058fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	2101      	movs	r1, #1
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	fa01 f303 	lsl.w	r3, r1, r3
 8005654:	4013      	ands	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 814c 	beq.w	80058f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f003 0303 	and.w	r3, r3, #3
 8005668:	2b01      	cmp	r3, #1
 800566a:	d005      	beq.n	8005678 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005674:	2b02      	cmp	r3, #2
 8005676:	d130      	bne.n	80056da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	2203      	movs	r2, #3
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	43db      	mvns	r3, r3
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4013      	ands	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ae:	2201      	movs	r2, #1
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43db      	mvns	r3, r3
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4013      	ands	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	091b      	lsrs	r3, r3, #4
 80056c4:	f003 0201 	and.w	r2, r3, #1
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d017      	beq.n	8005716 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	2203      	movs	r2, #3
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	43db      	mvns	r3, r3
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4013      	ands	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	fa02 f303 	lsl.w	r3, r2, r3
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d123      	bne.n	800576a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	08da      	lsrs	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3208      	adds	r2, #8
 800572a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	220f      	movs	r2, #15
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43db      	mvns	r3, r3
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4013      	ands	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	08da      	lsrs	r2, r3, #3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3208      	adds	r2, #8
 8005764:	6939      	ldr	r1, [r7, #16]
 8005766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	2203      	movs	r2, #3
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	43db      	mvns	r3, r3
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4013      	ands	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 0203 	and.w	r2, r3, #3
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80a6 	beq.w	80058f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ac:	4b5b      	ldr	r3, [pc, #364]	@ (800591c <HAL_GPIO_Init+0x2e4>)
 80057ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057b0:	4a5a      	ldr	r2, [pc, #360]	@ (800591c <HAL_GPIO_Init+0x2e4>)
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80057b8:	4b58      	ldr	r3, [pc, #352]	@ (800591c <HAL_GPIO_Init+0x2e4>)
 80057ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	60bb      	str	r3, [r7, #8]
 80057c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057c4:	4a56      	ldr	r2, [pc, #344]	@ (8005920 <HAL_GPIO_Init+0x2e8>)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	089b      	lsrs	r3, r3, #2
 80057ca:	3302      	adds	r3, #2
 80057cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	220f      	movs	r2, #15
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	43db      	mvns	r3, r3
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4013      	ands	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80057ee:	d01f      	beq.n	8005830 <HAL_GPIO_Init+0x1f8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a4c      	ldr	r2, [pc, #304]	@ (8005924 <HAL_GPIO_Init+0x2ec>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d019      	beq.n	800582c <HAL_GPIO_Init+0x1f4>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a4b      	ldr	r2, [pc, #300]	@ (8005928 <HAL_GPIO_Init+0x2f0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d013      	beq.n	8005828 <HAL_GPIO_Init+0x1f0>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a4a      	ldr	r2, [pc, #296]	@ (800592c <HAL_GPIO_Init+0x2f4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00d      	beq.n	8005824 <HAL_GPIO_Init+0x1ec>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a49      	ldr	r2, [pc, #292]	@ (8005930 <HAL_GPIO_Init+0x2f8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d007      	beq.n	8005820 <HAL_GPIO_Init+0x1e8>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a48      	ldr	r2, [pc, #288]	@ (8005934 <HAL_GPIO_Init+0x2fc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d101      	bne.n	800581c <HAL_GPIO_Init+0x1e4>
 8005818:	2305      	movs	r3, #5
 800581a:	e00a      	b.n	8005832 <HAL_GPIO_Init+0x1fa>
 800581c:	2306      	movs	r3, #6
 800581e:	e008      	b.n	8005832 <HAL_GPIO_Init+0x1fa>
 8005820:	2304      	movs	r3, #4
 8005822:	e006      	b.n	8005832 <HAL_GPIO_Init+0x1fa>
 8005824:	2303      	movs	r3, #3
 8005826:	e004      	b.n	8005832 <HAL_GPIO_Init+0x1fa>
 8005828:	2302      	movs	r3, #2
 800582a:	e002      	b.n	8005832 <HAL_GPIO_Init+0x1fa>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <HAL_GPIO_Init+0x1fa>
 8005830:	2300      	movs	r3, #0
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	f002 0203 	and.w	r2, r2, #3
 8005838:	0092      	lsls	r2, r2, #2
 800583a:	4093      	lsls	r3, r2
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005842:	4937      	ldr	r1, [pc, #220]	@ (8005920 <HAL_GPIO_Init+0x2e8>)
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	089b      	lsrs	r3, r3, #2
 8005848:	3302      	adds	r3, #2
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005850:	4b39      	ldr	r3, [pc, #228]	@ (8005938 <HAL_GPIO_Init+0x300>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	43db      	mvns	r3, r3
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4013      	ands	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005874:	4a30      	ldr	r2, [pc, #192]	@ (8005938 <HAL_GPIO_Init+0x300>)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800587a:	4b2f      	ldr	r3, [pc, #188]	@ (8005938 <HAL_GPIO_Init+0x300>)
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	43db      	mvns	r3, r3
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4013      	ands	r3, r2
 8005888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800589e:	4a26      	ldr	r2, [pc, #152]	@ (8005938 <HAL_GPIO_Init+0x300>)
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80058a4:	4b24      	ldr	r3, [pc, #144]	@ (8005938 <HAL_GPIO_Init+0x300>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	43db      	mvns	r3, r3
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4013      	ands	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80058c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005938 <HAL_GPIO_Init+0x300>)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80058ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005938 <HAL_GPIO_Init+0x300>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	43db      	mvns	r3, r3
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4013      	ands	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80058f2:	4a11      	ldr	r2, [pc, #68]	@ (8005938 <HAL_GPIO_Init+0x300>)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	3301      	adds	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	f47f ae9d 	bne.w	8005648 <HAL_GPIO_Init+0x10>
  }
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	40021000 	.word	0x40021000
 8005920:	40010000 	.word	0x40010000
 8005924:	48000400 	.word	0x48000400
 8005928:	48000800 	.word	0x48000800
 800592c:	48000c00 	.word	0x48000c00
 8005930:	48001000 	.word	0x48001000
 8005934:	48001400 	.word	0x48001400
 8005938:	40010400 	.word	0x40010400

0800593c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	807b      	strh	r3, [r7, #2]
 8005948:	4613      	mov	r3, r2
 800594a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800594c:	787b      	ldrb	r3, [r7, #1]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005952:	887a      	ldrh	r2, [r7, #2]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005958:	e002      	b.n	8005960 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800595a:	887a      	ldrh	r2, [r7, #2]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e0bb      	b.n	8005afa <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b05      	cmp	r3, #5
 800598c:	d101      	bne.n	8005992 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e0b3      	b.n	8005afa <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d101      	bne.n	80059a2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e0ab      	b.n	8005afa <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059a2:	4b58      	ldr	r3, [pc, #352]	@ (8005b04 <HAL_OPAMP_Init+0x198>)
 80059a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059a6:	4a57      	ldr	r2, [pc, #348]	@ (8005b04 <HAL_OPAMP_Init+0x198>)
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80059ae:	4b55      	ldr	r3, [pc, #340]	@ (8005b04 <HAL_OPAMP_Init+0x198>)
 80059b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	60bb      	str	r3, [r7, #8]
 80059b8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fc fc62 	bl	8002298 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b40      	cmp	r3, #64	@ 0x40
 80059da:	d003      	beq.n	80059e4 <HAL_OPAMP_Init+0x78>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b60      	cmp	r3, #96	@ 0x60
 80059e2:	d133      	bne.n	8005a4c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f023 0110 	bic.w	r1, r3, #16
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	4b41      	ldr	r3, [pc, #260]	@ (8005b08 <HAL_OPAMP_Init+0x19c>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6851      	ldr	r1, [r2, #4]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6892      	ldr	r2, [r2, #8]
 8005a0c:	4311      	orrs	r1, r2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6912      	ldr	r2, [r2, #16]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	7d09      	ldrb	r1, [r1, #20]
 8005a18:	2901      	cmp	r1, #1
 8005a1a:	d102      	bne.n	8005a22 <HAL_OPAMP_Init+0xb6>
 8005a1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a20:	e000      	b.n	8005a24 <HAL_OPAMP_Init+0xb8>
 8005a22:	2100      	movs	r1, #0
 8005a24:	4311      	orrs	r1, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a2a:	4311      	orrs	r1, r2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005a30:	4311      	orrs	r1, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a36:	04d2      	lsls	r2, r2, #19
 8005a38:	4311      	orrs	r1, r2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a3e:	0612      	lsls	r2, r2, #24
 8005a40:	4311      	orrs	r1, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	430b      	orrs	r3, r1
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	e035      	b.n	8005ab8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f023 0110 	bic.w	r1, r3, #16
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	4b27      	ldr	r3, [pc, #156]	@ (8005b08 <HAL_OPAMP_Init+0x19c>)
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6851      	ldr	r1, [r2, #4]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6892      	ldr	r2, [r2, #8]
 8005a74:	4311      	orrs	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	68d2      	ldr	r2, [r2, #12]
 8005a7a:	4311      	orrs	r1, r2
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6912      	ldr	r2, [r2, #16]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	7d09      	ldrb	r1, [r1, #20]
 8005a86:	2901      	cmp	r1, #1
 8005a88:	d102      	bne.n	8005a90 <HAL_OPAMP_Init+0x124>
 8005a8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a8e:	e000      	b.n	8005a92 <HAL_OPAMP_Init+0x126>
 8005a90:	2100      	movs	r1, #0
 8005a92:	4311      	orrs	r1, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a98:	4311      	orrs	r1, r2
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005a9e:	4311      	orrs	r1, r2
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005aa4:	04d2      	lsls	r2, r2, #19
 8005aa6:	4311      	orrs	r1, r2
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005aac:	0612      	lsls	r2, r2, #24
 8005aae:	4311      	orrs	r1, r2
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	db10      	blt.n	8005ae4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699a      	ldr	r2, [r3, #24]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d103      	bne.n	8005af8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	40021000 	.word	0x40021000
 8005b08:	e0003e11 	.word	0xe0003e11

08005b0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d141      	bne.n	8005b9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b26:	d131      	bne.n	8005b8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b28:	4b47      	ldr	r3, [pc, #284]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b2e:	4a46      	ldr	r2, [pc, #280]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b38:	4b43      	ldr	r3, [pc, #268]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b40:	4a41      	ldr	r2, [pc, #260]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b48:	4b40      	ldr	r3, [pc, #256]	@ (8005c4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2232      	movs	r2, #50	@ 0x32
 8005b4e:	fb02 f303 	mul.w	r3, r2, r3
 8005b52:	4a3f      	ldr	r2, [pc, #252]	@ (8005c50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b54:	fba2 2303 	umull	r2, r3, r2, r3
 8005b58:	0c9b      	lsrs	r3, r3, #18
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b5e:	e002      	b.n	8005b66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b66:	4b38      	ldr	r3, [pc, #224]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b72:	d102      	bne.n	8005b7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f2      	bne.n	8005b60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b7a:	4b33      	ldr	r3, [pc, #204]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b86:	d158      	bne.n	8005c3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e057      	b.n	8005c3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b92:	4a2d      	ldr	r2, [pc, #180]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005b9c:	e04d      	b.n	8005c3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ba4:	d141      	bne.n	8005c2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ba6:	4b28      	ldr	r3, [pc, #160]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb2:	d131      	bne.n	8005c18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bb4:	4b24      	ldr	r3, [pc, #144]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bba:	4a23      	ldr	r2, [pc, #140]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bc4:	4b20      	ldr	r3, [pc, #128]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8005c4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2232      	movs	r2, #50	@ 0x32
 8005bda:	fb02 f303 	mul.w	r3, r2, r3
 8005bde:	4a1c      	ldr	r2, [pc, #112]	@ (8005c50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005be0:	fba2 2303 	umull	r2, r3, r2, r3
 8005be4:	0c9b      	lsrs	r3, r3, #18
 8005be6:	3301      	adds	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bea:	e002      	b.n	8005bf2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bf2:	4b15      	ldr	r3, [pc, #84]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bfe:	d102      	bne.n	8005c06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f2      	bne.n	8005bec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c06:	4b10      	ldr	r3, [pc, #64]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c12:	d112      	bne.n	8005c3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e011      	b.n	8005c3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c18:	4b0b      	ldr	r3, [pc, #44]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005c28:	e007      	b.n	8005c3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c2a:	4b07      	ldr	r3, [pc, #28]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c32:	4a05      	ldr	r2, [pc, #20]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	40007000 	.word	0x40007000
 8005c4c:	20000000 	.word	0x20000000
 8005c50:	431bde83 	.word	0x431bde83

08005c54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005c58:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	4a04      	ldr	r2, [pc, #16]	@ (8005c70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c62:	6093      	str	r3, [r2, #8]
}
 8005c64:	bf00      	nop
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40007000 	.word	0x40007000

08005c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e2fe      	b.n	8006284 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d075      	beq.n	8005d7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c92:	4b97      	ldr	r3, [pc, #604]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 030c 	and.w	r3, r3, #12
 8005c9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c9c:	4b94      	ldr	r3, [pc, #592]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b0c      	cmp	r3, #12
 8005caa:	d102      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x3e>
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d002      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x44>
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d10b      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb8:	4b8d      	ldr	r3, [pc, #564]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d05b      	beq.n	8005d7c <HAL_RCC_OscConfig+0x108>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d157      	bne.n	8005d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e2d9      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cd8:	d106      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x74>
 8005cda:	4b85      	ldr	r3, [pc, #532]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a84      	ldr	r2, [pc, #528]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	e01d      	b.n	8005d24 <HAL_RCC_OscConfig+0xb0>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cf0:	d10c      	bne.n	8005d0c <HAL_RCC_OscConfig+0x98>
 8005cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4b7c      	ldr	r3, [pc, #496]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a7b      	ldr	r2, [pc, #492]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	e00b      	b.n	8005d24 <HAL_RCC_OscConfig+0xb0>
 8005d0c:	4b78      	ldr	r3, [pc, #480]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a77      	ldr	r2, [pc, #476]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	4b75      	ldr	r3, [pc, #468]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a74      	ldr	r2, [pc, #464]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005d1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d013      	beq.n	8005d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2c:	f7fd f8e2 	bl	8002ef4 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d34:	f7fd f8de 	bl	8002ef4 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b64      	cmp	r3, #100	@ 0x64
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e29e      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d46:	4b6a      	ldr	r3, [pc, #424]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0f0      	beq.n	8005d34 <HAL_RCC_OscConfig+0xc0>
 8005d52:	e014      	b.n	8005d7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d54:	f7fd f8ce 	bl	8002ef4 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d5c:	f7fd f8ca 	bl	8002ef4 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b64      	cmp	r3, #100	@ 0x64
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e28a      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d6e:	4b60      	ldr	r3, [pc, #384]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCC_OscConfig+0xe8>
 8005d7a:	e000      	b.n	8005d7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d075      	beq.n	8005e76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d8a:	4b59      	ldr	r3, [pc, #356]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
 8005d92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d94:	4b56      	ldr	r3, [pc, #344]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f003 0303 	and.w	r3, r3, #3
 8005d9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	2b0c      	cmp	r3, #12
 8005da2:	d102      	bne.n	8005daa <HAL_RCC_OscConfig+0x136>
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d002      	beq.n	8005db0 <HAL_RCC_OscConfig+0x13c>
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d11f      	bne.n	8005df0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005db0:	4b4f      	ldr	r3, [pc, #316]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x154>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e25d      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc8:	4b49      	ldr	r3, [pc, #292]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	061b      	lsls	r3, r3, #24
 8005dd6:	4946      	ldr	r1, [pc, #280]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ddc:	4b45      	ldr	r3, [pc, #276]	@ (8005ef4 <HAL_RCC_OscConfig+0x280>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fd f83b 	bl	8002e5c <HAL_InitTick>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d043      	beq.n	8005e74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e249      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d023      	beq.n	8005e40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005df8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a3c      	ldr	r2, [pc, #240]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7fd f876 	bl	8002ef4 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e0c:	f7fd f872 	bl	8002ef4 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e232      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e1e:	4b34      	ldr	r3, [pc, #208]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0f0      	beq.n	8005e0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2a:	4b31      	ldr	r3, [pc, #196]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	061b      	lsls	r3, r3, #24
 8005e38:	492d      	ldr	r1, [pc, #180]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	604b      	str	r3, [r1, #4]
 8005e3e:	e01a      	b.n	8005e76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e40:	4b2b      	ldr	r3, [pc, #172]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a2a      	ldr	r2, [pc, #168]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005e46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4c:	f7fd f852 	bl	8002ef4 <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e54:	f7fd f84e 	bl	8002ef4 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e20e      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e66:	4b22      	ldr	r3, [pc, #136]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f0      	bne.n	8005e54 <HAL_RCC_OscConfig+0x1e0>
 8005e72:	e000      	b.n	8005e76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d041      	beq.n	8005f06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d01c      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e8a:	4b19      	ldr	r3, [pc, #100]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e90:	4a17      	ldr	r2, [pc, #92]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e9a:	f7fd f82b 	bl	8002ef4 <HAL_GetTick>
 8005e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ea2:	f7fd f827 	bl	8002ef4 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e1e7      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0ef      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x22e>
 8005ec2:	e020      	b.n	8005f06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eca:	4a09      	ldr	r2, [pc, #36]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005ecc:	f023 0301 	bic.w	r3, r3, #1
 8005ed0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed4:	f7fd f80e 	bl	8002ef4 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005eda:	e00d      	b.n	8005ef8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005edc:	f7fd f80a 	bl	8002ef4 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d906      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e1ca      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
 8005eee:	bf00      	nop
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ef8:	4b8c      	ldr	r3, [pc, #560]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1ea      	bne.n	8005edc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0304 	and.w	r3, r3, #4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 80a6 	beq.w	8006060 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f14:	2300      	movs	r3, #0
 8005f16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f18:	4b84      	ldr	r3, [pc, #528]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_RCC_OscConfig+0x2b4>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <HAL_RCC_OscConfig+0x2b6>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f2e:	4b7f      	ldr	r3, [pc, #508]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f32:	4a7e      	ldr	r2, [pc, #504]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f3a:	4b7c      	ldr	r3, [pc, #496]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005f46:	2301      	movs	r3, #1
 8005f48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f4a:	4b79      	ldr	r3, [pc, #484]	@ (8006130 <HAL_RCC_OscConfig+0x4bc>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d118      	bne.n	8005f88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f56:	4b76      	ldr	r3, [pc, #472]	@ (8006130 <HAL_RCC_OscConfig+0x4bc>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a75      	ldr	r2, [pc, #468]	@ (8006130 <HAL_RCC_OscConfig+0x4bc>)
 8005f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f62:	f7fc ffc7 	bl	8002ef4 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f68:	e008      	b.n	8005f7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f6a:	f7fc ffc3 	bl	8002ef4 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e183      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f7c:	4b6c      	ldr	r3, [pc, #432]	@ (8006130 <HAL_RCC_OscConfig+0x4bc>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0f0      	beq.n	8005f6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d108      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x32e>
 8005f90:	4b66      	ldr	r3, [pc, #408]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f96:	4a65      	ldr	r2, [pc, #404]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005f98:	f043 0301 	orr.w	r3, r3, #1
 8005f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fa0:	e024      	b.n	8005fec <HAL_RCC_OscConfig+0x378>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	2b05      	cmp	r3, #5
 8005fa8:	d110      	bne.n	8005fcc <HAL_RCC_OscConfig+0x358>
 8005faa:	4b60      	ldr	r3, [pc, #384]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb0:	4a5e      	ldr	r2, [pc, #376]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005fb2:	f043 0304 	orr.w	r3, r3, #4
 8005fb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fba:	4b5c      	ldr	r3, [pc, #368]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc0:	4a5a      	ldr	r2, [pc, #360]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005fc2:	f043 0301 	orr.w	r3, r3, #1
 8005fc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fca:	e00f      	b.n	8005fec <HAL_RCC_OscConfig+0x378>
 8005fcc:	4b57      	ldr	r3, [pc, #348]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd2:	4a56      	ldr	r2, [pc, #344]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fdc:	4b53      	ldr	r3, [pc, #332]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe2:	4a52      	ldr	r2, [pc, #328]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8005fe4:	f023 0304 	bic.w	r3, r3, #4
 8005fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d016      	beq.n	8006022 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff4:	f7fc ff7e 	bl	8002ef4 <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ffa:	e00a      	b.n	8006012 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffc:	f7fc ff7a 	bl	8002ef4 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800600a:	4293      	cmp	r3, r2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e138      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006012:	4b46      	ldr	r3, [pc, #280]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8006014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0ed      	beq.n	8005ffc <HAL_RCC_OscConfig+0x388>
 8006020:	e015      	b.n	800604e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006022:	f7fc ff67 	bl	8002ef4 <HAL_GetTick>
 8006026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006028:	e00a      	b.n	8006040 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800602a:	f7fc ff63 	bl	8002ef4 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006038:	4293      	cmp	r3, r2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e121      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006040:	4b3a      	ldr	r3, [pc, #232]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8006042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1ed      	bne.n	800602a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800604e:	7ffb      	ldrb	r3, [r7, #31]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d105      	bne.n	8006060 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006054:	4b35      	ldr	r3, [pc, #212]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8006056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006058:	4a34      	ldr	r2, [pc, #208]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 800605a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800605e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0320 	and.w	r3, r3, #32
 8006068:	2b00      	cmp	r3, #0
 800606a:	d03c      	beq.n	80060e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01c      	beq.n	80060ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006074:	4b2d      	ldr	r3, [pc, #180]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8006076:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800607a:	4a2c      	ldr	r2, [pc, #176]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 800607c:	f043 0301 	orr.w	r3, r3, #1
 8006080:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006084:	f7fc ff36 	bl	8002ef4 <HAL_GetTick>
 8006088:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800608c:	f7fc ff32 	bl	8002ef4 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e0f2      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800609e:	4b23      	ldr	r3, [pc, #140]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 80060a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0ef      	beq.n	800608c <HAL_RCC_OscConfig+0x418>
 80060ac:	e01b      	b.n	80060e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060ae:	4b1f      	ldr	r3, [pc, #124]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 80060b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060b4:	4a1d      	ldr	r2, [pc, #116]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 80060b6:	f023 0301 	bic.w	r3, r3, #1
 80060ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060be:	f7fc ff19 	bl	8002ef4 <HAL_GetTick>
 80060c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060c4:	e008      	b.n	80060d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060c6:	f7fc ff15 	bl	8002ef4 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e0d5      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060d8:	4b14      	ldr	r3, [pc, #80]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 80060da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1ef      	bne.n	80060c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 80c9 	beq.w	8006282 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060f0:	4b0e      	ldr	r3, [pc, #56]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f003 030c 	and.w	r3, r3, #12
 80060f8:	2b0c      	cmp	r3, #12
 80060fa:	f000 8083 	beq.w	8006204 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d15e      	bne.n	80061c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006106:	4b09      	ldr	r3, [pc, #36]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a08      	ldr	r2, [pc, #32]	@ (800612c <HAL_RCC_OscConfig+0x4b8>)
 800610c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006112:	f7fc feef 	bl	8002ef4 <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006118:	e00c      	b.n	8006134 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800611a:	f7fc feeb 	bl	8002ef4 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d905      	bls.n	8006134 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e0ab      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
 800612c:	40021000 	.word	0x40021000
 8006130:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006134:	4b55      	ldr	r3, [pc, #340]	@ (800628c <HAL_RCC_OscConfig+0x618>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1ec      	bne.n	800611a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006140:	4b52      	ldr	r3, [pc, #328]	@ (800628c <HAL_RCC_OscConfig+0x618>)
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	4b52      	ldr	r3, [pc, #328]	@ (8006290 <HAL_RCC_OscConfig+0x61c>)
 8006146:	4013      	ands	r3, r2
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6a11      	ldr	r1, [r2, #32]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006150:	3a01      	subs	r2, #1
 8006152:	0112      	lsls	r2, r2, #4
 8006154:	4311      	orrs	r1, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800615a:	0212      	lsls	r2, r2, #8
 800615c:	4311      	orrs	r1, r2
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006162:	0852      	lsrs	r2, r2, #1
 8006164:	3a01      	subs	r2, #1
 8006166:	0552      	lsls	r2, r2, #21
 8006168:	4311      	orrs	r1, r2
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800616e:	0852      	lsrs	r2, r2, #1
 8006170:	3a01      	subs	r2, #1
 8006172:	0652      	lsls	r2, r2, #25
 8006174:	4311      	orrs	r1, r2
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800617a:	06d2      	lsls	r2, r2, #27
 800617c:	430a      	orrs	r2, r1
 800617e:	4943      	ldr	r1, [pc, #268]	@ (800628c <HAL_RCC_OscConfig+0x618>)
 8006180:	4313      	orrs	r3, r2
 8006182:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006184:	4b41      	ldr	r3, [pc, #260]	@ (800628c <HAL_RCC_OscConfig+0x618>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a40      	ldr	r2, [pc, #256]	@ (800628c <HAL_RCC_OscConfig+0x618>)
 800618a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800618e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006190:	4b3e      	ldr	r3, [pc, #248]	@ (800628c <HAL_RCC_OscConfig+0x618>)
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	4a3d      	ldr	r2, [pc, #244]	@ (800628c <HAL_RCC_OscConfig+0x618>)
 8006196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800619a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619c:	f7fc feaa 	bl	8002ef4 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a4:	f7fc fea6 	bl	8002ef4 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e066      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061b6:	4b35      	ldr	r3, [pc, #212]	@ (800628c <HAL_RCC_OscConfig+0x618>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0f0      	beq.n	80061a4 <HAL_RCC_OscConfig+0x530>
 80061c2:	e05e      	b.n	8006282 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c4:	4b31      	ldr	r3, [pc, #196]	@ (800628c <HAL_RCC_OscConfig+0x618>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a30      	ldr	r2, [pc, #192]	@ (800628c <HAL_RCC_OscConfig+0x618>)
 80061ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d0:	f7fc fe90 	bl	8002ef4 <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061d8:	f7fc fe8c 	bl	8002ef4 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e04c      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061ea:	4b28      	ldr	r3, [pc, #160]	@ (800628c <HAL_RCC_OscConfig+0x618>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f0      	bne.n	80061d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80061f6:	4b25      	ldr	r3, [pc, #148]	@ (800628c <HAL_RCC_OscConfig+0x618>)
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	4924      	ldr	r1, [pc, #144]	@ (800628c <HAL_RCC_OscConfig+0x618>)
 80061fc:	4b25      	ldr	r3, [pc, #148]	@ (8006294 <HAL_RCC_OscConfig+0x620>)
 80061fe:	4013      	ands	r3, r2
 8006200:	60cb      	str	r3, [r1, #12]
 8006202:	e03e      	b.n	8006282 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e039      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006210:	4b1e      	ldr	r3, [pc, #120]	@ (800628c <HAL_RCC_OscConfig+0x618>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f003 0203 	and.w	r2, r3, #3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	429a      	cmp	r2, r3
 8006222:	d12c      	bne.n	800627e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622e:	3b01      	subs	r3, #1
 8006230:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006232:	429a      	cmp	r2, r3
 8006234:	d123      	bne.n	800627e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006242:	429a      	cmp	r2, r3
 8006244:	d11b      	bne.n	800627e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006250:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006252:	429a      	cmp	r2, r3
 8006254:	d113      	bne.n	800627e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006260:	085b      	lsrs	r3, r3, #1
 8006262:	3b01      	subs	r3, #1
 8006264:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006266:	429a      	cmp	r2, r3
 8006268:	d109      	bne.n	800627e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006274:	085b      	lsrs	r3, r3, #1
 8006276:	3b01      	subs	r3, #1
 8006278:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800627a:	429a      	cmp	r2, r3
 800627c:	d001      	beq.n	8006282 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3720      	adds	r7, #32
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40021000 	.word	0x40021000
 8006290:	019f800c 	.word	0x019f800c
 8006294:	feeefffc 	.word	0xfeeefffc

08006298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e11e      	b.n	80064ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062b0:	4b91      	ldr	r3, [pc, #580]	@ (80064f8 <HAL_RCC_ClockConfig+0x260>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 030f 	and.w	r3, r3, #15
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d910      	bls.n	80062e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062be:	4b8e      	ldr	r3, [pc, #568]	@ (80064f8 <HAL_RCC_ClockConfig+0x260>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f023 020f 	bic.w	r2, r3, #15
 80062c6:	498c      	ldr	r1, [pc, #560]	@ (80064f8 <HAL_RCC_ClockConfig+0x260>)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ce:	4b8a      	ldr	r3, [pc, #552]	@ (80064f8 <HAL_RCC_ClockConfig+0x260>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d001      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e106      	b.n	80064ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d073      	beq.n	80063d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d129      	bne.n	8006348 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062f4:	4b81      	ldr	r3, [pc, #516]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0f4      	b.n	80064ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006304:	f000 f99e 	bl	8006644 <RCC_GetSysClockFreqFromPLLSource>
 8006308:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4a7c      	ldr	r2, [pc, #496]	@ (8006500 <HAL_RCC_ClockConfig+0x268>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d93f      	bls.n	8006392 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006312:	4b7a      	ldr	r3, [pc, #488]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006326:	2b00      	cmp	r3, #0
 8006328:	d033      	beq.n	8006392 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800632e:	2b00      	cmp	r3, #0
 8006330:	d12f      	bne.n	8006392 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006332:	4b72      	ldr	r3, [pc, #456]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800633a:	4a70      	ldr	r2, [pc, #448]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 800633c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006340:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006342:	2380      	movs	r3, #128	@ 0x80
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e024      	b.n	8006392 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d107      	bne.n	8006360 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006350:	4b6a      	ldr	r3, [pc, #424]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d109      	bne.n	8006370 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e0c6      	b.n	80064ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006360:	4b66      	ldr	r3, [pc, #408]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e0be      	b.n	80064ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006370:	f000 f8ce 	bl	8006510 <HAL_RCC_GetSysClockFreq>
 8006374:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	4a61      	ldr	r2, [pc, #388]	@ (8006500 <HAL_RCC_ClockConfig+0x268>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d909      	bls.n	8006392 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800637e:	4b5f      	ldr	r3, [pc, #380]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006386:	4a5d      	ldr	r2, [pc, #372]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 8006388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800638c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800638e:	2380      	movs	r3, #128	@ 0x80
 8006390:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006392:	4b5a      	ldr	r3, [pc, #360]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f023 0203 	bic.w	r2, r3, #3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	4957      	ldr	r1, [pc, #348]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063a4:	f7fc fda6 	bl	8002ef4 <HAL_GetTick>
 80063a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063aa:	e00a      	b.n	80063c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ac:	f7fc fda2 	bl	8002ef4 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e095      	b.n	80064ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c2:	4b4e      	ldr	r3, [pc, #312]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 020c 	and.w	r2, r3, #12
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d1eb      	bne.n	80063ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d023      	beq.n	8006428 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063ec:	4b43      	ldr	r3, [pc, #268]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	4a42      	ldr	r2, [pc, #264]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 80063f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80063f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006404:	4b3d      	ldr	r3, [pc, #244]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800640c:	4a3b      	ldr	r2, [pc, #236]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 800640e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006412:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006414:	4b39      	ldr	r3, [pc, #228]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	4936      	ldr	r1, [pc, #216]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 8006422:	4313      	orrs	r3, r2
 8006424:	608b      	str	r3, [r1, #8]
 8006426:	e008      	b.n	800643a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b80      	cmp	r3, #128	@ 0x80
 800642c:	d105      	bne.n	800643a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800642e:	4b33      	ldr	r3, [pc, #204]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	4a32      	ldr	r2, [pc, #200]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 8006434:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006438:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800643a:	4b2f      	ldr	r3, [pc, #188]	@ (80064f8 <HAL_RCC_ClockConfig+0x260>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	429a      	cmp	r2, r3
 8006446:	d21d      	bcs.n	8006484 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006448:	4b2b      	ldr	r3, [pc, #172]	@ (80064f8 <HAL_RCC_ClockConfig+0x260>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f023 020f 	bic.w	r2, r3, #15
 8006450:	4929      	ldr	r1, [pc, #164]	@ (80064f8 <HAL_RCC_ClockConfig+0x260>)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	4313      	orrs	r3, r2
 8006456:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006458:	f7fc fd4c 	bl	8002ef4 <HAL_GetTick>
 800645c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800645e:	e00a      	b.n	8006476 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006460:	f7fc fd48 	bl	8002ef4 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800646e:	4293      	cmp	r3, r2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e03b      	b.n	80064ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006476:	4b20      	ldr	r3, [pc, #128]	@ (80064f8 <HAL_RCC_ClockConfig+0x260>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d1ed      	bne.n	8006460 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006490:	4b1a      	ldr	r3, [pc, #104]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	4917      	ldr	r1, [pc, #92]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d009      	beq.n	80064c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064ae:	4b13      	ldr	r3, [pc, #76]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	490f      	ldr	r1, [pc, #60]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064c2:	f000 f825 	bl	8006510 <HAL_RCC_GetSysClockFreq>
 80064c6:	4602      	mov	r2, r0
 80064c8:	4b0c      	ldr	r3, [pc, #48]	@ (80064fc <HAL_RCC_ClockConfig+0x264>)
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	091b      	lsrs	r3, r3, #4
 80064ce:	f003 030f 	and.w	r3, r3, #15
 80064d2:	490c      	ldr	r1, [pc, #48]	@ (8006504 <HAL_RCC_ClockConfig+0x26c>)
 80064d4:	5ccb      	ldrb	r3, [r1, r3]
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	fa22 f303 	lsr.w	r3, r2, r3
 80064de:	4a0a      	ldr	r2, [pc, #40]	@ (8006508 <HAL_RCC_ClockConfig+0x270>)
 80064e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80064e2:	4b0a      	ldr	r3, [pc, #40]	@ (800650c <HAL_RCC_ClockConfig+0x274>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fc fcb8 	bl	8002e5c <HAL_InitTick>
 80064ec:	4603      	mov	r3, r0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	40022000 	.word	0x40022000
 80064fc:	40021000 	.word	0x40021000
 8006500:	04c4b400 	.word	0x04c4b400
 8006504:	0800a258 	.word	0x0800a258
 8006508:	20000000 	.word	0x20000000
 800650c:	20000004 	.word	0x20000004

08006510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006516:	4b2c      	ldr	r3, [pc, #176]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 030c 	and.w	r3, r3, #12
 800651e:	2b04      	cmp	r3, #4
 8006520:	d102      	bne.n	8006528 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006522:	4b2a      	ldr	r3, [pc, #168]	@ (80065cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006524:	613b      	str	r3, [r7, #16]
 8006526:	e047      	b.n	80065b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006528:	4b27      	ldr	r3, [pc, #156]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f003 030c 	and.w	r3, r3, #12
 8006530:	2b08      	cmp	r3, #8
 8006532:	d102      	bne.n	800653a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006534:	4b26      	ldr	r3, [pc, #152]	@ (80065d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	e03e      	b.n	80065b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800653a:	4b23      	ldr	r3, [pc, #140]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 030c 	and.w	r3, r3, #12
 8006542:	2b0c      	cmp	r3, #12
 8006544:	d136      	bne.n	80065b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006546:	4b20      	ldr	r3, [pc, #128]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006550:	4b1d      	ldr	r3, [pc, #116]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	091b      	lsrs	r3, r3, #4
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	3301      	adds	r3, #1
 800655c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b03      	cmp	r3, #3
 8006562:	d10c      	bne.n	800657e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006564:	4a1a      	ldr	r2, [pc, #104]	@ (80065d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	fbb2 f3f3 	udiv	r3, r2, r3
 800656c:	4a16      	ldr	r2, [pc, #88]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800656e:	68d2      	ldr	r2, [r2, #12]
 8006570:	0a12      	lsrs	r2, r2, #8
 8006572:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006576:	fb02 f303 	mul.w	r3, r2, r3
 800657a:	617b      	str	r3, [r7, #20]
      break;
 800657c:	e00c      	b.n	8006598 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800657e:	4a13      	ldr	r2, [pc, #76]	@ (80065cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	fbb2 f3f3 	udiv	r3, r2, r3
 8006586:	4a10      	ldr	r2, [pc, #64]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006588:	68d2      	ldr	r2, [r2, #12]
 800658a:	0a12      	lsrs	r2, r2, #8
 800658c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006590:	fb02 f303 	mul.w	r3, r2, r3
 8006594:	617b      	str	r3, [r7, #20]
      break;
 8006596:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006598:	4b0b      	ldr	r3, [pc, #44]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	0e5b      	lsrs	r3, r3, #25
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	3301      	adds	r3, #1
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	e001      	b.n	80065b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80065b8:	693b      	ldr	r3, [r7, #16]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40021000 	.word	0x40021000
 80065cc:	00f42400 	.word	0x00f42400
 80065d0:	007a1200 	.word	0x007a1200

080065d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065d8:	4b03      	ldr	r3, [pc, #12]	@ (80065e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80065da:	681b      	ldr	r3, [r3, #0]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	20000000 	.word	0x20000000

080065ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80065f0:	f7ff fff0 	bl	80065d4 <HAL_RCC_GetHCLKFreq>
 80065f4:	4602      	mov	r2, r0
 80065f6:	4b06      	ldr	r3, [pc, #24]	@ (8006610 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	0a1b      	lsrs	r3, r3, #8
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	4904      	ldr	r1, [pc, #16]	@ (8006614 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006602:	5ccb      	ldrb	r3, [r1, r3]
 8006604:	f003 031f 	and.w	r3, r3, #31
 8006608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800660c:	4618      	mov	r0, r3
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40021000 	.word	0x40021000
 8006614:	0800a268 	.word	0x0800a268

08006618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800661c:	f7ff ffda 	bl	80065d4 <HAL_RCC_GetHCLKFreq>
 8006620:	4602      	mov	r2, r0
 8006622:	4b06      	ldr	r3, [pc, #24]	@ (800663c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	0adb      	lsrs	r3, r3, #11
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	4904      	ldr	r1, [pc, #16]	@ (8006640 <HAL_RCC_GetPCLK2Freq+0x28>)
 800662e:	5ccb      	ldrb	r3, [r1, r3]
 8006630:	f003 031f 	and.w	r3, r3, #31
 8006634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006638:	4618      	mov	r0, r3
 800663a:	bd80      	pop	{r7, pc}
 800663c:	40021000 	.word	0x40021000
 8006640:	0800a268 	.word	0x0800a268

08006644 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800664a:	4b1e      	ldr	r3, [pc, #120]	@ (80066c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006654:	4b1b      	ldr	r3, [pc, #108]	@ (80066c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	091b      	lsrs	r3, r3, #4
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b03      	cmp	r3, #3
 8006666:	d10c      	bne.n	8006682 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006668:	4a17      	ldr	r2, [pc, #92]	@ (80066c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006670:	4a14      	ldr	r2, [pc, #80]	@ (80066c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006672:	68d2      	ldr	r2, [r2, #12]
 8006674:	0a12      	lsrs	r2, r2, #8
 8006676:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800667a:	fb02 f303 	mul.w	r3, r2, r3
 800667e:	617b      	str	r3, [r7, #20]
    break;
 8006680:	e00c      	b.n	800669c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006682:	4a12      	ldr	r2, [pc, #72]	@ (80066cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	fbb2 f3f3 	udiv	r3, r2, r3
 800668a:	4a0e      	ldr	r2, [pc, #56]	@ (80066c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800668c:	68d2      	ldr	r2, [r2, #12]
 800668e:	0a12      	lsrs	r2, r2, #8
 8006690:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006694:	fb02 f303 	mul.w	r3, r2, r3
 8006698:	617b      	str	r3, [r7, #20]
    break;
 800669a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800669c:	4b09      	ldr	r3, [pc, #36]	@ (80066c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	0e5b      	lsrs	r3, r3, #25
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	3301      	adds	r3, #1
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80066b6:	687b      	ldr	r3, [r7, #4]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	40021000 	.word	0x40021000
 80066c8:	007a1200 	.word	0x007a1200
 80066cc:	00f42400 	.word	0x00f42400

080066d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066d8:	2300      	movs	r3, #0
 80066da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066dc:	2300      	movs	r3, #0
 80066de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 8098 	beq.w	800681e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066ee:	2300      	movs	r3, #0
 80066f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066f2:	4b43      	ldr	r3, [pc, #268]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10d      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066fe:	4b40      	ldr	r3, [pc, #256]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006702:	4a3f      	ldr	r2, [pc, #252]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006708:	6593      	str	r3, [r2, #88]	@ 0x58
 800670a:	4b3d      	ldr	r3, [pc, #244]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800670c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800670e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006712:	60bb      	str	r3, [r7, #8]
 8006714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006716:	2301      	movs	r3, #1
 8006718:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800671a:	4b3a      	ldr	r3, [pc, #232]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a39      	ldr	r2, [pc, #228]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006724:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006726:	f7fc fbe5 	bl	8002ef4 <HAL_GetTick>
 800672a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800672c:	e009      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800672e:	f7fc fbe1 	bl	8002ef4 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d902      	bls.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	74fb      	strb	r3, [r7, #19]
        break;
 8006740:	e005      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006742:	4b30      	ldr	r3, [pc, #192]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0ef      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800674e:	7cfb      	ldrb	r3, [r7, #19]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d159      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006754:	4b2a      	ldr	r3, [pc, #168]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800675a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800675e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01e      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	429a      	cmp	r2, r3
 800676e:	d019      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006770:	4b23      	ldr	r3, [pc, #140]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006776:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800677a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800677c:	4b20      	ldr	r3, [pc, #128]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800677e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006782:	4a1f      	ldr	r2, [pc, #124]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800678c:	4b1c      	ldr	r3, [pc, #112]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800678e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006792:	4a1b      	ldr	r2, [pc, #108]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800679c:	4a18      	ldr	r2, [pc, #96]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d016      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ae:	f7fc fba1 	bl	8002ef4 <HAL_GetTick>
 80067b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067b4:	e00b      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067b6:	f7fc fb9d 	bl	8002ef4 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d902      	bls.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	74fb      	strb	r3, [r7, #19]
            break;
 80067cc:	e006      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0ec      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80067dc:	7cfb      	ldrb	r3, [r7, #19]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10b      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067e2:	4b07      	ldr	r3, [pc, #28]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067f0:	4903      	ldr	r1, [pc, #12]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80067f8:	e008      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067fa:	7cfb      	ldrb	r3, [r7, #19]
 80067fc:	74bb      	strb	r3, [r7, #18]
 80067fe:	e005      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006800:	40021000 	.word	0x40021000
 8006804:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006808:	7cfb      	ldrb	r3, [r7, #19]
 800680a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800680c:	7c7b      	ldrb	r3, [r7, #17]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d105      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006812:	4ba7      	ldr	r3, [pc, #668]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006816:	4aa6      	ldr	r2, [pc, #664]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800681c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800682a:	4ba1      	ldr	r3, [pc, #644]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800682c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006830:	f023 0203 	bic.w	r2, r3, #3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	499d      	ldr	r1, [pc, #628]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800683a:	4313      	orrs	r3, r2
 800683c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00a      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800684c:	4b98      	ldr	r3, [pc, #608]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006852:	f023 020c 	bic.w	r2, r3, #12
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	4995      	ldr	r1, [pc, #596]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800685c:	4313      	orrs	r3, r2
 800685e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800686e:	4b90      	ldr	r3, [pc, #576]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006874:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	498c      	ldr	r1, [pc, #560]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800687e:	4313      	orrs	r3, r2
 8006880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006890:	4b87      	ldr	r3, [pc, #540]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006896:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	4984      	ldr	r1, [pc, #528]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0310 	and.w	r3, r3, #16
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068b2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	497b      	ldr	r1, [pc, #492]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068d4:	4b76      	ldr	r3, [pc, #472]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	4973      	ldr	r1, [pc, #460]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068f6:	4b6e      	ldr	r3, [pc, #440]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	496a      	ldr	r1, [pc, #424]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006906:	4313      	orrs	r3, r2
 8006908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006918:	4b65      	ldr	r3, [pc, #404]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800691a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800691e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	4962      	ldr	r1, [pc, #392]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006928:	4313      	orrs	r3, r2
 800692a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800693a:	4b5d      	ldr	r3, [pc, #372]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800693c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006940:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006948:	4959      	ldr	r1, [pc, #356]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800694a:	4313      	orrs	r3, r2
 800694c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00a      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800695c:	4b54      	ldr	r3, [pc, #336]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800695e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006962:	f023 0203 	bic.w	r2, r3, #3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696a:	4951      	ldr	r1, [pc, #324]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800696c:	4313      	orrs	r3, r2
 800696e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800697e:	4b4c      	ldr	r3, [pc, #304]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006984:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698c:	4948      	ldr	r1, [pc, #288]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800698e:	4313      	orrs	r3, r2
 8006990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800699c:	2b00      	cmp	r3, #0
 800699e:	d015      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069a0:	4b43      	ldr	r3, [pc, #268]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ae:	4940      	ldr	r1, [pc, #256]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069be:	d105      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069c0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4a3a      	ldr	r2, [pc, #232]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069ca:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d015      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069d8:	4b35      	ldr	r3, [pc, #212]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069e6:	4932      	ldr	r1, [pc, #200]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069f6:	d105      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069f8:	4b2d      	ldr	r3, [pc, #180]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	4a2c      	ldr	r2, [pc, #176]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a02:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d015      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a10:	4b27      	ldr	r3, [pc, #156]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a16:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1e:	4924      	ldr	r1, [pc, #144]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a2e:	d105      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a30:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d015      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a48:	4b19      	ldr	r3, [pc, #100]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a56:	4916      	ldr	r1, [pc, #88]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a66:	d105      	bne.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a68:	4b11      	ldr	r3, [pc, #68]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	4a10      	ldr	r2, [pc, #64]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d019      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a80:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8e:	4908      	ldr	r1, [pc, #32]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a9e:	d109      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aa0:	4b03      	ldr	r3, [pc, #12]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	4a02      	ldr	r2, [pc, #8]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006aaa:	60d3      	str	r3, [r2, #12]
 8006aac:	e002      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006aae:	bf00      	nop
 8006ab0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d015      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006ac0:	4b29      	ldr	r3, [pc, #164]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ace:	4926      	ldr	r1, [pc, #152]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ada:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ade:	d105      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ae0:	4b21      	ldr	r3, [pc, #132]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	4a20      	ldr	r2, [pc, #128]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d015      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006af8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006afe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b06:	4918      	ldr	r1, [pc, #96]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b16:	d105      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b18:	4b13      	ldr	r3, [pc, #76]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	4a12      	ldr	r2, [pc, #72]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b22:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d015      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b30:	4b0d      	ldr	r3, [pc, #52]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b3e:	490a      	ldr	r1, [pc, #40]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b4e:	d105      	bne.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b50:	4b05      	ldr	r3, [pc, #20]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	4a04      	ldr	r2, [pc, #16]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006b5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	40021000 	.word	0x40021000

08006b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e09d      	b.n	8006cba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d108      	bne.n	8006b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b8e:	d009      	beq.n	8006ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	61da      	str	r2, [r3, #28]
 8006b96:	e005      	b.n	8006ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fb fbfa 	bl	80023b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006be4:	d902      	bls.n	8006bec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	e002      	b.n	8006bf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006bf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006bfa:	d007      	beq.n	8006c0c <HAL_SPI_Init+0xa0>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c04:	d002      	beq.n	8006c0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c4e:	ea42 0103 	orr.w	r1, r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	0c1b      	lsrs	r3, r3, #16
 8006c68:	f003 0204 	and.w	r2, r3, #4
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c70:	f003 0310 	and.w	r3, r3, #16
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c88:	ea42 0103 	orr.w	r1, r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	69da      	ldr	r2, [r3, #28]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ca8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e049      	b.n	8006d68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d106      	bne.n	8006cee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7fb fba9 	bl	8002440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4610      	mov	r0, r2
 8006d02:	f000 fd77 	bl	80077f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e049      	b.n	8006e16 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f841 	bl	8006e1e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3304      	adds	r3, #4
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f000 fd20 	bl	80077f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e049      	b.n	8006ed8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d106      	bne.n	8006e5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f841 	bl	8006ee0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2202      	movs	r2, #2
 8006e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f000 fcbf 	bl	80077f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e049      	b.n	8006f9a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fb fc9a 	bl	8002854 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f000 fc5e 	bl	80077f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b086      	sub	sp, #24
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e097      	b.n	80070e6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f88f 	bl	80070ee <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6812      	ldr	r2, [r2, #0]
 8006fe2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006fe6:	f023 0307 	bic.w	r3, r3, #7
 8006fea:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f000 fbfc 	bl	80077f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007024:	f023 0303 	bic.w	r3, r3, #3
 8007028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	689a      	ldr	r2, [r3, #8]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	4313      	orrs	r3, r2
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007042:	f023 030c 	bic.w	r3, r3, #12
 8007046:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800704e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	4313      	orrs	r3, r2
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4313      	orrs	r3, r2
 8007064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	011a      	lsls	r2, r3, #4
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	031b      	lsls	r3, r3, #12
 8007072:	4313      	orrs	r3, r2
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007080:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007088:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	011b      	lsls	r3, r3, #4
 8007094:	4313      	orrs	r3, r2
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	4313      	orrs	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
	...

08007104 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800711a:	2b01      	cmp	r3, #1
 800711c:	d101      	bne.n	8007122 <HAL_TIM_OC_ConfigChannel+0x1e>
 800711e:	2302      	movs	r3, #2
 8007120:	e066      	b.n	80071f0 <HAL_TIM_OC_ConfigChannel+0xec>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b14      	cmp	r3, #20
 800712e:	d857      	bhi.n	80071e0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007130:	a201      	add	r2, pc, #4	@ (adr r2, 8007138 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007136:	bf00      	nop
 8007138:	0800718d 	.word	0x0800718d
 800713c:	080071e1 	.word	0x080071e1
 8007140:	080071e1 	.word	0x080071e1
 8007144:	080071e1 	.word	0x080071e1
 8007148:	0800719b 	.word	0x0800719b
 800714c:	080071e1 	.word	0x080071e1
 8007150:	080071e1 	.word	0x080071e1
 8007154:	080071e1 	.word	0x080071e1
 8007158:	080071a9 	.word	0x080071a9
 800715c:	080071e1 	.word	0x080071e1
 8007160:	080071e1 	.word	0x080071e1
 8007164:	080071e1 	.word	0x080071e1
 8007168:	080071b7 	.word	0x080071b7
 800716c:	080071e1 	.word	0x080071e1
 8007170:	080071e1 	.word	0x080071e1
 8007174:	080071e1 	.word	0x080071e1
 8007178:	080071c5 	.word	0x080071c5
 800717c:	080071e1 	.word	0x080071e1
 8007180:	080071e1 	.word	0x080071e1
 8007184:	080071e1 	.word	0x080071e1
 8007188:	080071d3 	.word	0x080071d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68b9      	ldr	r1, [r7, #8]
 8007192:	4618      	mov	r0, r3
 8007194:	f000 fbe2 	bl	800795c <TIM_OC1_SetConfig>
      break;
 8007198:	e025      	b.n	80071e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fc75 	bl	8007a90 <TIM_OC2_SetConfig>
      break;
 80071a6:	e01e      	b.n	80071e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68b9      	ldr	r1, [r7, #8]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fd02 	bl	8007bb8 <TIM_OC3_SetConfig>
      break;
 80071b4:	e017      	b.n	80071e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68b9      	ldr	r1, [r7, #8]
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fd8d 	bl	8007cdc <TIM_OC4_SetConfig>
      break;
 80071c2:	e010      	b.n	80071e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fe1a 	bl	8007e04 <TIM_OC5_SetConfig>
      break;
 80071d0:	e009      	b.n	80071e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68b9      	ldr	r1, [r7, #8]
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fe7d 	bl	8007ed8 <TIM_OC6_SetConfig>
      break;
 80071de:	e002      	b.n	80071e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	75fb      	strb	r3, [r7, #23]
      break;
 80071e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800720e:	2b01      	cmp	r3, #1
 8007210:	d101      	bne.n	8007216 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007212:	2302      	movs	r3, #2
 8007214:	e088      	b.n	8007328 <HAL_TIM_IC_ConfigChannel+0x130>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d11b      	bne.n	800725c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007234:	f000 ff92 	bl	800815c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 020c 	bic.w	r2, r2, #12
 8007246:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6999      	ldr	r1, [r3, #24]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	619a      	str	r2, [r3, #24]
 800725a:	e060      	b.n	800731e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b04      	cmp	r3, #4
 8007260:	d11c      	bne.n	800729c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007272:	f001 f816 	bl	80082a2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	699a      	ldr	r2, [r3, #24]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007284:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6999      	ldr	r1, [r3, #24]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	021a      	lsls	r2, r3, #8
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	619a      	str	r2, [r3, #24]
 800729a:	e040      	b.n	800731e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b08      	cmp	r3, #8
 80072a0:	d11b      	bne.n	80072da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80072b2:	f001 f863 	bl	800837c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69da      	ldr	r2, [r3, #28]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 020c 	bic.w	r2, r2, #12
 80072c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69d9      	ldr	r1, [r3, #28]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	61da      	str	r2, [r3, #28]
 80072d8:	e021      	b.n	800731e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b0c      	cmp	r3, #12
 80072de:	d11c      	bne.n	800731a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80072f0:	f001 f880 	bl	80083f4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	69da      	ldr	r2, [r3, #28]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007302:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	69d9      	ldr	r1, [r3, #28]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	021a      	lsls	r2, r3, #8
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	61da      	str	r2, [r3, #28]
 8007318:	e001      	b.n	800731e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007326:	7dfb      	ldrb	r3, [r7, #23]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007346:	2b01      	cmp	r3, #1
 8007348:	d101      	bne.n	800734e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800734a:	2302      	movs	r3, #2
 800734c:	e0ff      	b.n	800754e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b14      	cmp	r3, #20
 800735a:	f200 80f0 	bhi.w	800753e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800735e:	a201      	add	r2, pc, #4	@ (adr r2, 8007364 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007364:	080073b9 	.word	0x080073b9
 8007368:	0800753f 	.word	0x0800753f
 800736c:	0800753f 	.word	0x0800753f
 8007370:	0800753f 	.word	0x0800753f
 8007374:	080073f9 	.word	0x080073f9
 8007378:	0800753f 	.word	0x0800753f
 800737c:	0800753f 	.word	0x0800753f
 8007380:	0800753f 	.word	0x0800753f
 8007384:	0800743b 	.word	0x0800743b
 8007388:	0800753f 	.word	0x0800753f
 800738c:	0800753f 	.word	0x0800753f
 8007390:	0800753f 	.word	0x0800753f
 8007394:	0800747b 	.word	0x0800747b
 8007398:	0800753f 	.word	0x0800753f
 800739c:	0800753f 	.word	0x0800753f
 80073a0:	0800753f 	.word	0x0800753f
 80073a4:	080074bd 	.word	0x080074bd
 80073a8:	0800753f 	.word	0x0800753f
 80073ac:	0800753f 	.word	0x0800753f
 80073b0:	0800753f 	.word	0x0800753f
 80073b4:	080074fd 	.word	0x080074fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68b9      	ldr	r1, [r7, #8]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 facc 	bl	800795c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0208 	orr.w	r2, r2, #8
 80073d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699a      	ldr	r2, [r3, #24]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0204 	bic.w	r2, r2, #4
 80073e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6999      	ldr	r1, [r3, #24]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	691a      	ldr	r2, [r3, #16]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	619a      	str	r2, [r3, #24]
      break;
 80073f6:	e0a5      	b.n	8007544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68b9      	ldr	r1, [r7, #8]
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fb46 	bl	8007a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6999      	ldr	r1, [r3, #24]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	021a      	lsls	r2, r3, #8
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	619a      	str	r2, [r3, #24]
      break;
 8007438:	e084      	b.n	8007544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68b9      	ldr	r1, [r7, #8]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fbb9 	bl	8007bb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69da      	ldr	r2, [r3, #28]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f042 0208 	orr.w	r2, r2, #8
 8007454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69da      	ldr	r2, [r3, #28]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0204 	bic.w	r2, r2, #4
 8007464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69d9      	ldr	r1, [r3, #28]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	61da      	str	r2, [r3, #28]
      break;
 8007478:	e064      	b.n	8007544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fc2b 	bl	8007cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69da      	ldr	r2, [r3, #28]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69da      	ldr	r2, [r3, #28]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69d9      	ldr	r1, [r3, #28]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	021a      	lsls	r2, r3, #8
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	61da      	str	r2, [r3, #28]
      break;
 80074ba:	e043      	b.n	8007544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68b9      	ldr	r1, [r7, #8]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 fc9e 	bl	8007e04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0208 	orr.w	r2, r2, #8
 80074d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0204 	bic.w	r2, r2, #4
 80074e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	691a      	ldr	r2, [r3, #16]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80074fa:	e023      	b.n	8007544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68b9      	ldr	r1, [r7, #8]
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fce8 	bl	8007ed8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007516:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007526:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	021a      	lsls	r2, r3, #8
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800753c:	e002      	b.n	8007544 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	75fb      	strb	r3, [r7, #23]
      break;
 8007542:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800754c:	7dfb      	ldrb	r3, [r7, #23]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop

08007558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <HAL_TIM_ConfigClockSource+0x1c>
 8007570:	2302      	movs	r3, #2
 8007572:	e0ee      	b.n	8007752 <HAL_TIM_ConfigClockSource+0x1fa>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007592:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800759e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a6b      	ldr	r2, [pc, #428]	@ (800775c <HAL_TIM_ConfigClockSource+0x204>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	f000 80b9 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 80075b4:	4a69      	ldr	r2, [pc, #420]	@ (800775c <HAL_TIM_ConfigClockSource+0x204>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	f200 80be 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 80075bc:	4a68      	ldr	r2, [pc, #416]	@ (8007760 <HAL_TIM_ConfigClockSource+0x208>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	f000 80b1 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 80075c4:	4a66      	ldr	r2, [pc, #408]	@ (8007760 <HAL_TIM_ConfigClockSource+0x208>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	f200 80b6 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 80075cc:	4a65      	ldr	r2, [pc, #404]	@ (8007764 <HAL_TIM_ConfigClockSource+0x20c>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	f000 80a9 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 80075d4:	4a63      	ldr	r2, [pc, #396]	@ (8007764 <HAL_TIM_ConfigClockSource+0x20c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	f200 80ae 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 80075dc:	4a62      	ldr	r2, [pc, #392]	@ (8007768 <HAL_TIM_ConfigClockSource+0x210>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	f000 80a1 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 80075e4:	4a60      	ldr	r2, [pc, #384]	@ (8007768 <HAL_TIM_ConfigClockSource+0x210>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	f200 80a6 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 80075ec:	4a5f      	ldr	r2, [pc, #380]	@ (800776c <HAL_TIM_ConfigClockSource+0x214>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	f000 8099 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 80075f4:	4a5d      	ldr	r2, [pc, #372]	@ (800776c <HAL_TIM_ConfigClockSource+0x214>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	f200 809e 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 80075fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007600:	f000 8091 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 8007604:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007608:	f200 8096 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 800760c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007610:	f000 8089 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 8007614:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007618:	f200 808e 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 800761c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007620:	d03e      	beq.n	80076a0 <HAL_TIM_ConfigClockSource+0x148>
 8007622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007626:	f200 8087 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 800762a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800762e:	f000 8086 	beq.w	800773e <HAL_TIM_ConfigClockSource+0x1e6>
 8007632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007636:	d87f      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 8007638:	2b70      	cmp	r3, #112	@ 0x70
 800763a:	d01a      	beq.n	8007672 <HAL_TIM_ConfigClockSource+0x11a>
 800763c:	2b70      	cmp	r3, #112	@ 0x70
 800763e:	d87b      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 8007640:	2b60      	cmp	r3, #96	@ 0x60
 8007642:	d050      	beq.n	80076e6 <HAL_TIM_ConfigClockSource+0x18e>
 8007644:	2b60      	cmp	r3, #96	@ 0x60
 8007646:	d877      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 8007648:	2b50      	cmp	r3, #80	@ 0x50
 800764a:	d03c      	beq.n	80076c6 <HAL_TIM_ConfigClockSource+0x16e>
 800764c:	2b50      	cmp	r3, #80	@ 0x50
 800764e:	d873      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 8007650:	2b40      	cmp	r3, #64	@ 0x40
 8007652:	d058      	beq.n	8007706 <HAL_TIM_ConfigClockSource+0x1ae>
 8007654:	2b40      	cmp	r3, #64	@ 0x40
 8007656:	d86f      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 8007658:	2b30      	cmp	r3, #48	@ 0x30
 800765a:	d064      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 800765c:	2b30      	cmp	r3, #48	@ 0x30
 800765e:	d86b      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 8007660:	2b20      	cmp	r3, #32
 8007662:	d060      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 8007664:	2b20      	cmp	r3, #32
 8007666:	d867      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 8007668:	2b00      	cmp	r3, #0
 800766a:	d05c      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 800766c:	2b10      	cmp	r3, #16
 800766e:	d05a      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 8007670:	e062      	b.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007682:	f000 ff11 	bl	80084a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	609a      	str	r2, [r3, #8]
      break;
 800769e:	e04f      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076b0:	f000 fefa 	bl	80084a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076c2:	609a      	str	r2, [r3, #8]
      break;
 80076c4:	e03c      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076d2:	461a      	mov	r2, r3
 80076d4:	f000 fdb6 	bl	8008244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2150      	movs	r1, #80	@ 0x50
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 fec5 	bl	800846e <TIM_ITRx_SetConfig>
      break;
 80076e4:	e02c      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076f2:	461a      	mov	r2, r3
 80076f4:	f000 fe12 	bl	800831c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2160      	movs	r1, #96	@ 0x60
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 feb5 	bl	800846e <TIM_ITRx_SetConfig>
      break;
 8007704:	e01c      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007712:	461a      	mov	r2, r3
 8007714:	f000 fd96 	bl	8008244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2140      	movs	r1, #64	@ 0x40
 800771e:	4618      	mov	r0, r3
 8007720:	f000 fea5 	bl	800846e <TIM_ITRx_SetConfig>
      break;
 8007724:	e00c      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4619      	mov	r1, r3
 8007730:	4610      	mov	r0, r2
 8007732:	f000 fe9c 	bl	800846e <TIM_ITRx_SetConfig>
      break;
 8007736:	e003      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
      break;
 800773c:	e000      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800773e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007750:	7bfb      	ldrb	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	00100070 	.word	0x00100070
 8007760:	00100050 	.word	0x00100050
 8007764:	00100040 	.word	0x00100040
 8007768:	00100030 	.word	0x00100030
 800776c:	00100020 	.word	0x00100020

08007770 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007780:	2b01      	cmp	r3, #1
 8007782:	d101      	bne.n	8007788 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007784:	2302      	movs	r3, #2
 8007786:	e031      	b.n	80077ec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fc08 	bl	8007fb0 <TIM_SlaveTimer_SetConfig>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d009      	beq.n	80077ba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e018      	b.n	80077ec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077c8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80077d8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a4c      	ldr	r2, [pc, #304]	@ (8007938 <TIM_Base_SetConfig+0x144>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d017      	beq.n	800783c <TIM_Base_SetConfig+0x48>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007812:	d013      	beq.n	800783c <TIM_Base_SetConfig+0x48>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a49      	ldr	r2, [pc, #292]	@ (800793c <TIM_Base_SetConfig+0x148>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d00f      	beq.n	800783c <TIM_Base_SetConfig+0x48>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a48      	ldr	r2, [pc, #288]	@ (8007940 <TIM_Base_SetConfig+0x14c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00b      	beq.n	800783c <TIM_Base_SetConfig+0x48>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a47      	ldr	r2, [pc, #284]	@ (8007944 <TIM_Base_SetConfig+0x150>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d007      	beq.n	800783c <TIM_Base_SetConfig+0x48>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a46      	ldr	r2, [pc, #280]	@ (8007948 <TIM_Base_SetConfig+0x154>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d003      	beq.n	800783c <TIM_Base_SetConfig+0x48>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a45      	ldr	r2, [pc, #276]	@ (800794c <TIM_Base_SetConfig+0x158>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d108      	bne.n	800784e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a39      	ldr	r2, [pc, #228]	@ (8007938 <TIM_Base_SetConfig+0x144>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d023      	beq.n	800789e <TIM_Base_SetConfig+0xaa>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800785c:	d01f      	beq.n	800789e <TIM_Base_SetConfig+0xaa>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a36      	ldr	r2, [pc, #216]	@ (800793c <TIM_Base_SetConfig+0x148>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d01b      	beq.n	800789e <TIM_Base_SetConfig+0xaa>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a35      	ldr	r2, [pc, #212]	@ (8007940 <TIM_Base_SetConfig+0x14c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d017      	beq.n	800789e <TIM_Base_SetConfig+0xaa>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a34      	ldr	r2, [pc, #208]	@ (8007944 <TIM_Base_SetConfig+0x150>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d013      	beq.n	800789e <TIM_Base_SetConfig+0xaa>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a33      	ldr	r2, [pc, #204]	@ (8007948 <TIM_Base_SetConfig+0x154>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d00f      	beq.n	800789e <TIM_Base_SetConfig+0xaa>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a33      	ldr	r2, [pc, #204]	@ (8007950 <TIM_Base_SetConfig+0x15c>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d00b      	beq.n	800789e <TIM_Base_SetConfig+0xaa>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a32      	ldr	r2, [pc, #200]	@ (8007954 <TIM_Base_SetConfig+0x160>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d007      	beq.n	800789e <TIM_Base_SetConfig+0xaa>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a31      	ldr	r2, [pc, #196]	@ (8007958 <TIM_Base_SetConfig+0x164>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d003      	beq.n	800789e <TIM_Base_SetConfig+0xaa>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a2c      	ldr	r2, [pc, #176]	@ (800794c <TIM_Base_SetConfig+0x158>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d108      	bne.n	80078b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a18      	ldr	r2, [pc, #96]	@ (8007938 <TIM_Base_SetConfig+0x144>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d013      	beq.n	8007904 <TIM_Base_SetConfig+0x110>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a1a      	ldr	r2, [pc, #104]	@ (8007948 <TIM_Base_SetConfig+0x154>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d00f      	beq.n	8007904 <TIM_Base_SetConfig+0x110>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007950 <TIM_Base_SetConfig+0x15c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d00b      	beq.n	8007904 <TIM_Base_SetConfig+0x110>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a19      	ldr	r2, [pc, #100]	@ (8007954 <TIM_Base_SetConfig+0x160>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d007      	beq.n	8007904 <TIM_Base_SetConfig+0x110>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a18      	ldr	r2, [pc, #96]	@ (8007958 <TIM_Base_SetConfig+0x164>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d003      	beq.n	8007904 <TIM_Base_SetConfig+0x110>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a13      	ldr	r2, [pc, #76]	@ (800794c <TIM_Base_SetConfig+0x158>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d103      	bne.n	800790c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	691a      	ldr	r2, [r3, #16]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b01      	cmp	r3, #1
 800791c:	d105      	bne.n	800792a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	f023 0201 	bic.w	r2, r3, #1
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	611a      	str	r2, [r3, #16]
  }
}
 800792a:	bf00      	nop
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	40012c00 	.word	0x40012c00
 800793c:	40000400 	.word	0x40000400
 8007940:	40000800 	.word	0x40000800
 8007944:	40000c00 	.word	0x40000c00
 8007948:	40013400 	.word	0x40013400
 800794c:	40015000 	.word	0x40015000
 8007950:	40014000 	.word	0x40014000
 8007954:	40014400 	.word	0x40014400
 8007958:	40014800 	.word	0x40014800

0800795c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	f023 0201 	bic.w	r2, r3, #1
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800798a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800798e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 0303 	bic.w	r3, r3, #3
 8007996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	4313      	orrs	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f023 0302 	bic.w	r3, r3, #2
 80079a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a30      	ldr	r2, [pc, #192]	@ (8007a78 <TIM_OC1_SetConfig+0x11c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d013      	beq.n	80079e4 <TIM_OC1_SetConfig+0x88>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a2f      	ldr	r2, [pc, #188]	@ (8007a7c <TIM_OC1_SetConfig+0x120>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00f      	beq.n	80079e4 <TIM_OC1_SetConfig+0x88>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a2e      	ldr	r2, [pc, #184]	@ (8007a80 <TIM_OC1_SetConfig+0x124>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00b      	beq.n	80079e4 <TIM_OC1_SetConfig+0x88>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a2d      	ldr	r2, [pc, #180]	@ (8007a84 <TIM_OC1_SetConfig+0x128>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d007      	beq.n	80079e4 <TIM_OC1_SetConfig+0x88>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a2c      	ldr	r2, [pc, #176]	@ (8007a88 <TIM_OC1_SetConfig+0x12c>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d003      	beq.n	80079e4 <TIM_OC1_SetConfig+0x88>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a2b      	ldr	r2, [pc, #172]	@ (8007a8c <TIM_OC1_SetConfig+0x130>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d10c      	bne.n	80079fe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f023 0308 	bic.w	r3, r3, #8
 80079ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f023 0304 	bic.w	r3, r3, #4
 80079fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a1d      	ldr	r2, [pc, #116]	@ (8007a78 <TIM_OC1_SetConfig+0x11c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d013      	beq.n	8007a2e <TIM_OC1_SetConfig+0xd2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a1c      	ldr	r2, [pc, #112]	@ (8007a7c <TIM_OC1_SetConfig+0x120>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00f      	beq.n	8007a2e <TIM_OC1_SetConfig+0xd2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a1b      	ldr	r2, [pc, #108]	@ (8007a80 <TIM_OC1_SetConfig+0x124>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00b      	beq.n	8007a2e <TIM_OC1_SetConfig+0xd2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a1a      	ldr	r2, [pc, #104]	@ (8007a84 <TIM_OC1_SetConfig+0x128>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d007      	beq.n	8007a2e <TIM_OC1_SetConfig+0xd2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a19      	ldr	r2, [pc, #100]	@ (8007a88 <TIM_OC1_SetConfig+0x12c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_OC1_SetConfig+0xd2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a18      	ldr	r2, [pc, #96]	@ (8007a8c <TIM_OC1_SetConfig+0x130>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d111      	bne.n	8007a52 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	621a      	str	r2, [r3, #32]
}
 8007a6c:	bf00      	nop
 8007a6e:	371c      	adds	r7, #28
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	40012c00 	.word	0x40012c00
 8007a7c:	40013400 	.word	0x40013400
 8007a80:	40014000 	.word	0x40014000
 8007a84:	40014400 	.word	0x40014400
 8007a88:	40014800 	.word	0x40014800
 8007a8c:	40015000 	.word	0x40015000

08007a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	f023 0210 	bic.w	r2, r3, #16
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	021b      	lsls	r3, r3, #8
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f023 0320 	bic.w	r3, r3, #32
 8007ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a2c      	ldr	r2, [pc, #176]	@ (8007ba0 <TIM_OC2_SetConfig+0x110>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d007      	beq.n	8007b04 <TIM_OC2_SetConfig+0x74>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a2b      	ldr	r2, [pc, #172]	@ (8007ba4 <TIM_OC2_SetConfig+0x114>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d003      	beq.n	8007b04 <TIM_OC2_SetConfig+0x74>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a2a      	ldr	r2, [pc, #168]	@ (8007ba8 <TIM_OC2_SetConfig+0x118>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d10d      	bne.n	8007b20 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	011b      	lsls	r3, r3, #4
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba0 <TIM_OC2_SetConfig+0x110>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <TIM_OC2_SetConfig+0xc0>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ba4 <TIM_OC2_SetConfig+0x114>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d00f      	beq.n	8007b50 <TIM_OC2_SetConfig+0xc0>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a1e      	ldr	r2, [pc, #120]	@ (8007bac <TIM_OC2_SetConfig+0x11c>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d00b      	beq.n	8007b50 <TIM_OC2_SetConfig+0xc0>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb0 <TIM_OC2_SetConfig+0x120>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d007      	beq.n	8007b50 <TIM_OC2_SetConfig+0xc0>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a1c      	ldr	r2, [pc, #112]	@ (8007bb4 <TIM_OC2_SetConfig+0x124>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d003      	beq.n	8007b50 <TIM_OC2_SetConfig+0xc0>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a17      	ldr	r2, [pc, #92]	@ (8007ba8 <TIM_OC2_SetConfig+0x118>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d113      	bne.n	8007b78 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	621a      	str	r2, [r3, #32]
}
 8007b92:	bf00      	nop
 8007b94:	371c      	adds	r7, #28
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	40012c00 	.word	0x40012c00
 8007ba4:	40013400 	.word	0x40013400
 8007ba8:	40015000 	.word	0x40015000
 8007bac:	40014000 	.word	0x40014000
 8007bb0:	40014400 	.word	0x40014400
 8007bb4:	40014800 	.word	0x40014800

08007bb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a2b      	ldr	r2, [pc, #172]	@ (8007cc4 <TIM_OC3_SetConfig+0x10c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d007      	beq.n	8007c2a <TIM_OC3_SetConfig+0x72>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8007cc8 <TIM_OC3_SetConfig+0x110>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d003      	beq.n	8007c2a <TIM_OC3_SetConfig+0x72>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a29      	ldr	r2, [pc, #164]	@ (8007ccc <TIM_OC3_SetConfig+0x114>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d10d      	bne.n	8007c46 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a1e      	ldr	r2, [pc, #120]	@ (8007cc4 <TIM_OC3_SetConfig+0x10c>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d013      	beq.n	8007c76 <TIM_OC3_SetConfig+0xbe>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a1d      	ldr	r2, [pc, #116]	@ (8007cc8 <TIM_OC3_SetConfig+0x110>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00f      	beq.n	8007c76 <TIM_OC3_SetConfig+0xbe>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a1d      	ldr	r2, [pc, #116]	@ (8007cd0 <TIM_OC3_SetConfig+0x118>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00b      	beq.n	8007c76 <TIM_OC3_SetConfig+0xbe>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a1c      	ldr	r2, [pc, #112]	@ (8007cd4 <TIM_OC3_SetConfig+0x11c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d007      	beq.n	8007c76 <TIM_OC3_SetConfig+0xbe>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a1b      	ldr	r2, [pc, #108]	@ (8007cd8 <TIM_OC3_SetConfig+0x120>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d003      	beq.n	8007c76 <TIM_OC3_SetConfig+0xbe>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a16      	ldr	r2, [pc, #88]	@ (8007ccc <TIM_OC3_SetConfig+0x114>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d113      	bne.n	8007c9e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	621a      	str	r2, [r3, #32]
}
 8007cb8:	bf00      	nop
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	40012c00 	.word	0x40012c00
 8007cc8:	40013400 	.word	0x40013400
 8007ccc:	40015000 	.word	0x40015000
 8007cd0:	40014000 	.word	0x40014000
 8007cd4:	40014400 	.word	0x40014400
 8007cd8:	40014800 	.word	0x40014800

08007cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	031b      	lsls	r3, r3, #12
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8007dec <TIM_OC4_SetConfig+0x110>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d007      	beq.n	8007d50 <TIM_OC4_SetConfig+0x74>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a2b      	ldr	r2, [pc, #172]	@ (8007df0 <TIM_OC4_SetConfig+0x114>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d003      	beq.n	8007d50 <TIM_OC4_SetConfig+0x74>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8007df4 <TIM_OC4_SetConfig+0x118>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d10d      	bne.n	8007d6c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	031b      	lsls	r3, r3, #12
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8007dec <TIM_OC4_SetConfig+0x110>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d013      	beq.n	8007d9c <TIM_OC4_SetConfig+0xc0>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a1e      	ldr	r2, [pc, #120]	@ (8007df0 <TIM_OC4_SetConfig+0x114>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d00f      	beq.n	8007d9c <TIM_OC4_SetConfig+0xc0>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8007df8 <TIM_OC4_SetConfig+0x11c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00b      	beq.n	8007d9c <TIM_OC4_SetConfig+0xc0>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a1d      	ldr	r2, [pc, #116]	@ (8007dfc <TIM_OC4_SetConfig+0x120>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d007      	beq.n	8007d9c <TIM_OC4_SetConfig+0xc0>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8007e00 <TIM_OC4_SetConfig+0x124>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d003      	beq.n	8007d9c <TIM_OC4_SetConfig+0xc0>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a17      	ldr	r2, [pc, #92]	@ (8007df4 <TIM_OC4_SetConfig+0x118>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d113      	bne.n	8007dc4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007da2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007daa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	019b      	lsls	r3, r3, #6
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	019b      	lsls	r3, r3, #6
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	621a      	str	r2, [r3, #32]
}
 8007dde:	bf00      	nop
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	40012c00 	.word	0x40012c00
 8007df0:	40013400 	.word	0x40013400
 8007df4:	40015000 	.word	0x40015000
 8007df8:	40014000 	.word	0x40014000
 8007dfc:	40014400 	.word	0x40014400
 8007e00:	40014800 	.word	0x40014800

08007e04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	041b      	lsls	r3, r3, #16
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a19      	ldr	r2, [pc, #100]	@ (8007ec0 <TIM_OC5_SetConfig+0xbc>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d013      	beq.n	8007e86 <TIM_OC5_SetConfig+0x82>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a18      	ldr	r2, [pc, #96]	@ (8007ec4 <TIM_OC5_SetConfig+0xc0>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00f      	beq.n	8007e86 <TIM_OC5_SetConfig+0x82>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a17      	ldr	r2, [pc, #92]	@ (8007ec8 <TIM_OC5_SetConfig+0xc4>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d00b      	beq.n	8007e86 <TIM_OC5_SetConfig+0x82>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a16      	ldr	r2, [pc, #88]	@ (8007ecc <TIM_OC5_SetConfig+0xc8>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d007      	beq.n	8007e86 <TIM_OC5_SetConfig+0x82>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a15      	ldr	r2, [pc, #84]	@ (8007ed0 <TIM_OC5_SetConfig+0xcc>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d003      	beq.n	8007e86 <TIM_OC5_SetConfig+0x82>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a14      	ldr	r2, [pc, #80]	@ (8007ed4 <TIM_OC5_SetConfig+0xd0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d109      	bne.n	8007e9a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	021b      	lsls	r3, r3, #8
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	621a      	str	r2, [r3, #32]
}
 8007eb4:	bf00      	nop
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	40012c00 	.word	0x40012c00
 8007ec4:	40013400 	.word	0x40013400
 8007ec8:	40014000 	.word	0x40014000
 8007ecc:	40014400 	.word	0x40014400
 8007ed0:	40014800 	.word	0x40014800
 8007ed4:	40015000 	.word	0x40015000

08007ed8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	051b      	lsls	r3, r3, #20
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007f98 <TIM_OC6_SetConfig+0xc0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d013      	beq.n	8007f5c <TIM_OC6_SetConfig+0x84>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a19      	ldr	r2, [pc, #100]	@ (8007f9c <TIM_OC6_SetConfig+0xc4>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d00f      	beq.n	8007f5c <TIM_OC6_SetConfig+0x84>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a18      	ldr	r2, [pc, #96]	@ (8007fa0 <TIM_OC6_SetConfig+0xc8>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d00b      	beq.n	8007f5c <TIM_OC6_SetConfig+0x84>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a17      	ldr	r2, [pc, #92]	@ (8007fa4 <TIM_OC6_SetConfig+0xcc>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d007      	beq.n	8007f5c <TIM_OC6_SetConfig+0x84>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a16      	ldr	r2, [pc, #88]	@ (8007fa8 <TIM_OC6_SetConfig+0xd0>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d003      	beq.n	8007f5c <TIM_OC6_SetConfig+0x84>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a15      	ldr	r2, [pc, #84]	@ (8007fac <TIM_OC6_SetConfig+0xd4>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d109      	bne.n	8007f70 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	029b      	lsls	r3, r3, #10
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	621a      	str	r2, [r3, #32]
}
 8007f8a:	bf00      	nop
 8007f8c:	371c      	adds	r7, #28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	40012c00 	.word	0x40012c00
 8007f9c:	40013400 	.word	0x40013400
 8007fa0:	40014000 	.word	0x40014000
 8007fa4:	40014400 	.word	0x40014400
 8007fa8:	40014800 	.word	0x40014800
 8007fac:	40015000 	.word	0x40015000

08007fb0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fd0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fe2:	f023 0307 	bic.w	r3, r3, #7
 8007fe6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	4a52      	ldr	r2, [pc, #328]	@ (8008148 <TIM_SlaveTimer_SetConfig+0x198>)
 8008000:	4293      	cmp	r3, r2
 8008002:	f000 809a 	beq.w	800813a <TIM_SlaveTimer_SetConfig+0x18a>
 8008006:	4a50      	ldr	r2, [pc, #320]	@ (8008148 <TIM_SlaveTimer_SetConfig+0x198>)
 8008008:	4293      	cmp	r3, r2
 800800a:	f200 8093 	bhi.w	8008134 <TIM_SlaveTimer_SetConfig+0x184>
 800800e:	4a4f      	ldr	r2, [pc, #316]	@ (800814c <TIM_SlaveTimer_SetConfig+0x19c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	f000 8092 	beq.w	800813a <TIM_SlaveTimer_SetConfig+0x18a>
 8008016:	4a4d      	ldr	r2, [pc, #308]	@ (800814c <TIM_SlaveTimer_SetConfig+0x19c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	f200 808b 	bhi.w	8008134 <TIM_SlaveTimer_SetConfig+0x184>
 800801e:	4a4c      	ldr	r2, [pc, #304]	@ (8008150 <TIM_SlaveTimer_SetConfig+0x1a0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	f000 808a 	beq.w	800813a <TIM_SlaveTimer_SetConfig+0x18a>
 8008026:	4a4a      	ldr	r2, [pc, #296]	@ (8008150 <TIM_SlaveTimer_SetConfig+0x1a0>)
 8008028:	4293      	cmp	r3, r2
 800802a:	f200 8083 	bhi.w	8008134 <TIM_SlaveTimer_SetConfig+0x184>
 800802e:	4a49      	ldr	r2, [pc, #292]	@ (8008154 <TIM_SlaveTimer_SetConfig+0x1a4>)
 8008030:	4293      	cmp	r3, r2
 8008032:	f000 8082 	beq.w	800813a <TIM_SlaveTimer_SetConfig+0x18a>
 8008036:	4a47      	ldr	r2, [pc, #284]	@ (8008154 <TIM_SlaveTimer_SetConfig+0x1a4>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d87b      	bhi.n	8008134 <TIM_SlaveTimer_SetConfig+0x184>
 800803c:	4a46      	ldr	r2, [pc, #280]	@ (8008158 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d07b      	beq.n	800813a <TIM_SlaveTimer_SetConfig+0x18a>
 8008042:	4a45      	ldr	r2, [pc, #276]	@ (8008158 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d875      	bhi.n	8008134 <TIM_SlaveTimer_SetConfig+0x184>
 8008048:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800804c:	d075      	beq.n	800813a <TIM_SlaveTimer_SetConfig+0x18a>
 800804e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008052:	d86f      	bhi.n	8008134 <TIM_SlaveTimer_SetConfig+0x184>
 8008054:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008058:	d06f      	beq.n	800813a <TIM_SlaveTimer_SetConfig+0x18a>
 800805a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800805e:	d869      	bhi.n	8008134 <TIM_SlaveTimer_SetConfig+0x184>
 8008060:	2b70      	cmp	r3, #112	@ 0x70
 8008062:	d01a      	beq.n	800809a <TIM_SlaveTimer_SetConfig+0xea>
 8008064:	2b70      	cmp	r3, #112	@ 0x70
 8008066:	d865      	bhi.n	8008134 <TIM_SlaveTimer_SetConfig+0x184>
 8008068:	2b60      	cmp	r3, #96	@ 0x60
 800806a:	d059      	beq.n	8008120 <TIM_SlaveTimer_SetConfig+0x170>
 800806c:	2b60      	cmp	r3, #96	@ 0x60
 800806e:	d861      	bhi.n	8008134 <TIM_SlaveTimer_SetConfig+0x184>
 8008070:	2b50      	cmp	r3, #80	@ 0x50
 8008072:	d04b      	beq.n	800810c <TIM_SlaveTimer_SetConfig+0x15c>
 8008074:	2b50      	cmp	r3, #80	@ 0x50
 8008076:	d85d      	bhi.n	8008134 <TIM_SlaveTimer_SetConfig+0x184>
 8008078:	2b40      	cmp	r3, #64	@ 0x40
 800807a:	d019      	beq.n	80080b0 <TIM_SlaveTimer_SetConfig+0x100>
 800807c:	2b40      	cmp	r3, #64	@ 0x40
 800807e:	d859      	bhi.n	8008134 <TIM_SlaveTimer_SetConfig+0x184>
 8008080:	2b30      	cmp	r3, #48	@ 0x30
 8008082:	d05a      	beq.n	800813a <TIM_SlaveTimer_SetConfig+0x18a>
 8008084:	2b30      	cmp	r3, #48	@ 0x30
 8008086:	d855      	bhi.n	8008134 <TIM_SlaveTimer_SetConfig+0x184>
 8008088:	2b20      	cmp	r3, #32
 800808a:	d056      	beq.n	800813a <TIM_SlaveTimer_SetConfig+0x18a>
 800808c:	2b20      	cmp	r3, #32
 800808e:	d851      	bhi.n	8008134 <TIM_SlaveTimer_SetConfig+0x184>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d052      	beq.n	800813a <TIM_SlaveTimer_SetConfig+0x18a>
 8008094:	2b10      	cmp	r3, #16
 8008096:	d050      	beq.n	800813a <TIM_SlaveTimer_SetConfig+0x18a>
 8008098:	e04c      	b.n	8008134 <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80080aa:	f000 f9fd 	bl	80084a8 <TIM_ETR_SetConfig>
      break;
 80080ae:	e045      	b.n	800813c <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b05      	cmp	r3, #5
 80080b6:	d004      	beq.n	80080c2 <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80080bc:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80080c0:	d101      	bne.n	80080c6 <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e03b      	b.n	800813e <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6a1a      	ldr	r2, [r3, #32]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0201 	bic.w	r2, r2, #1
 80080dc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080ec:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	621a      	str	r2, [r3, #32]
      break;
 800810a:	e017      	b.n	800813c <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008118:	461a      	mov	r2, r3
 800811a:	f000 f893 	bl	8008244 <TIM_TI1_ConfigInputStage>
      break;
 800811e:	e00d      	b.n	800813c <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800812c:	461a      	mov	r2, r3
 800812e:	f000 f8f5 	bl	800831c <TIM_TI2_ConfigInputStage>
      break;
 8008132:	e003      	b.n	800813c <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	75fb      	strb	r3, [r7, #23]
      break;
 8008138:	e000      	b.n	800813c <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 800813a:	bf00      	nop
  }

  return status;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	00100070 	.word	0x00100070
 800814c:	00100050 	.word	0x00100050
 8008150:	00100040 	.word	0x00100040
 8008154:	00100030 	.word	0x00100030
 8008158:	00100020 	.word	0x00100020

0800815c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800815c:	b480      	push	{r7}
 800815e:	b087      	sub	sp, #28
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	f023 0201 	bic.w	r2, r3, #1
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	4a28      	ldr	r2, [pc, #160]	@ (8008228 <TIM_TI1_SetConfig+0xcc>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d01b      	beq.n	80081c2 <TIM_TI1_SetConfig+0x66>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008190:	d017      	beq.n	80081c2 <TIM_TI1_SetConfig+0x66>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4a25      	ldr	r2, [pc, #148]	@ (800822c <TIM_TI1_SetConfig+0xd0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d013      	beq.n	80081c2 <TIM_TI1_SetConfig+0x66>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4a24      	ldr	r2, [pc, #144]	@ (8008230 <TIM_TI1_SetConfig+0xd4>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00f      	beq.n	80081c2 <TIM_TI1_SetConfig+0x66>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4a23      	ldr	r2, [pc, #140]	@ (8008234 <TIM_TI1_SetConfig+0xd8>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00b      	beq.n	80081c2 <TIM_TI1_SetConfig+0x66>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4a22      	ldr	r2, [pc, #136]	@ (8008238 <TIM_TI1_SetConfig+0xdc>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d007      	beq.n	80081c2 <TIM_TI1_SetConfig+0x66>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4a21      	ldr	r2, [pc, #132]	@ (800823c <TIM_TI1_SetConfig+0xe0>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d003      	beq.n	80081c2 <TIM_TI1_SetConfig+0x66>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4a20      	ldr	r2, [pc, #128]	@ (8008240 <TIM_TI1_SetConfig+0xe4>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d101      	bne.n	80081c6 <TIM_TI1_SetConfig+0x6a>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e000      	b.n	80081c8 <TIM_TI1_SetConfig+0x6c>
 80081c6:	2300      	movs	r3, #0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d008      	beq.n	80081de <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	f023 0303 	bic.w	r3, r3, #3
 80081d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4313      	orrs	r3, r2
 80081da:	617b      	str	r3, [r7, #20]
 80081dc:	e003      	b.n	80081e6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f043 0301 	orr.w	r3, r3, #1
 80081e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f023 030a 	bic.w	r3, r3, #10
 8008200:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f003 030a 	and.w	r3, r3, #10
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4313      	orrs	r3, r2
 800820c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	621a      	str	r2, [r3, #32]
}
 800821a:	bf00      	nop
 800821c:	371c      	adds	r7, #28
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	40012c00 	.word	0x40012c00
 800822c:	40000400 	.word	0x40000400
 8008230:	40000800 	.word	0x40000800
 8008234:	40000c00 	.word	0x40000c00
 8008238:	40013400 	.word	0x40013400
 800823c:	40014000 	.word	0x40014000
 8008240:	40015000 	.word	0x40015000

08008244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	f023 0201 	bic.w	r2, r3, #1
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800826e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	011b      	lsls	r3, r3, #4
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	4313      	orrs	r3, r2
 8008278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f023 030a 	bic.w	r3, r3, #10
 8008280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	4313      	orrs	r3, r2
 8008288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	621a      	str	r2, [r3, #32]
}
 8008296:	bf00      	nop
 8008298:	371c      	adds	r7, #28
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b087      	sub	sp, #28
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	60f8      	str	r0, [r7, #12]
 80082aa:	60b9      	str	r1, [r7, #8]
 80082ac:	607a      	str	r2, [r7, #4]
 80082ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	f023 0210 	bic.w	r2, r3, #16
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	021b      	lsls	r3, r3, #8
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	031b      	lsls	r3, r3, #12
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082f4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	011b      	lsls	r3, r3, #4
 80082fa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	4313      	orrs	r3, r2
 8008302:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	621a      	str	r2, [r3, #32]
}
 8008310:	bf00      	nop
 8008312:	371c      	adds	r7, #28
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6a1b      	ldr	r3, [r3, #32]
 800832c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	f023 0210 	bic.w	r2, r3, #16
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	031b      	lsls	r3, r3, #12
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	4313      	orrs	r3, r2
 8008350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008358:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	621a      	str	r2, [r3, #32]
}
 8008370:	bf00      	nop
 8008372:	371c      	adds	r7, #28
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800837c:	b480      	push	{r7}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
 8008388:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	69db      	ldr	r3, [r3, #28]
 80083a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f023 0303 	bic.w	r3, r3, #3
 80083a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	011b      	lsls	r3, r3, #4
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80083cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	021b      	lsls	r3, r3, #8
 80083d2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	4313      	orrs	r3, r2
 80083da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	621a      	str	r2, [r3, #32]
}
 80083e8:	bf00      	nop
 80083ea:	371c      	adds	r7, #28
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008420:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	021b      	lsls	r3, r3, #8
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	4313      	orrs	r3, r2
 800842a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008432:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	031b      	lsls	r3, r3, #12
 8008438:	b29b      	uxth	r3, r3
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	4313      	orrs	r3, r2
 800843e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008446:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	031b      	lsls	r3, r3, #12
 800844c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	4313      	orrs	r3, r2
 8008454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	621a      	str	r2, [r3, #32]
}
 8008462:	bf00      	nop
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800846e:	b480      	push	{r7}
 8008470:	b085      	sub	sp, #20
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4313      	orrs	r3, r2
 8008490:	f043 0307 	orr.w	r3, r3, #7
 8008494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	609a      	str	r2, [r3, #8]
}
 800849c:	bf00      	nop
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b087      	sub	sp, #28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	021a      	lsls	r2, r3, #8
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	431a      	orrs	r2, r3
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	609a      	str	r2, [r3, #8]
}
 80084dc:	bf00      	nop
 80084de:	371c      	adds	r7, #28
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08a      	sub	sp, #40	@ 0x28
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e0a0      	b.n	800863e <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d106      	bne.n	8008516 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f898 	bl	8008646 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2202      	movs	r2, #2
 800851a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	3304      	adds	r3, #4
 8008526:	4619      	mov	r1, r3
 8008528:	4610      	mov	r0, r2
 800852a:	f7ff f963 	bl	80077f4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	6819      	ldr	r1, [r3, #0]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	2203      	movs	r2, #3
 800853c:	f7ff fe0e 	bl	800815c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 020c 	bic.w	r2, r2, #12
 800854e:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6999      	ldr	r1, [r3, #24]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	685a      	ldr	r2, [r3, #4]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008570:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	6812      	ldr	r2, [r2, #0]
 800857c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008584:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	689a      	ldr	r2, [r3, #8]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008594:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6812      	ldr	r2, [r2, #0]
 80085a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085a4:	f023 0307 	bic.w	r3, r3, #7
 80085a8:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	689a      	ldr	r2, [r3, #8]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f042 0204 	orr.w	r2, r2, #4
 80085b8:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80085ba:	2300      	movs	r3, #0
 80085bc:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80085be:	2300      	movs	r3, #0
 80085c0:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80085c2:	2370      	movs	r3, #112	@ 0x70
 80085c4:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80085c6:	2300      	movs	r3, #0
 80085c8:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80085ca:	2300      	movs	r3, #0
 80085cc:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80085ce:	2300      	movs	r3, #0
 80085d0:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f107 020c 	add.w	r2, r7, #12
 80085e0:	4611      	mov	r1, r2
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7ff fa54 	bl	8007a90 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	6812      	ldr	r2, [r2, #0]
 80085f2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80085f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085fa:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 800860a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3728      	adds	r7, #40	@ 0x28
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
	...

0800865c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800866c:	2b01      	cmp	r3, #1
 800866e:	d101      	bne.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008670:	2302      	movs	r3, #2
 8008672:	e074      	b.n	800875e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2202      	movs	r2, #2
 8008680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a34      	ldr	r2, [pc, #208]	@ (800876c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d009      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a33      	ldr	r2, [pc, #204]	@ (8008770 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d004      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a31      	ldr	r2, [pc, #196]	@ (8008774 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d108      	bne.n	80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80086b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80086ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a21      	ldr	r2, [pc, #132]	@ (800876c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d022      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086f4:	d01d      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a1f      	ldr	r2, [pc, #124]	@ (8008778 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d018      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a1d      	ldr	r2, [pc, #116]	@ (800877c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d013      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a1c      	ldr	r2, [pc, #112]	@ (8008780 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d00e      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a15      	ldr	r2, [pc, #84]	@ (8008770 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d009      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a18      	ldr	r2, [pc, #96]	@ (8008784 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d004      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a11      	ldr	r2, [pc, #68]	@ (8008774 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d10c      	bne.n	800874c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	4313      	orrs	r3, r2
 8008742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	40012c00 	.word	0x40012c00
 8008770:	40013400 	.word	0x40013400
 8008774:	40015000 	.word	0x40015000
 8008778:	40000400 	.word	0x40000400
 800877c:	40000800 	.word	0x40000800
 8008780:	40000c00 	.word	0x40000c00
 8008784:	40014000 	.word	0x40014000

08008788 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800879c:	2b01      	cmp	r3, #1
 800879e:	d101      	bne.n	80087a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80087a0:	2302      	movs	r3, #2
 80087a2:	e078      	b.n	8008896 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800880a:	4313      	orrs	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	041b      	lsls	r3, r3, #16
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	69db      	ldr	r3, [r3, #28]
 8008828:	4313      	orrs	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a1c      	ldr	r2, [pc, #112]	@ (80088a4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d009      	beq.n	800884a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a1b      	ldr	r2, [pc, #108]	@ (80088a8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d004      	beq.n	800884a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a19      	ldr	r2, [pc, #100]	@ (80088ac <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d11c      	bne.n	8008884 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008854:	051b      	lsls	r3, r3, #20
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	4313      	orrs	r3, r2
 8008866:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008872:	4313      	orrs	r3, r2
 8008874:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008880:	4313      	orrs	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	40012c00 	.word	0x40012c00
 80088a8:	40013400 	.word	0x40013400
 80088ac:	40015000 	.word	0x40015000

080088b0 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b08b      	sub	sp, #44	@ 0x2c
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d101      	bne.n	80088d0 <HAL_TIMEx_ConfigBreakInput+0x20>
 80088cc:	2302      	movs	r3, #2
 80088ce:	e10b      	b.n	8008ae8 <HAL_TIMEx_ConfigBreakInput+0x238>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b80      	cmp	r3, #128	@ 0x80
 80088de:	f000 8096 	beq.w	8008a0e <HAL_TIMEx_ConfigBreakInput+0x15e>
 80088e2:	2b80      	cmp	r3, #128	@ 0x80
 80088e4:	f200 809c 	bhi.w	8008a20 <HAL_TIMEx_ConfigBreakInput+0x170>
 80088e8:	2b20      	cmp	r3, #32
 80088ea:	d849      	bhi.n	8008980 <HAL_TIMEx_ConfigBreakInput+0xd0>
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 8097 	beq.w	8008a20 <HAL_TIMEx_ConfigBreakInput+0x170>
 80088f2:	3b01      	subs	r3, #1
 80088f4:	2b1f      	cmp	r3, #31
 80088f6:	f200 8093 	bhi.w	8008a20 <HAL_TIMEx_ConfigBreakInput+0x170>
 80088fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008900 <HAL_TIMEx_ConfigBreakInput+0x50>)
 80088fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008900:	08008987 	.word	0x08008987
 8008904:	0800899b 	.word	0x0800899b
 8008908:	08008a21 	.word	0x08008a21
 800890c:	080089af 	.word	0x080089af
 8008910:	08008a21 	.word	0x08008a21
 8008914:	08008a21 	.word	0x08008a21
 8008918:	08008a21 	.word	0x08008a21
 800891c:	080089c3 	.word	0x080089c3
 8008920:	08008a21 	.word	0x08008a21
 8008924:	08008a21 	.word	0x08008a21
 8008928:	08008a21 	.word	0x08008a21
 800892c:	08008a21 	.word	0x08008a21
 8008930:	08008a21 	.word	0x08008a21
 8008934:	08008a21 	.word	0x08008a21
 8008938:	08008a21 	.word	0x08008a21
 800893c:	080089d7 	.word	0x080089d7
 8008940:	08008a21 	.word	0x08008a21
 8008944:	08008a21 	.word	0x08008a21
 8008948:	08008a21 	.word	0x08008a21
 800894c:	08008a21 	.word	0x08008a21
 8008950:	08008a21 	.word	0x08008a21
 8008954:	08008a21 	.word	0x08008a21
 8008958:	08008a21 	.word	0x08008a21
 800895c:	08008a21 	.word	0x08008a21
 8008960:	08008a21 	.word	0x08008a21
 8008964:	08008a21 	.word	0x08008a21
 8008968:	08008a21 	.word	0x08008a21
 800896c:	08008a21 	.word	0x08008a21
 8008970:	08008a21 	.word	0x08008a21
 8008974:	08008a21 	.word	0x08008a21
 8008978:	08008a21 	.word	0x08008a21
 800897c:	080089eb 	.word	0x080089eb
 8008980:	2b40      	cmp	r3, #64	@ 0x40
 8008982:	d03b      	beq.n	80089fc <HAL_TIMEx_ConfigBreakInput+0x14c>
 8008984:	e04c      	b.n	8008a20 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8008986:	2301      	movs	r3, #1
 8008988:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800898a:	2300      	movs	r3, #0
 800898c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800898e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008992:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008994:	2309      	movs	r3, #9
 8008996:	617b      	str	r3, [r7, #20]
      break;
 8008998:	e04b      	b.n	8008a32 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800899a:	2302      	movs	r3, #2
 800899c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800899e:	2301      	movs	r3, #1
 80089a0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 80089a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089a6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 80089a8:	230a      	movs	r3, #10
 80089aa:	617b      	str	r3, [r7, #20]
      break;
 80089ac:	e041      	b.n	8008a32 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP2)
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 80089ae:	2304      	movs	r3, #4
 80089b0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 80089b2:	2302      	movs	r3, #2
 80089b4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 80089b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80089ba:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80089bc:	230b      	movs	r3, #11
 80089be:	617b      	str	r3, [r7, #20]
      break;
 80089c0:	e037      	b.n	8008a32 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP2 */
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 80089c2:	2308      	movs	r3, #8
 80089c4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 80089c6:	2303      	movs	r3, #3
 80089c8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 80089ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089ce:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 80089d0:	230c      	movs	r3, #12
 80089d2:	617b      	str	r3, [r7, #20]
      break;
 80089d4:	e02d      	b.n	8008a32 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP4)
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 80089d6:	2310      	movs	r3, #16
 80089d8:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 80089da:	2304      	movs	r3, #4
 80089dc:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 80089de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80089e2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 80089e4:	230d      	movs	r3, #13
 80089e6:	617b      	str	r3, [r7, #20]
      break;
 80089e8:	e023      	b.n	8008a32 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP4 */
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 80089ea:	2320      	movs	r3, #32
 80089ec:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 80089ee:	2305      	movs	r3, #5
 80089f0:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	617b      	str	r3, [r7, #20]
      break;
 80089fa:	e01a      	b.n	8008a32 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 80089fc:	2340      	movs	r3, #64	@ 0x40
 80089fe:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8008a00:	2306      	movs	r3, #6
 8008a02:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	617b      	str	r3, [r7, #20]
      break;
 8008a0c:	e011      	b.n	8008a32 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 8008a0e:	2380      	movs	r3, #128	@ 0x80
 8008a10:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8008a12:	2307      	movs	r3, #7
 8008a14:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	617b      	str	r3, [r7, #20]
      break;
 8008a1e:	e008      	b.n	8008a32 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	617b      	str	r3, [r7, #20]
      break;
 8008a30:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d003      	beq.n	8008a40 <HAL_TIMEx_ConfigBreakInput+0x190>
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d025      	beq.n	8008a8a <HAL_TIMEx_ConfigBreakInput+0x1da>
 8008a3e:	e049      	b.n	8008ad4 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a46:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	43db      	mvns	r3, r3
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	409a      	lsls	r2, r3
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	43db      	mvns	r3, r3
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	689a      	ldr	r2, [r3, #8]
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	409a      	lsls	r2, r3
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	4013      	ands	r3, r2
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8008a88:	e028      	b.n	8008adc <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a90:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	43db      	mvns	r3, r3
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	409a      	lsls	r2, r3
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	43db      	mvns	r3, r3
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689a      	ldr	r2, [r3, #8]
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	409a      	lsls	r2, r3
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8008ad2:	e003      	b.n	8008adc <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008ada:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	372c      	adds	r7, #44	@ 0x2c
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e042      	b.n	8008b8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d106      	bne.n	8008b1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7fa f837 	bl	8002b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2224      	movs	r2, #36	@ 0x24
 8008b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f022 0201 	bic.w	r2, r2, #1
 8008b34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fbb2 	bl	80092a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f8b3 	bl	8008cb0 <UART_SetConfig>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d101      	bne.n	8008b54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e01b      	b.n	8008b8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	685a      	ldr	r2, [r3, #4]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	689a      	ldr	r2, [r3, #8]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f042 0201 	orr.w	r2, r2, #1
 8008b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fc31 	bl	80093ec <UART_CheckIdleState>
 8008b8a:	4603      	mov	r3, r0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08a      	sub	sp, #40	@ 0x28
 8008b98:	af02      	add	r7, sp, #8
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008baa:	2b20      	cmp	r3, #32
 8008bac:	d17b      	bne.n	8008ca6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <HAL_UART_Transmit+0x26>
 8008bb4:	88fb      	ldrh	r3, [r7, #6]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e074      	b.n	8008ca8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2221      	movs	r2, #33	@ 0x21
 8008bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bce:	f7fa f991 	bl	8002ef4 <HAL_GetTick>
 8008bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	88fa      	ldrh	r2, [r7, #6]
 8008bd8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	88fa      	ldrh	r2, [r7, #6]
 8008be0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bec:	d108      	bne.n	8008c00 <HAL_UART_Transmit+0x6c>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d104      	bne.n	8008c00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	61bb      	str	r3, [r7, #24]
 8008bfe:	e003      	b.n	8008c08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c08:	e030      	b.n	8008c6c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2200      	movs	r2, #0
 8008c12:	2180      	movs	r1, #128	@ 0x80
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 fc93 	bl	8009540 <UART_WaitOnFlagUntilTimeout>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d005      	beq.n	8008c2c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2220      	movs	r2, #32
 8008c24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e03d      	b.n	8008ca8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10b      	bne.n	8008c4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c40:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	3302      	adds	r3, #2
 8008c46:	61bb      	str	r3, [r7, #24]
 8008c48:	e007      	b.n	8008c5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	3301      	adds	r3, #1
 8008c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	3b01      	subs	r3, #1
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1c8      	bne.n	8008c0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2140      	movs	r1, #64	@ 0x40
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 fc5c 	bl	8009540 <UART_WaitOnFlagUntilTimeout>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d005      	beq.n	8008c9a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2220      	movs	r2, #32
 8008c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e006      	b.n	8008ca8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	e000      	b.n	8008ca8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008ca6:	2302      	movs	r3, #2
  }
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3720      	adds	r7, #32
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cb4:	b08c      	sub	sp, #48	@ 0x30
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4baa      	ldr	r3, [pc, #680]	@ (8008f88 <UART_SetConfig+0x2d8>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	6812      	ldr	r2, [r2, #0]
 8008ce6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ce8:	430b      	orrs	r3, r1
 8008cea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a9f      	ldr	r2, [pc, #636]	@ (8008f8c <UART_SetConfig+0x2dc>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d004      	beq.n	8008d1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008d26:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	6812      	ldr	r2, [r2, #0]
 8008d2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d30:	430b      	orrs	r3, r1
 8008d32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3a:	f023 010f 	bic.w	r1, r3, #15
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a90      	ldr	r2, [pc, #576]	@ (8008f90 <UART_SetConfig+0x2e0>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d125      	bne.n	8008da0 <UART_SetConfig+0xf0>
 8008d54:	4b8f      	ldr	r3, [pc, #572]	@ (8008f94 <UART_SetConfig+0x2e4>)
 8008d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d81a      	bhi.n	8008d98 <UART_SetConfig+0xe8>
 8008d62:	a201      	add	r2, pc, #4	@ (adr r2, 8008d68 <UART_SetConfig+0xb8>)
 8008d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d68:	08008d79 	.word	0x08008d79
 8008d6c:	08008d89 	.word	0x08008d89
 8008d70:	08008d81 	.word	0x08008d81
 8008d74:	08008d91 	.word	0x08008d91
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d7e:	e116      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008d80:	2302      	movs	r3, #2
 8008d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d86:	e112      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008d88:	2304      	movs	r3, #4
 8008d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d8e:	e10e      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008d90:	2308      	movs	r3, #8
 8008d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d96:	e10a      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008d98:	2310      	movs	r3, #16
 8008d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d9e:	e106      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a7c      	ldr	r2, [pc, #496]	@ (8008f98 <UART_SetConfig+0x2e8>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d138      	bne.n	8008e1c <UART_SetConfig+0x16c>
 8008daa:	4b7a      	ldr	r3, [pc, #488]	@ (8008f94 <UART_SetConfig+0x2e4>)
 8008dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008db0:	f003 030c 	and.w	r3, r3, #12
 8008db4:	2b0c      	cmp	r3, #12
 8008db6:	d82d      	bhi.n	8008e14 <UART_SetConfig+0x164>
 8008db8:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc0 <UART_SetConfig+0x110>)
 8008dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dbe:	bf00      	nop
 8008dc0:	08008df5 	.word	0x08008df5
 8008dc4:	08008e15 	.word	0x08008e15
 8008dc8:	08008e15 	.word	0x08008e15
 8008dcc:	08008e15 	.word	0x08008e15
 8008dd0:	08008e05 	.word	0x08008e05
 8008dd4:	08008e15 	.word	0x08008e15
 8008dd8:	08008e15 	.word	0x08008e15
 8008ddc:	08008e15 	.word	0x08008e15
 8008de0:	08008dfd 	.word	0x08008dfd
 8008de4:	08008e15 	.word	0x08008e15
 8008de8:	08008e15 	.word	0x08008e15
 8008dec:	08008e15 	.word	0x08008e15
 8008df0:	08008e0d 	.word	0x08008e0d
 8008df4:	2300      	movs	r3, #0
 8008df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dfa:	e0d8      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e02:	e0d4      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e04:	2304      	movs	r3, #4
 8008e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e0a:	e0d0      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e0c:	2308      	movs	r3, #8
 8008e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e12:	e0cc      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e14:	2310      	movs	r3, #16
 8008e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e1a:	e0c8      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a5e      	ldr	r2, [pc, #376]	@ (8008f9c <UART_SetConfig+0x2ec>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d125      	bne.n	8008e72 <UART_SetConfig+0x1c2>
 8008e26:	4b5b      	ldr	r3, [pc, #364]	@ (8008f94 <UART_SetConfig+0x2e4>)
 8008e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008e30:	2b30      	cmp	r3, #48	@ 0x30
 8008e32:	d016      	beq.n	8008e62 <UART_SetConfig+0x1b2>
 8008e34:	2b30      	cmp	r3, #48	@ 0x30
 8008e36:	d818      	bhi.n	8008e6a <UART_SetConfig+0x1ba>
 8008e38:	2b20      	cmp	r3, #32
 8008e3a:	d00a      	beq.n	8008e52 <UART_SetConfig+0x1a2>
 8008e3c:	2b20      	cmp	r3, #32
 8008e3e:	d814      	bhi.n	8008e6a <UART_SetConfig+0x1ba>
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <UART_SetConfig+0x19a>
 8008e44:	2b10      	cmp	r3, #16
 8008e46:	d008      	beq.n	8008e5a <UART_SetConfig+0x1aa>
 8008e48:	e00f      	b.n	8008e6a <UART_SetConfig+0x1ba>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e50:	e0ad      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e52:	2302      	movs	r3, #2
 8008e54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e58:	e0a9      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e5a:	2304      	movs	r3, #4
 8008e5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e60:	e0a5      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e62:	2308      	movs	r3, #8
 8008e64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e68:	e0a1      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e6a:	2310      	movs	r3, #16
 8008e6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e70:	e09d      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a4a      	ldr	r2, [pc, #296]	@ (8008fa0 <UART_SetConfig+0x2f0>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d125      	bne.n	8008ec8 <UART_SetConfig+0x218>
 8008e7c:	4b45      	ldr	r3, [pc, #276]	@ (8008f94 <UART_SetConfig+0x2e4>)
 8008e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008e86:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e88:	d016      	beq.n	8008eb8 <UART_SetConfig+0x208>
 8008e8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e8c:	d818      	bhi.n	8008ec0 <UART_SetConfig+0x210>
 8008e8e:	2b80      	cmp	r3, #128	@ 0x80
 8008e90:	d00a      	beq.n	8008ea8 <UART_SetConfig+0x1f8>
 8008e92:	2b80      	cmp	r3, #128	@ 0x80
 8008e94:	d814      	bhi.n	8008ec0 <UART_SetConfig+0x210>
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d002      	beq.n	8008ea0 <UART_SetConfig+0x1f0>
 8008e9a:	2b40      	cmp	r3, #64	@ 0x40
 8008e9c:	d008      	beq.n	8008eb0 <UART_SetConfig+0x200>
 8008e9e:	e00f      	b.n	8008ec0 <UART_SetConfig+0x210>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ea6:	e082      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eae:	e07e      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008eb0:	2304      	movs	r3, #4
 8008eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eb6:	e07a      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008eb8:	2308      	movs	r3, #8
 8008eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ebe:	e076      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ec6:	e072      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a35      	ldr	r2, [pc, #212]	@ (8008fa4 <UART_SetConfig+0x2f4>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d12a      	bne.n	8008f28 <UART_SetConfig+0x278>
 8008ed2:	4b30      	ldr	r3, [pc, #192]	@ (8008f94 <UART_SetConfig+0x2e4>)
 8008ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008edc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ee0:	d01a      	beq.n	8008f18 <UART_SetConfig+0x268>
 8008ee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ee6:	d81b      	bhi.n	8008f20 <UART_SetConfig+0x270>
 8008ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eec:	d00c      	beq.n	8008f08 <UART_SetConfig+0x258>
 8008eee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ef2:	d815      	bhi.n	8008f20 <UART_SetConfig+0x270>
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d003      	beq.n	8008f00 <UART_SetConfig+0x250>
 8008ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008efc:	d008      	beq.n	8008f10 <UART_SetConfig+0x260>
 8008efe:	e00f      	b.n	8008f20 <UART_SetConfig+0x270>
 8008f00:	2300      	movs	r3, #0
 8008f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f06:	e052      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f08:	2302      	movs	r3, #2
 8008f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f0e:	e04e      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f10:	2304      	movs	r3, #4
 8008f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f16:	e04a      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f18:	2308      	movs	r3, #8
 8008f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f1e:	e046      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f20:	2310      	movs	r3, #16
 8008f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f26:	e042      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a17      	ldr	r2, [pc, #92]	@ (8008f8c <UART_SetConfig+0x2dc>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d13a      	bne.n	8008fa8 <UART_SetConfig+0x2f8>
 8008f32:	4b18      	ldr	r3, [pc, #96]	@ (8008f94 <UART_SetConfig+0x2e4>)
 8008f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f40:	d01a      	beq.n	8008f78 <UART_SetConfig+0x2c8>
 8008f42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f46:	d81b      	bhi.n	8008f80 <UART_SetConfig+0x2d0>
 8008f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f4c:	d00c      	beq.n	8008f68 <UART_SetConfig+0x2b8>
 8008f4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f52:	d815      	bhi.n	8008f80 <UART_SetConfig+0x2d0>
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d003      	beq.n	8008f60 <UART_SetConfig+0x2b0>
 8008f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f5c:	d008      	beq.n	8008f70 <UART_SetConfig+0x2c0>
 8008f5e:	e00f      	b.n	8008f80 <UART_SetConfig+0x2d0>
 8008f60:	2300      	movs	r3, #0
 8008f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f66:	e022      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f6e:	e01e      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f70:	2304      	movs	r3, #4
 8008f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f76:	e01a      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f78:	2308      	movs	r3, #8
 8008f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f7e:	e016      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f80:	2310      	movs	r3, #16
 8008f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f86:	e012      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f88:	cfff69f3 	.word	0xcfff69f3
 8008f8c:	40008000 	.word	0x40008000
 8008f90:	40013800 	.word	0x40013800
 8008f94:	40021000 	.word	0x40021000
 8008f98:	40004400 	.word	0x40004400
 8008f9c:	40004800 	.word	0x40004800
 8008fa0:	40004c00 	.word	0x40004c00
 8008fa4:	40005000 	.word	0x40005000
 8008fa8:	2310      	movs	r3, #16
 8008faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4aae      	ldr	r2, [pc, #696]	@ (800926c <UART_SetConfig+0x5bc>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	f040 8097 	bne.w	80090e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008fbe:	2b08      	cmp	r3, #8
 8008fc0:	d823      	bhi.n	800900a <UART_SetConfig+0x35a>
 8008fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc8 <UART_SetConfig+0x318>)
 8008fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc8:	08008fed 	.word	0x08008fed
 8008fcc:	0800900b 	.word	0x0800900b
 8008fd0:	08008ff5 	.word	0x08008ff5
 8008fd4:	0800900b 	.word	0x0800900b
 8008fd8:	08008ffb 	.word	0x08008ffb
 8008fdc:	0800900b 	.word	0x0800900b
 8008fe0:	0800900b 	.word	0x0800900b
 8008fe4:	0800900b 	.word	0x0800900b
 8008fe8:	08009003 	.word	0x08009003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fec:	f7fd fafe 	bl	80065ec <HAL_RCC_GetPCLK1Freq>
 8008ff0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ff2:	e010      	b.n	8009016 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ff4:	4b9e      	ldr	r3, [pc, #632]	@ (8009270 <UART_SetConfig+0x5c0>)
 8008ff6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ff8:	e00d      	b.n	8009016 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ffa:	f7fd fa89 	bl	8006510 <HAL_RCC_GetSysClockFreq>
 8008ffe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009000:	e009      	b.n	8009016 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009002:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009006:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009008:	e005      	b.n	8009016 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800900a:	2300      	movs	r3, #0
 800900c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009014:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 8130 	beq.w	800927e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009022:	4a94      	ldr	r2, [pc, #592]	@ (8009274 <UART_SetConfig+0x5c4>)
 8009024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009028:	461a      	mov	r2, r3
 800902a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009030:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	4613      	mov	r3, r2
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	4413      	add	r3, r2
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	429a      	cmp	r2, r3
 8009040:	d305      	bcc.n	800904e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	429a      	cmp	r2, r3
 800904c:	d903      	bls.n	8009056 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009054:	e113      	b.n	800927e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009058:	2200      	movs	r2, #0
 800905a:	60bb      	str	r3, [r7, #8]
 800905c:	60fa      	str	r2, [r7, #12]
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009062:	4a84      	ldr	r2, [pc, #528]	@ (8009274 <UART_SetConfig+0x5c4>)
 8009064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009068:	b29b      	uxth	r3, r3
 800906a:	2200      	movs	r2, #0
 800906c:	603b      	str	r3, [r7, #0]
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009074:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009078:	f7f7 f92a 	bl	80002d0 <__aeabi_uldivmod>
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	4610      	mov	r0, r2
 8009082:	4619      	mov	r1, r3
 8009084:	f04f 0200 	mov.w	r2, #0
 8009088:	f04f 0300 	mov.w	r3, #0
 800908c:	020b      	lsls	r3, r1, #8
 800908e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009092:	0202      	lsls	r2, r0, #8
 8009094:	6979      	ldr	r1, [r7, #20]
 8009096:	6849      	ldr	r1, [r1, #4]
 8009098:	0849      	lsrs	r1, r1, #1
 800909a:	2000      	movs	r0, #0
 800909c:	460c      	mov	r4, r1
 800909e:	4605      	mov	r5, r0
 80090a0:	eb12 0804 	adds.w	r8, r2, r4
 80090a4:	eb43 0905 	adc.w	r9, r3, r5
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	469a      	mov	sl, r3
 80090b0:	4693      	mov	fp, r2
 80090b2:	4652      	mov	r2, sl
 80090b4:	465b      	mov	r3, fp
 80090b6:	4640      	mov	r0, r8
 80090b8:	4649      	mov	r1, r9
 80090ba:	f7f7 f909 	bl	80002d0 <__aeabi_uldivmod>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4613      	mov	r3, r2
 80090c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090cc:	d308      	bcc.n	80090e0 <UART_SetConfig+0x430>
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090d4:	d204      	bcs.n	80090e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6a3a      	ldr	r2, [r7, #32]
 80090dc:	60da      	str	r2, [r3, #12]
 80090de:	e0ce      	b.n	800927e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090e6:	e0ca      	b.n	800927e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	69db      	ldr	r3, [r3, #28]
 80090ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090f0:	d166      	bne.n	80091c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80090f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090f6:	2b08      	cmp	r3, #8
 80090f8:	d827      	bhi.n	800914a <UART_SetConfig+0x49a>
 80090fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009100 <UART_SetConfig+0x450>)
 80090fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009100:	08009125 	.word	0x08009125
 8009104:	0800912d 	.word	0x0800912d
 8009108:	08009135 	.word	0x08009135
 800910c:	0800914b 	.word	0x0800914b
 8009110:	0800913b 	.word	0x0800913b
 8009114:	0800914b 	.word	0x0800914b
 8009118:	0800914b 	.word	0x0800914b
 800911c:	0800914b 	.word	0x0800914b
 8009120:	08009143 	.word	0x08009143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009124:	f7fd fa62 	bl	80065ec <HAL_RCC_GetPCLK1Freq>
 8009128:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800912a:	e014      	b.n	8009156 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800912c:	f7fd fa74 	bl	8006618 <HAL_RCC_GetPCLK2Freq>
 8009130:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009132:	e010      	b.n	8009156 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009134:	4b4e      	ldr	r3, [pc, #312]	@ (8009270 <UART_SetConfig+0x5c0>)
 8009136:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009138:	e00d      	b.n	8009156 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800913a:	f7fd f9e9 	bl	8006510 <HAL_RCC_GetSysClockFreq>
 800913e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009140:	e009      	b.n	8009156 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009146:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009148:	e005      	b.n	8009156 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009154:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 8090 	beq.w	800927e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009162:	4a44      	ldr	r2, [pc, #272]	@ (8009274 <UART_SetConfig+0x5c4>)
 8009164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009168:	461a      	mov	r2, r3
 800916a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009170:	005a      	lsls	r2, r3, #1
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	085b      	lsrs	r3, r3, #1
 8009178:	441a      	add	r2, r3
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009182:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	2b0f      	cmp	r3, #15
 8009188:	d916      	bls.n	80091b8 <UART_SetConfig+0x508>
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009190:	d212      	bcs.n	80091b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	b29b      	uxth	r3, r3
 8009196:	f023 030f 	bic.w	r3, r3, #15
 800919a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	085b      	lsrs	r3, r3, #1
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	8bfb      	ldrh	r3, [r7, #30]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	8bfa      	ldrh	r2, [r7, #30]
 80091b4:	60da      	str	r2, [r3, #12]
 80091b6:	e062      	b.n	800927e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80091be:	e05e      	b.n	800927e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80091c4:	2b08      	cmp	r3, #8
 80091c6:	d828      	bhi.n	800921a <UART_SetConfig+0x56a>
 80091c8:	a201      	add	r2, pc, #4	@ (adr r2, 80091d0 <UART_SetConfig+0x520>)
 80091ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ce:	bf00      	nop
 80091d0:	080091f5 	.word	0x080091f5
 80091d4:	080091fd 	.word	0x080091fd
 80091d8:	08009205 	.word	0x08009205
 80091dc:	0800921b 	.word	0x0800921b
 80091e0:	0800920b 	.word	0x0800920b
 80091e4:	0800921b 	.word	0x0800921b
 80091e8:	0800921b 	.word	0x0800921b
 80091ec:	0800921b 	.word	0x0800921b
 80091f0:	08009213 	.word	0x08009213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091f4:	f7fd f9fa 	bl	80065ec <HAL_RCC_GetPCLK1Freq>
 80091f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091fa:	e014      	b.n	8009226 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091fc:	f7fd fa0c 	bl	8006618 <HAL_RCC_GetPCLK2Freq>
 8009200:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009202:	e010      	b.n	8009226 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009204:	4b1a      	ldr	r3, [pc, #104]	@ (8009270 <UART_SetConfig+0x5c0>)
 8009206:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009208:	e00d      	b.n	8009226 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800920a:	f7fd f981 	bl	8006510 <HAL_RCC_GetSysClockFreq>
 800920e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009210:	e009      	b.n	8009226 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009218:	e005      	b.n	8009226 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800921a:	2300      	movs	r3, #0
 800921c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009224:	bf00      	nop
    }

    if (pclk != 0U)
 8009226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009228:	2b00      	cmp	r3, #0
 800922a:	d028      	beq.n	800927e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009230:	4a10      	ldr	r2, [pc, #64]	@ (8009274 <UART_SetConfig+0x5c4>)
 8009232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009236:	461a      	mov	r2, r3
 8009238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923a:	fbb3 f2f2 	udiv	r2, r3, r2
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	085b      	lsrs	r3, r3, #1
 8009244:	441a      	add	r2, r3
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	fbb2 f3f3 	udiv	r3, r2, r3
 800924e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009250:	6a3b      	ldr	r3, [r7, #32]
 8009252:	2b0f      	cmp	r3, #15
 8009254:	d910      	bls.n	8009278 <UART_SetConfig+0x5c8>
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800925c:	d20c      	bcs.n	8009278 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800925e:	6a3b      	ldr	r3, [r7, #32]
 8009260:	b29a      	uxth	r2, r3
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	60da      	str	r2, [r3, #12]
 8009268:	e009      	b.n	800927e <UART_SetConfig+0x5ce>
 800926a:	bf00      	nop
 800926c:	40008000 	.word	0x40008000
 8009270:	00f42400 	.word	0x00f42400
 8009274:	0800a270 	.word	0x0800a270
      }
      else
      {
        ret = HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2201      	movs	r2, #1
 8009282:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2201      	movs	r2, #1
 800928a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2200      	movs	r2, #0
 8009292:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2200      	movs	r2, #0
 8009298:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800929a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3730      	adds	r7, #48	@ 0x30
 80092a2:	46bd      	mov	sp, r7
 80092a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080092a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b4:	f003 0308 	and.w	r3, r3, #8
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00a      	beq.n	80092d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f8:	f003 0302 	and.w	r3, r3, #2
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00a      	beq.n	8009316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800931a:	f003 0304 	and.w	r3, r3, #4
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00a      	beq.n	8009338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933c:	f003 0310 	and.w	r3, r3, #16
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00a      	beq.n	800935a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	430a      	orrs	r2, r1
 8009358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935e:	f003 0320 	and.w	r3, r3, #32
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00a      	beq.n	800937c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	430a      	orrs	r2, r1
 800937a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01a      	beq.n	80093be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	430a      	orrs	r2, r1
 800939c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093a6:	d10a      	bne.n	80093be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00a      	beq.n	80093e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	430a      	orrs	r2, r1
 80093de:	605a      	str	r2, [r3, #4]
  }
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b098      	sub	sp, #96	@ 0x60
 80093f0:	af02      	add	r7, sp, #8
 80093f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093fc:	f7f9 fd7a 	bl	8002ef4 <HAL_GetTick>
 8009400:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0308 	and.w	r3, r3, #8
 800940c:	2b08      	cmp	r3, #8
 800940e:	d12f      	bne.n	8009470 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009410:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009418:	2200      	movs	r2, #0
 800941a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f88e 	bl	8009540 <UART_WaitOnFlagUntilTimeout>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d022      	beq.n	8009470 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800943a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800943e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	461a      	mov	r2, r3
 8009446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009448:	647b      	str	r3, [r7, #68]	@ 0x44
 800944a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800944e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009450:	e841 2300 	strex	r3, r2, [r1]
 8009454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e6      	bne.n	800942a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2220      	movs	r2, #32
 8009460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e063      	b.n	8009538 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0304 	and.w	r3, r3, #4
 800947a:	2b04      	cmp	r3, #4
 800947c:	d149      	bne.n	8009512 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800947e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009486:	2200      	movs	r2, #0
 8009488:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f857 	bl	8009540 <UART_WaitOnFlagUntilTimeout>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d03c      	beq.n	8009512 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	623b      	str	r3, [r7, #32]
   return(result);
 80094a6:	6a3b      	ldr	r3, [r7, #32]
 80094a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	461a      	mov	r2, r3
 80094b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80094b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1e6      	bne.n	8009498 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3308      	adds	r3, #8
 80094d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	e853 3f00 	ldrex	r3, [r3]
 80094d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f023 0301 	bic.w	r3, r3, #1
 80094e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3308      	adds	r3, #8
 80094e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094ea:	61fa      	str	r2, [r7, #28]
 80094ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ee:	69b9      	ldr	r1, [r7, #24]
 80094f0:	69fa      	ldr	r2, [r7, #28]
 80094f2:	e841 2300 	strex	r3, r2, [r1]
 80094f6:	617b      	str	r3, [r7, #20]
   return(result);
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1e5      	bne.n	80094ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e012      	b.n	8009538 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2220      	movs	r2, #32
 8009516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2220      	movs	r2, #32
 800951e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3758      	adds	r7, #88	@ 0x58
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	603b      	str	r3, [r7, #0]
 800954c:	4613      	mov	r3, r2
 800954e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009550:	e04f      	b.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009558:	d04b      	beq.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800955a:	f7f9 fccb 	bl	8002ef4 <HAL_GetTick>
 800955e:	4602      	mov	r2, r0
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	429a      	cmp	r2, r3
 8009568:	d302      	bcc.n	8009570 <UART_WaitOnFlagUntilTimeout+0x30>
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009570:	2303      	movs	r3, #3
 8009572:	e04e      	b.n	8009612 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0304 	and.w	r3, r3, #4
 800957e:	2b00      	cmp	r3, #0
 8009580:	d037      	beq.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2b80      	cmp	r3, #128	@ 0x80
 8009586:	d034      	beq.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	2b40      	cmp	r3, #64	@ 0x40
 800958c:	d031      	beq.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	f003 0308 	and.w	r3, r3, #8
 8009598:	2b08      	cmp	r3, #8
 800959a:	d110      	bne.n	80095be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2208      	movs	r2, #8
 80095a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f000 f838 	bl	800961a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2208      	movs	r2, #8
 80095ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e029      	b.n	8009612 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69db      	ldr	r3, [r3, #28]
 80095c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095cc:	d111      	bne.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 f81e 	bl	800961a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2220      	movs	r2, #32
 80095e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	e00f      	b.n	8009612 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	69da      	ldr	r2, [r3, #28]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	4013      	ands	r3, r2
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	429a      	cmp	r2, r3
 8009600:	bf0c      	ite	eq
 8009602:	2301      	moveq	r3, #1
 8009604:	2300      	movne	r3, #0
 8009606:	b2db      	uxtb	r3, r3
 8009608:	461a      	mov	r2, r3
 800960a:	79fb      	ldrb	r3, [r7, #7]
 800960c:	429a      	cmp	r2, r3
 800960e:	d0a0      	beq.n	8009552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800961a:	b480      	push	{r7}
 800961c:	b095      	sub	sp, #84	@ 0x54
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800962a:	e853 3f00 	ldrex	r3, [r3]
 800962e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009632:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	461a      	mov	r2, r3
 800963e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009640:	643b      	str	r3, [r7, #64]	@ 0x40
 8009642:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009646:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800964e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e6      	bne.n	8009622 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	3308      	adds	r3, #8
 800965a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	61fb      	str	r3, [r7, #28]
   return(result);
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800966a:	f023 0301 	bic.w	r3, r3, #1
 800966e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3308      	adds	r3, #8
 8009676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009678:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800967a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800967e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009680:	e841 2300 	strex	r3, r2, [r1]
 8009684:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e3      	bne.n	8009654 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009690:	2b01      	cmp	r3, #1
 8009692:	d118      	bne.n	80096c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	e853 3f00 	ldrex	r3, [r3]
 80096a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f023 0310 	bic.w	r3, r3, #16
 80096a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096b2:	61bb      	str	r3, [r7, #24]
 80096b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	6979      	ldr	r1, [r7, #20]
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	613b      	str	r3, [r7, #16]
   return(result);
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e6      	bne.n	8009694 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80096da:	bf00      	nop
 80096dc:	3754      	adds	r7, #84	@ 0x54
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b085      	sub	sp, #20
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d101      	bne.n	80096fc <HAL_UARTEx_DisableFifoMode+0x16>
 80096f8:	2302      	movs	r3, #2
 80096fa:	e027      	b.n	800974c <HAL_UARTEx_DisableFifoMode+0x66>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2224      	movs	r2, #36	@ 0x24
 8009708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f022 0201 	bic.w	r2, r2, #1
 8009722:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800972a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2220      	movs	r2, #32
 800973e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009768:	2b01      	cmp	r3, #1
 800976a:	d101      	bne.n	8009770 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800976c:	2302      	movs	r3, #2
 800976e:	e02d      	b.n	80097cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2224      	movs	r2, #36	@ 0x24
 800977c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f022 0201 	bic.w	r2, r2, #1
 8009796:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	430a      	orrs	r2, r1
 80097aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f84f 	bl	8009850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2220      	movs	r2, #32
 80097be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d101      	bne.n	80097ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097e8:	2302      	movs	r3, #2
 80097ea:	e02d      	b.n	8009848 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2224      	movs	r2, #36	@ 0x24
 80097f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f022 0201 	bic.w	r2, r2, #1
 8009812:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	430a      	orrs	r2, r1
 8009826:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f811 	bl	8009850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2220      	movs	r2, #32
 800983a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800985c:	2b00      	cmp	r3, #0
 800985e:	d108      	bne.n	8009872 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009870:	e031      	b.n	80098d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009872:	2308      	movs	r3, #8
 8009874:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009876:	2308      	movs	r3, #8
 8009878:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	0e5b      	lsrs	r3, r3, #25
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 0307 	and.w	r3, r3, #7
 8009888:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	0f5b      	lsrs	r3, r3, #29
 8009892:	b2db      	uxtb	r3, r3
 8009894:	f003 0307 	and.w	r3, r3, #7
 8009898:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800989a:	7bbb      	ldrb	r3, [r7, #14]
 800989c:	7b3a      	ldrb	r2, [r7, #12]
 800989e:	4911      	ldr	r1, [pc, #68]	@ (80098e4 <UARTEx_SetNbDataToProcess+0x94>)
 80098a0:	5c8a      	ldrb	r2, [r1, r2]
 80098a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098a6:	7b3a      	ldrb	r2, [r7, #12]
 80098a8:	490f      	ldr	r1, [pc, #60]	@ (80098e8 <UARTEx_SetNbDataToProcess+0x98>)
 80098aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
 80098ba:	7b7a      	ldrb	r2, [r7, #13]
 80098bc:	4909      	ldr	r1, [pc, #36]	@ (80098e4 <UARTEx_SetNbDataToProcess+0x94>)
 80098be:	5c8a      	ldrb	r2, [r1, r2]
 80098c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098c4:	7b7a      	ldrb	r2, [r7, #13]
 80098c6:	4908      	ldr	r1, [pc, #32]	@ (80098e8 <UARTEx_SetNbDataToProcess+0x98>)
 80098c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80098d6:	bf00      	nop
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	0800a288 	.word	0x0800a288
 80098e8:	0800a290 	.word	0x0800a290

080098ec <siprintf>:
 80098ec:	b40e      	push	{r1, r2, r3}
 80098ee:	b510      	push	{r4, lr}
 80098f0:	b09d      	sub	sp, #116	@ 0x74
 80098f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80098f4:	9002      	str	r0, [sp, #8]
 80098f6:	9006      	str	r0, [sp, #24]
 80098f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80098fc:	480a      	ldr	r0, [pc, #40]	@ (8009928 <siprintf+0x3c>)
 80098fe:	9107      	str	r1, [sp, #28]
 8009900:	9104      	str	r1, [sp, #16]
 8009902:	490a      	ldr	r1, [pc, #40]	@ (800992c <siprintf+0x40>)
 8009904:	f853 2b04 	ldr.w	r2, [r3], #4
 8009908:	9105      	str	r1, [sp, #20]
 800990a:	2400      	movs	r4, #0
 800990c:	a902      	add	r1, sp, #8
 800990e:	6800      	ldr	r0, [r0, #0]
 8009910:	9301      	str	r3, [sp, #4]
 8009912:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009914:	f000 f994 	bl	8009c40 <_svfiprintf_r>
 8009918:	9b02      	ldr	r3, [sp, #8]
 800991a:	701c      	strb	r4, [r3, #0]
 800991c:	b01d      	add	sp, #116	@ 0x74
 800991e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009922:	b003      	add	sp, #12
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	2000000c 	.word	0x2000000c
 800992c:	ffff0208 	.word	0xffff0208

08009930 <memset>:
 8009930:	4402      	add	r2, r0
 8009932:	4603      	mov	r3, r0
 8009934:	4293      	cmp	r3, r2
 8009936:	d100      	bne.n	800993a <memset+0xa>
 8009938:	4770      	bx	lr
 800993a:	f803 1b01 	strb.w	r1, [r3], #1
 800993e:	e7f9      	b.n	8009934 <memset+0x4>

08009940 <__errno>:
 8009940:	4b01      	ldr	r3, [pc, #4]	@ (8009948 <__errno+0x8>)
 8009942:	6818      	ldr	r0, [r3, #0]
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	2000000c 	.word	0x2000000c

0800994c <__libc_init_array>:
 800994c:	b570      	push	{r4, r5, r6, lr}
 800994e:	4d0d      	ldr	r5, [pc, #52]	@ (8009984 <__libc_init_array+0x38>)
 8009950:	4c0d      	ldr	r4, [pc, #52]	@ (8009988 <__libc_init_array+0x3c>)
 8009952:	1b64      	subs	r4, r4, r5
 8009954:	10a4      	asrs	r4, r4, #2
 8009956:	2600      	movs	r6, #0
 8009958:	42a6      	cmp	r6, r4
 800995a:	d109      	bne.n	8009970 <__libc_init_array+0x24>
 800995c:	4d0b      	ldr	r5, [pc, #44]	@ (800998c <__libc_init_array+0x40>)
 800995e:	4c0c      	ldr	r4, [pc, #48]	@ (8009990 <__libc_init_array+0x44>)
 8009960:	f000 fc64 	bl	800a22c <_init>
 8009964:	1b64      	subs	r4, r4, r5
 8009966:	10a4      	asrs	r4, r4, #2
 8009968:	2600      	movs	r6, #0
 800996a:	42a6      	cmp	r6, r4
 800996c:	d105      	bne.n	800997a <__libc_init_array+0x2e>
 800996e:	bd70      	pop	{r4, r5, r6, pc}
 8009970:	f855 3b04 	ldr.w	r3, [r5], #4
 8009974:	4798      	blx	r3
 8009976:	3601      	adds	r6, #1
 8009978:	e7ee      	b.n	8009958 <__libc_init_array+0xc>
 800997a:	f855 3b04 	ldr.w	r3, [r5], #4
 800997e:	4798      	blx	r3
 8009980:	3601      	adds	r6, #1
 8009982:	e7f2      	b.n	800996a <__libc_init_array+0x1e>
 8009984:	0800a2d4 	.word	0x0800a2d4
 8009988:	0800a2d4 	.word	0x0800a2d4
 800998c:	0800a2d4 	.word	0x0800a2d4
 8009990:	0800a2d8 	.word	0x0800a2d8

08009994 <__retarget_lock_acquire_recursive>:
 8009994:	4770      	bx	lr

08009996 <__retarget_lock_release_recursive>:
 8009996:	4770      	bx	lr

08009998 <_free_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4605      	mov	r5, r0
 800999c:	2900      	cmp	r1, #0
 800999e:	d041      	beq.n	8009a24 <_free_r+0x8c>
 80099a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099a4:	1f0c      	subs	r4, r1, #4
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	bfb8      	it	lt
 80099aa:	18e4      	addlt	r4, r4, r3
 80099ac:	f000 f8e0 	bl	8009b70 <__malloc_lock>
 80099b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009a28 <_free_r+0x90>)
 80099b2:	6813      	ldr	r3, [r2, #0]
 80099b4:	b933      	cbnz	r3, 80099c4 <_free_r+0x2c>
 80099b6:	6063      	str	r3, [r4, #4]
 80099b8:	6014      	str	r4, [r2, #0]
 80099ba:	4628      	mov	r0, r5
 80099bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099c0:	f000 b8dc 	b.w	8009b7c <__malloc_unlock>
 80099c4:	42a3      	cmp	r3, r4
 80099c6:	d908      	bls.n	80099da <_free_r+0x42>
 80099c8:	6820      	ldr	r0, [r4, #0]
 80099ca:	1821      	adds	r1, r4, r0
 80099cc:	428b      	cmp	r3, r1
 80099ce:	bf01      	itttt	eq
 80099d0:	6819      	ldreq	r1, [r3, #0]
 80099d2:	685b      	ldreq	r3, [r3, #4]
 80099d4:	1809      	addeq	r1, r1, r0
 80099d6:	6021      	streq	r1, [r4, #0]
 80099d8:	e7ed      	b.n	80099b6 <_free_r+0x1e>
 80099da:	461a      	mov	r2, r3
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	b10b      	cbz	r3, 80099e4 <_free_r+0x4c>
 80099e0:	42a3      	cmp	r3, r4
 80099e2:	d9fa      	bls.n	80099da <_free_r+0x42>
 80099e4:	6811      	ldr	r1, [r2, #0]
 80099e6:	1850      	adds	r0, r2, r1
 80099e8:	42a0      	cmp	r0, r4
 80099ea:	d10b      	bne.n	8009a04 <_free_r+0x6c>
 80099ec:	6820      	ldr	r0, [r4, #0]
 80099ee:	4401      	add	r1, r0
 80099f0:	1850      	adds	r0, r2, r1
 80099f2:	4283      	cmp	r3, r0
 80099f4:	6011      	str	r1, [r2, #0]
 80099f6:	d1e0      	bne.n	80099ba <_free_r+0x22>
 80099f8:	6818      	ldr	r0, [r3, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	6053      	str	r3, [r2, #4]
 80099fe:	4408      	add	r0, r1
 8009a00:	6010      	str	r0, [r2, #0]
 8009a02:	e7da      	b.n	80099ba <_free_r+0x22>
 8009a04:	d902      	bls.n	8009a0c <_free_r+0x74>
 8009a06:	230c      	movs	r3, #12
 8009a08:	602b      	str	r3, [r5, #0]
 8009a0a:	e7d6      	b.n	80099ba <_free_r+0x22>
 8009a0c:	6820      	ldr	r0, [r4, #0]
 8009a0e:	1821      	adds	r1, r4, r0
 8009a10:	428b      	cmp	r3, r1
 8009a12:	bf04      	itt	eq
 8009a14:	6819      	ldreq	r1, [r3, #0]
 8009a16:	685b      	ldreq	r3, [r3, #4]
 8009a18:	6063      	str	r3, [r4, #4]
 8009a1a:	bf04      	itt	eq
 8009a1c:	1809      	addeq	r1, r1, r0
 8009a1e:	6021      	streq	r1, [r4, #0]
 8009a20:	6054      	str	r4, [r2, #4]
 8009a22:	e7ca      	b.n	80099ba <_free_r+0x22>
 8009a24:	bd38      	pop	{r3, r4, r5, pc}
 8009a26:	bf00      	nop
 8009a28:	20010998 	.word	0x20010998

08009a2c <sbrk_aligned>:
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8009a6c <sbrk_aligned+0x40>)
 8009a30:	460c      	mov	r4, r1
 8009a32:	6831      	ldr	r1, [r6, #0]
 8009a34:	4605      	mov	r5, r0
 8009a36:	b911      	cbnz	r1, 8009a3e <sbrk_aligned+0x12>
 8009a38:	f000 fba4 	bl	800a184 <_sbrk_r>
 8009a3c:	6030      	str	r0, [r6, #0]
 8009a3e:	4621      	mov	r1, r4
 8009a40:	4628      	mov	r0, r5
 8009a42:	f000 fb9f 	bl	800a184 <_sbrk_r>
 8009a46:	1c43      	adds	r3, r0, #1
 8009a48:	d103      	bne.n	8009a52 <sbrk_aligned+0x26>
 8009a4a:	f04f 34ff 	mov.w	r4, #4294967295
 8009a4e:	4620      	mov	r0, r4
 8009a50:	bd70      	pop	{r4, r5, r6, pc}
 8009a52:	1cc4      	adds	r4, r0, #3
 8009a54:	f024 0403 	bic.w	r4, r4, #3
 8009a58:	42a0      	cmp	r0, r4
 8009a5a:	d0f8      	beq.n	8009a4e <sbrk_aligned+0x22>
 8009a5c:	1a21      	subs	r1, r4, r0
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f000 fb90 	bl	800a184 <_sbrk_r>
 8009a64:	3001      	adds	r0, #1
 8009a66:	d1f2      	bne.n	8009a4e <sbrk_aligned+0x22>
 8009a68:	e7ef      	b.n	8009a4a <sbrk_aligned+0x1e>
 8009a6a:	bf00      	nop
 8009a6c:	20010994 	.word	0x20010994

08009a70 <_malloc_r>:
 8009a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a74:	1ccd      	adds	r5, r1, #3
 8009a76:	f025 0503 	bic.w	r5, r5, #3
 8009a7a:	3508      	adds	r5, #8
 8009a7c:	2d0c      	cmp	r5, #12
 8009a7e:	bf38      	it	cc
 8009a80:	250c      	movcc	r5, #12
 8009a82:	2d00      	cmp	r5, #0
 8009a84:	4606      	mov	r6, r0
 8009a86:	db01      	blt.n	8009a8c <_malloc_r+0x1c>
 8009a88:	42a9      	cmp	r1, r5
 8009a8a:	d904      	bls.n	8009a96 <_malloc_r+0x26>
 8009a8c:	230c      	movs	r3, #12
 8009a8e:	6033      	str	r3, [r6, #0]
 8009a90:	2000      	movs	r0, #0
 8009a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b6c <_malloc_r+0xfc>
 8009a9a:	f000 f869 	bl	8009b70 <__malloc_lock>
 8009a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8009aa2:	461c      	mov	r4, r3
 8009aa4:	bb44      	cbnz	r4, 8009af8 <_malloc_r+0x88>
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f7ff ffbf 	bl	8009a2c <sbrk_aligned>
 8009aae:	1c43      	adds	r3, r0, #1
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	d158      	bne.n	8009b66 <_malloc_r+0xf6>
 8009ab4:	f8d8 4000 	ldr.w	r4, [r8]
 8009ab8:	4627      	mov	r7, r4
 8009aba:	2f00      	cmp	r7, #0
 8009abc:	d143      	bne.n	8009b46 <_malloc_r+0xd6>
 8009abe:	2c00      	cmp	r4, #0
 8009ac0:	d04b      	beq.n	8009b5a <_malloc_r+0xea>
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	4639      	mov	r1, r7
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	eb04 0903 	add.w	r9, r4, r3
 8009acc:	f000 fb5a 	bl	800a184 <_sbrk_r>
 8009ad0:	4581      	cmp	r9, r0
 8009ad2:	d142      	bne.n	8009b5a <_malloc_r+0xea>
 8009ad4:	6821      	ldr	r1, [r4, #0]
 8009ad6:	1a6d      	subs	r5, r5, r1
 8009ad8:	4629      	mov	r1, r5
 8009ada:	4630      	mov	r0, r6
 8009adc:	f7ff ffa6 	bl	8009a2c <sbrk_aligned>
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	d03a      	beq.n	8009b5a <_malloc_r+0xea>
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	442b      	add	r3, r5
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	f8d8 3000 	ldr.w	r3, [r8]
 8009aee:	685a      	ldr	r2, [r3, #4]
 8009af0:	bb62      	cbnz	r2, 8009b4c <_malloc_r+0xdc>
 8009af2:	f8c8 7000 	str.w	r7, [r8]
 8009af6:	e00f      	b.n	8009b18 <_malloc_r+0xa8>
 8009af8:	6822      	ldr	r2, [r4, #0]
 8009afa:	1b52      	subs	r2, r2, r5
 8009afc:	d420      	bmi.n	8009b40 <_malloc_r+0xd0>
 8009afe:	2a0b      	cmp	r2, #11
 8009b00:	d917      	bls.n	8009b32 <_malloc_r+0xc2>
 8009b02:	1961      	adds	r1, r4, r5
 8009b04:	42a3      	cmp	r3, r4
 8009b06:	6025      	str	r5, [r4, #0]
 8009b08:	bf18      	it	ne
 8009b0a:	6059      	strne	r1, [r3, #4]
 8009b0c:	6863      	ldr	r3, [r4, #4]
 8009b0e:	bf08      	it	eq
 8009b10:	f8c8 1000 	streq.w	r1, [r8]
 8009b14:	5162      	str	r2, [r4, r5]
 8009b16:	604b      	str	r3, [r1, #4]
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f000 f82f 	bl	8009b7c <__malloc_unlock>
 8009b1e:	f104 000b 	add.w	r0, r4, #11
 8009b22:	1d23      	adds	r3, r4, #4
 8009b24:	f020 0007 	bic.w	r0, r0, #7
 8009b28:	1ac2      	subs	r2, r0, r3
 8009b2a:	bf1c      	itt	ne
 8009b2c:	1a1b      	subne	r3, r3, r0
 8009b2e:	50a3      	strne	r3, [r4, r2]
 8009b30:	e7af      	b.n	8009a92 <_malloc_r+0x22>
 8009b32:	6862      	ldr	r2, [r4, #4]
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	bf0c      	ite	eq
 8009b38:	f8c8 2000 	streq.w	r2, [r8]
 8009b3c:	605a      	strne	r2, [r3, #4]
 8009b3e:	e7eb      	b.n	8009b18 <_malloc_r+0xa8>
 8009b40:	4623      	mov	r3, r4
 8009b42:	6864      	ldr	r4, [r4, #4]
 8009b44:	e7ae      	b.n	8009aa4 <_malloc_r+0x34>
 8009b46:	463c      	mov	r4, r7
 8009b48:	687f      	ldr	r7, [r7, #4]
 8009b4a:	e7b6      	b.n	8009aba <_malloc_r+0x4a>
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	42a3      	cmp	r3, r4
 8009b52:	d1fb      	bne.n	8009b4c <_malloc_r+0xdc>
 8009b54:	2300      	movs	r3, #0
 8009b56:	6053      	str	r3, [r2, #4]
 8009b58:	e7de      	b.n	8009b18 <_malloc_r+0xa8>
 8009b5a:	230c      	movs	r3, #12
 8009b5c:	6033      	str	r3, [r6, #0]
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f000 f80c 	bl	8009b7c <__malloc_unlock>
 8009b64:	e794      	b.n	8009a90 <_malloc_r+0x20>
 8009b66:	6005      	str	r5, [r0, #0]
 8009b68:	e7d6      	b.n	8009b18 <_malloc_r+0xa8>
 8009b6a:	bf00      	nop
 8009b6c:	20010998 	.word	0x20010998

08009b70 <__malloc_lock>:
 8009b70:	4801      	ldr	r0, [pc, #4]	@ (8009b78 <__malloc_lock+0x8>)
 8009b72:	f7ff bf0f 	b.w	8009994 <__retarget_lock_acquire_recursive>
 8009b76:	bf00      	nop
 8009b78:	20010990 	.word	0x20010990

08009b7c <__malloc_unlock>:
 8009b7c:	4801      	ldr	r0, [pc, #4]	@ (8009b84 <__malloc_unlock+0x8>)
 8009b7e:	f7ff bf0a 	b.w	8009996 <__retarget_lock_release_recursive>
 8009b82:	bf00      	nop
 8009b84:	20010990 	.word	0x20010990

08009b88 <__ssputs_r>:
 8009b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8c:	688e      	ldr	r6, [r1, #8]
 8009b8e:	461f      	mov	r7, r3
 8009b90:	42be      	cmp	r6, r7
 8009b92:	680b      	ldr	r3, [r1, #0]
 8009b94:	4682      	mov	sl, r0
 8009b96:	460c      	mov	r4, r1
 8009b98:	4690      	mov	r8, r2
 8009b9a:	d82d      	bhi.n	8009bf8 <__ssputs_r+0x70>
 8009b9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ba0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ba4:	d026      	beq.n	8009bf4 <__ssputs_r+0x6c>
 8009ba6:	6965      	ldr	r5, [r4, #20]
 8009ba8:	6909      	ldr	r1, [r1, #16]
 8009baa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bae:	eba3 0901 	sub.w	r9, r3, r1
 8009bb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bb6:	1c7b      	adds	r3, r7, #1
 8009bb8:	444b      	add	r3, r9
 8009bba:	106d      	asrs	r5, r5, #1
 8009bbc:	429d      	cmp	r5, r3
 8009bbe:	bf38      	it	cc
 8009bc0:	461d      	movcc	r5, r3
 8009bc2:	0553      	lsls	r3, r2, #21
 8009bc4:	d527      	bpl.n	8009c16 <__ssputs_r+0x8e>
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	f7ff ff52 	bl	8009a70 <_malloc_r>
 8009bcc:	4606      	mov	r6, r0
 8009bce:	b360      	cbz	r0, 8009c2a <__ssputs_r+0xa2>
 8009bd0:	6921      	ldr	r1, [r4, #16]
 8009bd2:	464a      	mov	r2, r9
 8009bd4:	f000 fae6 	bl	800a1a4 <memcpy>
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009be2:	81a3      	strh	r3, [r4, #12]
 8009be4:	6126      	str	r6, [r4, #16]
 8009be6:	6165      	str	r5, [r4, #20]
 8009be8:	444e      	add	r6, r9
 8009bea:	eba5 0509 	sub.w	r5, r5, r9
 8009bee:	6026      	str	r6, [r4, #0]
 8009bf0:	60a5      	str	r5, [r4, #8]
 8009bf2:	463e      	mov	r6, r7
 8009bf4:	42be      	cmp	r6, r7
 8009bf6:	d900      	bls.n	8009bfa <__ssputs_r+0x72>
 8009bf8:	463e      	mov	r6, r7
 8009bfa:	6820      	ldr	r0, [r4, #0]
 8009bfc:	4632      	mov	r2, r6
 8009bfe:	4641      	mov	r1, r8
 8009c00:	f000 faa6 	bl	800a150 <memmove>
 8009c04:	68a3      	ldr	r3, [r4, #8]
 8009c06:	1b9b      	subs	r3, r3, r6
 8009c08:	60a3      	str	r3, [r4, #8]
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	4433      	add	r3, r6
 8009c0e:	6023      	str	r3, [r4, #0]
 8009c10:	2000      	movs	r0, #0
 8009c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c16:	462a      	mov	r2, r5
 8009c18:	f000 fad2 	bl	800a1c0 <_realloc_r>
 8009c1c:	4606      	mov	r6, r0
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d1e0      	bne.n	8009be4 <__ssputs_r+0x5c>
 8009c22:	6921      	ldr	r1, [r4, #16]
 8009c24:	4650      	mov	r0, sl
 8009c26:	f7ff feb7 	bl	8009998 <_free_r>
 8009c2a:	230c      	movs	r3, #12
 8009c2c:	f8ca 3000 	str.w	r3, [sl]
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c36:	81a3      	strh	r3, [r4, #12]
 8009c38:	f04f 30ff 	mov.w	r0, #4294967295
 8009c3c:	e7e9      	b.n	8009c12 <__ssputs_r+0x8a>
	...

08009c40 <_svfiprintf_r>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	4698      	mov	r8, r3
 8009c46:	898b      	ldrh	r3, [r1, #12]
 8009c48:	061b      	lsls	r3, r3, #24
 8009c4a:	b09d      	sub	sp, #116	@ 0x74
 8009c4c:	4607      	mov	r7, r0
 8009c4e:	460d      	mov	r5, r1
 8009c50:	4614      	mov	r4, r2
 8009c52:	d510      	bpl.n	8009c76 <_svfiprintf_r+0x36>
 8009c54:	690b      	ldr	r3, [r1, #16]
 8009c56:	b973      	cbnz	r3, 8009c76 <_svfiprintf_r+0x36>
 8009c58:	2140      	movs	r1, #64	@ 0x40
 8009c5a:	f7ff ff09 	bl	8009a70 <_malloc_r>
 8009c5e:	6028      	str	r0, [r5, #0]
 8009c60:	6128      	str	r0, [r5, #16]
 8009c62:	b930      	cbnz	r0, 8009c72 <_svfiprintf_r+0x32>
 8009c64:	230c      	movs	r3, #12
 8009c66:	603b      	str	r3, [r7, #0]
 8009c68:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6c:	b01d      	add	sp, #116	@ 0x74
 8009c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c72:	2340      	movs	r3, #64	@ 0x40
 8009c74:	616b      	str	r3, [r5, #20]
 8009c76:	2300      	movs	r3, #0
 8009c78:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c7a:	2320      	movs	r3, #32
 8009c7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c80:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c84:	2330      	movs	r3, #48	@ 0x30
 8009c86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009e24 <_svfiprintf_r+0x1e4>
 8009c8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c8e:	f04f 0901 	mov.w	r9, #1
 8009c92:	4623      	mov	r3, r4
 8009c94:	469a      	mov	sl, r3
 8009c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c9a:	b10a      	cbz	r2, 8009ca0 <_svfiprintf_r+0x60>
 8009c9c:	2a25      	cmp	r2, #37	@ 0x25
 8009c9e:	d1f9      	bne.n	8009c94 <_svfiprintf_r+0x54>
 8009ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ca4:	d00b      	beq.n	8009cbe <_svfiprintf_r+0x7e>
 8009ca6:	465b      	mov	r3, fp
 8009ca8:	4622      	mov	r2, r4
 8009caa:	4629      	mov	r1, r5
 8009cac:	4638      	mov	r0, r7
 8009cae:	f7ff ff6b 	bl	8009b88 <__ssputs_r>
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	f000 80a7 	beq.w	8009e06 <_svfiprintf_r+0x1c6>
 8009cb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cba:	445a      	add	r2, fp
 8009cbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 809f 	beq.w	8009e06 <_svfiprintf_r+0x1c6>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f04f 32ff 	mov.w	r2, #4294967295
 8009cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cd2:	f10a 0a01 	add.w	sl, sl, #1
 8009cd6:	9304      	str	r3, [sp, #16]
 8009cd8:	9307      	str	r3, [sp, #28]
 8009cda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cde:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ce0:	4654      	mov	r4, sl
 8009ce2:	2205      	movs	r2, #5
 8009ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ce8:	484e      	ldr	r0, [pc, #312]	@ (8009e24 <_svfiprintf_r+0x1e4>)
 8009cea:	f7f6 faa1 	bl	8000230 <memchr>
 8009cee:	9a04      	ldr	r2, [sp, #16]
 8009cf0:	b9d8      	cbnz	r0, 8009d2a <_svfiprintf_r+0xea>
 8009cf2:	06d0      	lsls	r0, r2, #27
 8009cf4:	bf44      	itt	mi
 8009cf6:	2320      	movmi	r3, #32
 8009cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cfc:	0711      	lsls	r1, r2, #28
 8009cfe:	bf44      	itt	mi
 8009d00:	232b      	movmi	r3, #43	@ 0x2b
 8009d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d06:	f89a 3000 	ldrb.w	r3, [sl]
 8009d0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d0c:	d015      	beq.n	8009d3a <_svfiprintf_r+0xfa>
 8009d0e:	9a07      	ldr	r2, [sp, #28]
 8009d10:	4654      	mov	r4, sl
 8009d12:	2000      	movs	r0, #0
 8009d14:	f04f 0c0a 	mov.w	ip, #10
 8009d18:	4621      	mov	r1, r4
 8009d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d1e:	3b30      	subs	r3, #48	@ 0x30
 8009d20:	2b09      	cmp	r3, #9
 8009d22:	d94b      	bls.n	8009dbc <_svfiprintf_r+0x17c>
 8009d24:	b1b0      	cbz	r0, 8009d54 <_svfiprintf_r+0x114>
 8009d26:	9207      	str	r2, [sp, #28]
 8009d28:	e014      	b.n	8009d54 <_svfiprintf_r+0x114>
 8009d2a:	eba0 0308 	sub.w	r3, r0, r8
 8009d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8009d32:	4313      	orrs	r3, r2
 8009d34:	9304      	str	r3, [sp, #16]
 8009d36:	46a2      	mov	sl, r4
 8009d38:	e7d2      	b.n	8009ce0 <_svfiprintf_r+0xa0>
 8009d3a:	9b03      	ldr	r3, [sp, #12]
 8009d3c:	1d19      	adds	r1, r3, #4
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	9103      	str	r1, [sp, #12]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	bfbb      	ittet	lt
 8009d46:	425b      	neglt	r3, r3
 8009d48:	f042 0202 	orrlt.w	r2, r2, #2
 8009d4c:	9307      	strge	r3, [sp, #28]
 8009d4e:	9307      	strlt	r3, [sp, #28]
 8009d50:	bfb8      	it	lt
 8009d52:	9204      	strlt	r2, [sp, #16]
 8009d54:	7823      	ldrb	r3, [r4, #0]
 8009d56:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d58:	d10a      	bne.n	8009d70 <_svfiprintf_r+0x130>
 8009d5a:	7863      	ldrb	r3, [r4, #1]
 8009d5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d5e:	d132      	bne.n	8009dc6 <_svfiprintf_r+0x186>
 8009d60:	9b03      	ldr	r3, [sp, #12]
 8009d62:	1d1a      	adds	r2, r3, #4
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	9203      	str	r2, [sp, #12]
 8009d68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d6c:	3402      	adds	r4, #2
 8009d6e:	9305      	str	r3, [sp, #20]
 8009d70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009e34 <_svfiprintf_r+0x1f4>
 8009d74:	7821      	ldrb	r1, [r4, #0]
 8009d76:	2203      	movs	r2, #3
 8009d78:	4650      	mov	r0, sl
 8009d7a:	f7f6 fa59 	bl	8000230 <memchr>
 8009d7e:	b138      	cbz	r0, 8009d90 <_svfiprintf_r+0x150>
 8009d80:	9b04      	ldr	r3, [sp, #16]
 8009d82:	eba0 000a 	sub.w	r0, r0, sl
 8009d86:	2240      	movs	r2, #64	@ 0x40
 8009d88:	4082      	lsls	r2, r0
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	3401      	adds	r4, #1
 8009d8e:	9304      	str	r3, [sp, #16]
 8009d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d94:	4824      	ldr	r0, [pc, #144]	@ (8009e28 <_svfiprintf_r+0x1e8>)
 8009d96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d9a:	2206      	movs	r2, #6
 8009d9c:	f7f6 fa48 	bl	8000230 <memchr>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d036      	beq.n	8009e12 <_svfiprintf_r+0x1d2>
 8009da4:	4b21      	ldr	r3, [pc, #132]	@ (8009e2c <_svfiprintf_r+0x1ec>)
 8009da6:	bb1b      	cbnz	r3, 8009df0 <_svfiprintf_r+0x1b0>
 8009da8:	9b03      	ldr	r3, [sp, #12]
 8009daa:	3307      	adds	r3, #7
 8009dac:	f023 0307 	bic.w	r3, r3, #7
 8009db0:	3308      	adds	r3, #8
 8009db2:	9303      	str	r3, [sp, #12]
 8009db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db6:	4433      	add	r3, r6
 8009db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dba:	e76a      	b.n	8009c92 <_svfiprintf_r+0x52>
 8009dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	2001      	movs	r0, #1
 8009dc4:	e7a8      	b.n	8009d18 <_svfiprintf_r+0xd8>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	3401      	adds	r4, #1
 8009dca:	9305      	str	r3, [sp, #20]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	f04f 0c0a 	mov.w	ip, #10
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dd8:	3a30      	subs	r2, #48	@ 0x30
 8009dda:	2a09      	cmp	r2, #9
 8009ddc:	d903      	bls.n	8009de6 <_svfiprintf_r+0x1a6>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0c6      	beq.n	8009d70 <_svfiprintf_r+0x130>
 8009de2:	9105      	str	r1, [sp, #20]
 8009de4:	e7c4      	b.n	8009d70 <_svfiprintf_r+0x130>
 8009de6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dea:	4604      	mov	r4, r0
 8009dec:	2301      	movs	r3, #1
 8009dee:	e7f0      	b.n	8009dd2 <_svfiprintf_r+0x192>
 8009df0:	ab03      	add	r3, sp, #12
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	462a      	mov	r2, r5
 8009df6:	4b0e      	ldr	r3, [pc, #56]	@ (8009e30 <_svfiprintf_r+0x1f0>)
 8009df8:	a904      	add	r1, sp, #16
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	f3af 8000 	nop.w
 8009e00:	1c42      	adds	r2, r0, #1
 8009e02:	4606      	mov	r6, r0
 8009e04:	d1d6      	bne.n	8009db4 <_svfiprintf_r+0x174>
 8009e06:	89ab      	ldrh	r3, [r5, #12]
 8009e08:	065b      	lsls	r3, r3, #25
 8009e0a:	f53f af2d 	bmi.w	8009c68 <_svfiprintf_r+0x28>
 8009e0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e10:	e72c      	b.n	8009c6c <_svfiprintf_r+0x2c>
 8009e12:	ab03      	add	r3, sp, #12
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	462a      	mov	r2, r5
 8009e18:	4b05      	ldr	r3, [pc, #20]	@ (8009e30 <_svfiprintf_r+0x1f0>)
 8009e1a:	a904      	add	r1, sp, #16
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	f000 f879 	bl	8009f14 <_printf_i>
 8009e22:	e7ed      	b.n	8009e00 <_svfiprintf_r+0x1c0>
 8009e24:	0800a298 	.word	0x0800a298
 8009e28:	0800a2a2 	.word	0x0800a2a2
 8009e2c:	00000000 	.word	0x00000000
 8009e30:	08009b89 	.word	0x08009b89
 8009e34:	0800a29e 	.word	0x0800a29e

08009e38 <_printf_common>:
 8009e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e3c:	4616      	mov	r6, r2
 8009e3e:	4698      	mov	r8, r3
 8009e40:	688a      	ldr	r2, [r1, #8]
 8009e42:	690b      	ldr	r3, [r1, #16]
 8009e44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	bfb8      	it	lt
 8009e4c:	4613      	movlt	r3, r2
 8009e4e:	6033      	str	r3, [r6, #0]
 8009e50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e54:	4607      	mov	r7, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	b10a      	cbz	r2, 8009e5e <_printf_common+0x26>
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	6033      	str	r3, [r6, #0]
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	0699      	lsls	r1, r3, #26
 8009e62:	bf42      	ittt	mi
 8009e64:	6833      	ldrmi	r3, [r6, #0]
 8009e66:	3302      	addmi	r3, #2
 8009e68:	6033      	strmi	r3, [r6, #0]
 8009e6a:	6825      	ldr	r5, [r4, #0]
 8009e6c:	f015 0506 	ands.w	r5, r5, #6
 8009e70:	d106      	bne.n	8009e80 <_printf_common+0x48>
 8009e72:	f104 0a19 	add.w	sl, r4, #25
 8009e76:	68e3      	ldr	r3, [r4, #12]
 8009e78:	6832      	ldr	r2, [r6, #0]
 8009e7a:	1a9b      	subs	r3, r3, r2
 8009e7c:	42ab      	cmp	r3, r5
 8009e7e:	dc26      	bgt.n	8009ece <_printf_common+0x96>
 8009e80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e84:	6822      	ldr	r2, [r4, #0]
 8009e86:	3b00      	subs	r3, #0
 8009e88:	bf18      	it	ne
 8009e8a:	2301      	movne	r3, #1
 8009e8c:	0692      	lsls	r2, r2, #26
 8009e8e:	d42b      	bmi.n	8009ee8 <_printf_common+0xb0>
 8009e90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e94:	4641      	mov	r1, r8
 8009e96:	4638      	mov	r0, r7
 8009e98:	47c8      	blx	r9
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	d01e      	beq.n	8009edc <_printf_common+0xa4>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	6922      	ldr	r2, [r4, #16]
 8009ea2:	f003 0306 	and.w	r3, r3, #6
 8009ea6:	2b04      	cmp	r3, #4
 8009ea8:	bf02      	ittt	eq
 8009eaa:	68e5      	ldreq	r5, [r4, #12]
 8009eac:	6833      	ldreq	r3, [r6, #0]
 8009eae:	1aed      	subeq	r5, r5, r3
 8009eb0:	68a3      	ldr	r3, [r4, #8]
 8009eb2:	bf0c      	ite	eq
 8009eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009eb8:	2500      	movne	r5, #0
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	bfc4      	itt	gt
 8009ebe:	1a9b      	subgt	r3, r3, r2
 8009ec0:	18ed      	addgt	r5, r5, r3
 8009ec2:	2600      	movs	r6, #0
 8009ec4:	341a      	adds	r4, #26
 8009ec6:	42b5      	cmp	r5, r6
 8009ec8:	d11a      	bne.n	8009f00 <_printf_common+0xc8>
 8009eca:	2000      	movs	r0, #0
 8009ecc:	e008      	b.n	8009ee0 <_printf_common+0xa8>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	4652      	mov	r2, sl
 8009ed2:	4641      	mov	r1, r8
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	47c8      	blx	r9
 8009ed8:	3001      	adds	r0, #1
 8009eda:	d103      	bne.n	8009ee4 <_printf_common+0xac>
 8009edc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ee4:	3501      	adds	r5, #1
 8009ee6:	e7c6      	b.n	8009e76 <_printf_common+0x3e>
 8009ee8:	18e1      	adds	r1, r4, r3
 8009eea:	1c5a      	adds	r2, r3, #1
 8009eec:	2030      	movs	r0, #48	@ 0x30
 8009eee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ef2:	4422      	add	r2, r4
 8009ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ef8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009efc:	3302      	adds	r3, #2
 8009efe:	e7c7      	b.n	8009e90 <_printf_common+0x58>
 8009f00:	2301      	movs	r3, #1
 8009f02:	4622      	mov	r2, r4
 8009f04:	4641      	mov	r1, r8
 8009f06:	4638      	mov	r0, r7
 8009f08:	47c8      	blx	r9
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	d0e6      	beq.n	8009edc <_printf_common+0xa4>
 8009f0e:	3601      	adds	r6, #1
 8009f10:	e7d9      	b.n	8009ec6 <_printf_common+0x8e>
	...

08009f14 <_printf_i>:
 8009f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f18:	7e0f      	ldrb	r7, [r1, #24]
 8009f1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f1c:	2f78      	cmp	r7, #120	@ 0x78
 8009f1e:	4691      	mov	r9, r2
 8009f20:	4680      	mov	r8, r0
 8009f22:	460c      	mov	r4, r1
 8009f24:	469a      	mov	sl, r3
 8009f26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f2a:	d807      	bhi.n	8009f3c <_printf_i+0x28>
 8009f2c:	2f62      	cmp	r7, #98	@ 0x62
 8009f2e:	d80a      	bhi.n	8009f46 <_printf_i+0x32>
 8009f30:	2f00      	cmp	r7, #0
 8009f32:	f000 80d1 	beq.w	800a0d8 <_printf_i+0x1c4>
 8009f36:	2f58      	cmp	r7, #88	@ 0x58
 8009f38:	f000 80b8 	beq.w	800a0ac <_printf_i+0x198>
 8009f3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f44:	e03a      	b.n	8009fbc <_printf_i+0xa8>
 8009f46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f4a:	2b15      	cmp	r3, #21
 8009f4c:	d8f6      	bhi.n	8009f3c <_printf_i+0x28>
 8009f4e:	a101      	add	r1, pc, #4	@ (adr r1, 8009f54 <_printf_i+0x40>)
 8009f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f54:	08009fad 	.word	0x08009fad
 8009f58:	08009fc1 	.word	0x08009fc1
 8009f5c:	08009f3d 	.word	0x08009f3d
 8009f60:	08009f3d 	.word	0x08009f3d
 8009f64:	08009f3d 	.word	0x08009f3d
 8009f68:	08009f3d 	.word	0x08009f3d
 8009f6c:	08009fc1 	.word	0x08009fc1
 8009f70:	08009f3d 	.word	0x08009f3d
 8009f74:	08009f3d 	.word	0x08009f3d
 8009f78:	08009f3d 	.word	0x08009f3d
 8009f7c:	08009f3d 	.word	0x08009f3d
 8009f80:	0800a0bf 	.word	0x0800a0bf
 8009f84:	08009feb 	.word	0x08009feb
 8009f88:	0800a079 	.word	0x0800a079
 8009f8c:	08009f3d 	.word	0x08009f3d
 8009f90:	08009f3d 	.word	0x08009f3d
 8009f94:	0800a0e1 	.word	0x0800a0e1
 8009f98:	08009f3d 	.word	0x08009f3d
 8009f9c:	08009feb 	.word	0x08009feb
 8009fa0:	08009f3d 	.word	0x08009f3d
 8009fa4:	08009f3d 	.word	0x08009f3d
 8009fa8:	0800a081 	.word	0x0800a081
 8009fac:	6833      	ldr	r3, [r6, #0]
 8009fae:	1d1a      	adds	r2, r3, #4
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6032      	str	r2, [r6, #0]
 8009fb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e09c      	b.n	800a0fa <_printf_i+0x1e6>
 8009fc0:	6833      	ldr	r3, [r6, #0]
 8009fc2:	6820      	ldr	r0, [r4, #0]
 8009fc4:	1d19      	adds	r1, r3, #4
 8009fc6:	6031      	str	r1, [r6, #0]
 8009fc8:	0606      	lsls	r6, r0, #24
 8009fca:	d501      	bpl.n	8009fd0 <_printf_i+0xbc>
 8009fcc:	681d      	ldr	r5, [r3, #0]
 8009fce:	e003      	b.n	8009fd8 <_printf_i+0xc4>
 8009fd0:	0645      	lsls	r5, r0, #25
 8009fd2:	d5fb      	bpl.n	8009fcc <_printf_i+0xb8>
 8009fd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009fd8:	2d00      	cmp	r5, #0
 8009fda:	da03      	bge.n	8009fe4 <_printf_i+0xd0>
 8009fdc:	232d      	movs	r3, #45	@ 0x2d
 8009fde:	426d      	negs	r5, r5
 8009fe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fe4:	4858      	ldr	r0, [pc, #352]	@ (800a148 <_printf_i+0x234>)
 8009fe6:	230a      	movs	r3, #10
 8009fe8:	e011      	b.n	800a00e <_printf_i+0xfa>
 8009fea:	6821      	ldr	r1, [r4, #0]
 8009fec:	6833      	ldr	r3, [r6, #0]
 8009fee:	0608      	lsls	r0, r1, #24
 8009ff0:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ff4:	d402      	bmi.n	8009ffc <_printf_i+0xe8>
 8009ff6:	0649      	lsls	r1, r1, #25
 8009ff8:	bf48      	it	mi
 8009ffa:	b2ad      	uxthmi	r5, r5
 8009ffc:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ffe:	4852      	ldr	r0, [pc, #328]	@ (800a148 <_printf_i+0x234>)
 800a000:	6033      	str	r3, [r6, #0]
 800a002:	bf14      	ite	ne
 800a004:	230a      	movne	r3, #10
 800a006:	2308      	moveq	r3, #8
 800a008:	2100      	movs	r1, #0
 800a00a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a00e:	6866      	ldr	r6, [r4, #4]
 800a010:	60a6      	str	r6, [r4, #8]
 800a012:	2e00      	cmp	r6, #0
 800a014:	db05      	blt.n	800a022 <_printf_i+0x10e>
 800a016:	6821      	ldr	r1, [r4, #0]
 800a018:	432e      	orrs	r6, r5
 800a01a:	f021 0104 	bic.w	r1, r1, #4
 800a01e:	6021      	str	r1, [r4, #0]
 800a020:	d04b      	beq.n	800a0ba <_printf_i+0x1a6>
 800a022:	4616      	mov	r6, r2
 800a024:	fbb5 f1f3 	udiv	r1, r5, r3
 800a028:	fb03 5711 	mls	r7, r3, r1, r5
 800a02c:	5dc7      	ldrb	r7, [r0, r7]
 800a02e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a032:	462f      	mov	r7, r5
 800a034:	42bb      	cmp	r3, r7
 800a036:	460d      	mov	r5, r1
 800a038:	d9f4      	bls.n	800a024 <_printf_i+0x110>
 800a03a:	2b08      	cmp	r3, #8
 800a03c:	d10b      	bne.n	800a056 <_printf_i+0x142>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	07df      	lsls	r7, r3, #31
 800a042:	d508      	bpl.n	800a056 <_printf_i+0x142>
 800a044:	6923      	ldr	r3, [r4, #16]
 800a046:	6861      	ldr	r1, [r4, #4]
 800a048:	4299      	cmp	r1, r3
 800a04a:	bfde      	ittt	le
 800a04c:	2330      	movle	r3, #48	@ 0x30
 800a04e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a052:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a056:	1b92      	subs	r2, r2, r6
 800a058:	6122      	str	r2, [r4, #16]
 800a05a:	f8cd a000 	str.w	sl, [sp]
 800a05e:	464b      	mov	r3, r9
 800a060:	aa03      	add	r2, sp, #12
 800a062:	4621      	mov	r1, r4
 800a064:	4640      	mov	r0, r8
 800a066:	f7ff fee7 	bl	8009e38 <_printf_common>
 800a06a:	3001      	adds	r0, #1
 800a06c:	d14a      	bne.n	800a104 <_printf_i+0x1f0>
 800a06e:	f04f 30ff 	mov.w	r0, #4294967295
 800a072:	b004      	add	sp, #16
 800a074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	f043 0320 	orr.w	r3, r3, #32
 800a07e:	6023      	str	r3, [r4, #0]
 800a080:	4832      	ldr	r0, [pc, #200]	@ (800a14c <_printf_i+0x238>)
 800a082:	2778      	movs	r7, #120	@ 0x78
 800a084:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	6831      	ldr	r1, [r6, #0]
 800a08c:	061f      	lsls	r7, r3, #24
 800a08e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a092:	d402      	bmi.n	800a09a <_printf_i+0x186>
 800a094:	065f      	lsls	r7, r3, #25
 800a096:	bf48      	it	mi
 800a098:	b2ad      	uxthmi	r5, r5
 800a09a:	6031      	str	r1, [r6, #0]
 800a09c:	07d9      	lsls	r1, r3, #31
 800a09e:	bf44      	itt	mi
 800a0a0:	f043 0320 	orrmi.w	r3, r3, #32
 800a0a4:	6023      	strmi	r3, [r4, #0]
 800a0a6:	b11d      	cbz	r5, 800a0b0 <_printf_i+0x19c>
 800a0a8:	2310      	movs	r3, #16
 800a0aa:	e7ad      	b.n	800a008 <_printf_i+0xf4>
 800a0ac:	4826      	ldr	r0, [pc, #152]	@ (800a148 <_printf_i+0x234>)
 800a0ae:	e7e9      	b.n	800a084 <_printf_i+0x170>
 800a0b0:	6823      	ldr	r3, [r4, #0]
 800a0b2:	f023 0320 	bic.w	r3, r3, #32
 800a0b6:	6023      	str	r3, [r4, #0]
 800a0b8:	e7f6      	b.n	800a0a8 <_printf_i+0x194>
 800a0ba:	4616      	mov	r6, r2
 800a0bc:	e7bd      	b.n	800a03a <_printf_i+0x126>
 800a0be:	6833      	ldr	r3, [r6, #0]
 800a0c0:	6825      	ldr	r5, [r4, #0]
 800a0c2:	6961      	ldr	r1, [r4, #20]
 800a0c4:	1d18      	adds	r0, r3, #4
 800a0c6:	6030      	str	r0, [r6, #0]
 800a0c8:	062e      	lsls	r6, r5, #24
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	d501      	bpl.n	800a0d2 <_printf_i+0x1be>
 800a0ce:	6019      	str	r1, [r3, #0]
 800a0d0:	e002      	b.n	800a0d8 <_printf_i+0x1c4>
 800a0d2:	0668      	lsls	r0, r5, #25
 800a0d4:	d5fb      	bpl.n	800a0ce <_printf_i+0x1ba>
 800a0d6:	8019      	strh	r1, [r3, #0]
 800a0d8:	2300      	movs	r3, #0
 800a0da:	6123      	str	r3, [r4, #16]
 800a0dc:	4616      	mov	r6, r2
 800a0de:	e7bc      	b.n	800a05a <_printf_i+0x146>
 800a0e0:	6833      	ldr	r3, [r6, #0]
 800a0e2:	1d1a      	adds	r2, r3, #4
 800a0e4:	6032      	str	r2, [r6, #0]
 800a0e6:	681e      	ldr	r6, [r3, #0]
 800a0e8:	6862      	ldr	r2, [r4, #4]
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f7f6 f89f 	bl	8000230 <memchr>
 800a0f2:	b108      	cbz	r0, 800a0f8 <_printf_i+0x1e4>
 800a0f4:	1b80      	subs	r0, r0, r6
 800a0f6:	6060      	str	r0, [r4, #4]
 800a0f8:	6863      	ldr	r3, [r4, #4]
 800a0fa:	6123      	str	r3, [r4, #16]
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a102:	e7aa      	b.n	800a05a <_printf_i+0x146>
 800a104:	6923      	ldr	r3, [r4, #16]
 800a106:	4632      	mov	r2, r6
 800a108:	4649      	mov	r1, r9
 800a10a:	4640      	mov	r0, r8
 800a10c:	47d0      	blx	sl
 800a10e:	3001      	adds	r0, #1
 800a110:	d0ad      	beq.n	800a06e <_printf_i+0x15a>
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	079b      	lsls	r3, r3, #30
 800a116:	d413      	bmi.n	800a140 <_printf_i+0x22c>
 800a118:	68e0      	ldr	r0, [r4, #12]
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	4298      	cmp	r0, r3
 800a11e:	bfb8      	it	lt
 800a120:	4618      	movlt	r0, r3
 800a122:	e7a6      	b.n	800a072 <_printf_i+0x15e>
 800a124:	2301      	movs	r3, #1
 800a126:	4632      	mov	r2, r6
 800a128:	4649      	mov	r1, r9
 800a12a:	4640      	mov	r0, r8
 800a12c:	47d0      	blx	sl
 800a12e:	3001      	adds	r0, #1
 800a130:	d09d      	beq.n	800a06e <_printf_i+0x15a>
 800a132:	3501      	adds	r5, #1
 800a134:	68e3      	ldr	r3, [r4, #12]
 800a136:	9903      	ldr	r1, [sp, #12]
 800a138:	1a5b      	subs	r3, r3, r1
 800a13a:	42ab      	cmp	r3, r5
 800a13c:	dcf2      	bgt.n	800a124 <_printf_i+0x210>
 800a13e:	e7eb      	b.n	800a118 <_printf_i+0x204>
 800a140:	2500      	movs	r5, #0
 800a142:	f104 0619 	add.w	r6, r4, #25
 800a146:	e7f5      	b.n	800a134 <_printf_i+0x220>
 800a148:	0800a2a9 	.word	0x0800a2a9
 800a14c:	0800a2ba 	.word	0x0800a2ba

0800a150 <memmove>:
 800a150:	4288      	cmp	r0, r1
 800a152:	b510      	push	{r4, lr}
 800a154:	eb01 0402 	add.w	r4, r1, r2
 800a158:	d902      	bls.n	800a160 <memmove+0x10>
 800a15a:	4284      	cmp	r4, r0
 800a15c:	4623      	mov	r3, r4
 800a15e:	d807      	bhi.n	800a170 <memmove+0x20>
 800a160:	1e43      	subs	r3, r0, #1
 800a162:	42a1      	cmp	r1, r4
 800a164:	d008      	beq.n	800a178 <memmove+0x28>
 800a166:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a16a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a16e:	e7f8      	b.n	800a162 <memmove+0x12>
 800a170:	4402      	add	r2, r0
 800a172:	4601      	mov	r1, r0
 800a174:	428a      	cmp	r2, r1
 800a176:	d100      	bne.n	800a17a <memmove+0x2a>
 800a178:	bd10      	pop	{r4, pc}
 800a17a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a17e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a182:	e7f7      	b.n	800a174 <memmove+0x24>

0800a184 <_sbrk_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4d06      	ldr	r5, [pc, #24]	@ (800a1a0 <_sbrk_r+0x1c>)
 800a188:	2300      	movs	r3, #0
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	602b      	str	r3, [r5, #0]
 800a190:	f7f8 fdda 	bl	8002d48 <_sbrk>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	d102      	bne.n	800a19e <_sbrk_r+0x1a>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	b103      	cbz	r3, 800a19e <_sbrk_r+0x1a>
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	bd38      	pop	{r3, r4, r5, pc}
 800a1a0:	2001098c 	.word	0x2001098c

0800a1a4 <memcpy>:
 800a1a4:	440a      	add	r2, r1
 800a1a6:	4291      	cmp	r1, r2
 800a1a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1ac:	d100      	bne.n	800a1b0 <memcpy+0xc>
 800a1ae:	4770      	bx	lr
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1ba:	4291      	cmp	r1, r2
 800a1bc:	d1f9      	bne.n	800a1b2 <memcpy+0xe>
 800a1be:	bd10      	pop	{r4, pc}

0800a1c0 <_realloc_r>:
 800a1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c4:	4607      	mov	r7, r0
 800a1c6:	4614      	mov	r4, r2
 800a1c8:	460d      	mov	r5, r1
 800a1ca:	b921      	cbnz	r1, 800a1d6 <_realloc_r+0x16>
 800a1cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	f7ff bc4d 	b.w	8009a70 <_malloc_r>
 800a1d6:	b92a      	cbnz	r2, 800a1e4 <_realloc_r+0x24>
 800a1d8:	f7ff fbde 	bl	8009998 <_free_r>
 800a1dc:	4625      	mov	r5, r4
 800a1de:	4628      	mov	r0, r5
 800a1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e4:	f000 f81a 	bl	800a21c <_malloc_usable_size_r>
 800a1e8:	4284      	cmp	r4, r0
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	d802      	bhi.n	800a1f4 <_realloc_r+0x34>
 800a1ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1f2:	d8f4      	bhi.n	800a1de <_realloc_r+0x1e>
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	f7ff fc3a 	bl	8009a70 <_malloc_r>
 800a1fc:	4680      	mov	r8, r0
 800a1fe:	b908      	cbnz	r0, 800a204 <_realloc_r+0x44>
 800a200:	4645      	mov	r5, r8
 800a202:	e7ec      	b.n	800a1de <_realloc_r+0x1e>
 800a204:	42b4      	cmp	r4, r6
 800a206:	4622      	mov	r2, r4
 800a208:	4629      	mov	r1, r5
 800a20a:	bf28      	it	cs
 800a20c:	4632      	movcs	r2, r6
 800a20e:	f7ff ffc9 	bl	800a1a4 <memcpy>
 800a212:	4629      	mov	r1, r5
 800a214:	4638      	mov	r0, r7
 800a216:	f7ff fbbf 	bl	8009998 <_free_r>
 800a21a:	e7f1      	b.n	800a200 <_realloc_r+0x40>

0800a21c <_malloc_usable_size_r>:
 800a21c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a220:	1f18      	subs	r0, r3, #4
 800a222:	2b00      	cmp	r3, #0
 800a224:	bfbc      	itt	lt
 800a226:	580b      	ldrlt	r3, [r1, r0]
 800a228:	18c0      	addlt	r0, r0, r3
 800a22a:	4770      	bx	lr

0800a22c <_init>:
 800a22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22e:	bf00      	nop
 800a230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a232:	bc08      	pop	{r3}
 800a234:	469e      	mov	lr, r3
 800a236:	4770      	bx	lr

0800a238 <_fini>:
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23a:	bf00      	nop
 800a23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a23e:	bc08      	pop	{r3}
 800a240:	469e      	mov	lr, r3
 800a242:	4770      	bx	lr
