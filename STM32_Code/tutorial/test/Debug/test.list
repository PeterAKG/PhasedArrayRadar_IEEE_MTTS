
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a040  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800a220  0800a220  0000b220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a29c  0800a29c  0000c05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a29c  0800a29c  0000b29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2a4  0800a2a4  0000c05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2a4  0800a2a4  0000b2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2a8  0800a2a8  0000b2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800a2ac  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008928  2000005c  0800a308  0000c05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008984  0800a308  0000c984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc4d  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000311e  00000000  00000000  00027cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  0002adf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001321  00000000  00000000  0002c670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024397  00000000  00000000  0002d991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c749  00000000  00000000  00051d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6b28  00000000  00000000  0006e471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164f99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f74  00000000  00000000  00164fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0016bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a208 	.word	0x0800a208

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	0800a208 	.word	0x0800a208

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f002 fc01 	bl	8002e06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f85a 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f001 f98a 	bl	8001920 <MX_GPIO_Init>
  MX_DMA_Init();
 800060c:	f001 f93a 	bl	8001884 <MX_DMA_Init>
  MX_ADC2_Init();
 8000610:	f000 f910 	bl	8000834 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000614:	f000 fa4c 	bl	8000ab0 <MX_DAC1_Init>
  MX_OPAMP3_Init();
 8000618:	f000 fa8e 	bl	8000b38 <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 800061c:	f000 fab4 	bl	8000b88 <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 8000620:	f000 fada 	bl	8000bd8 <MX_OPAMP5_Init>
  MX_SPI1_Init();
 8000624:	f000 fb00 	bl	8000c28 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000628:	f000 fb36 	bl	8000c98 <MX_TIM1_Init>
  MX_TIM2_Init();
 800062c:	f000 fc0e 	bl	8000e4c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000630:	f000 fc84 	bl	8000f3c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000634:	f000 fcea 	bl	800100c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000638:	f000 fd50 	bl	80010dc <MX_TIM5_Init>
  MX_TIM8_Init();
 800063c:	f000 fdc6 	bl	80011cc <MX_TIM8_Init>
  MX_TIM16_Init();
 8000640:	f000 fec0 	bl	80013c4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000644:	f000 ff50 	bl	80014e8 <MX_TIM17_Init>
  MX_TIM20_Init();
 8000648:	f000 ffe0 	bl	800160c <MX_TIM20_Init>
  MX_USART1_UART_Init();
 800064c:	f001 f8ce 	bl	80017ec <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000650:	f000 f874 	bl	800073c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000654:	f000 f94e 	bl	80008f4 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000658:	f000 f9ca 	bl	80009f0 <MX_ADC4_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_MultiModeStart_DMA(&hadc1, adc_buf1, ADC_BUF_LEN); //I figured out how the dual synchronous simultaneous mode works, but it broke randomly. For some reason, it is only writing the value of one channel to
 800065c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000660:	4910      	ldr	r1, [pc, #64]	@ (80006a4 <main+0xa8>)
 8000662:	4811      	ldr	r0, [pc, #68]	@ (80006a8 <main+0xac>)
 8000664:	f004 f862 	bl	800472c <HAL_ADCEx_MultiModeStart_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	@ 0x64
 800066a:	f002 fc3d 	bl	8002ee8 <HAL_Delay>

	  values = HAL_ADCEx_MultiModeGetValue(&hadc1);
 800066e:	480e      	ldr	r0, [pc, #56]	@ (80006a8 <main+0xac>)
 8000670:	f004 f918 	bl	80048a4 <HAL_ADCEx_MultiModeGetValue>
 8000674:	4603      	mov	r3, r0
 8000676:	4a0d      	ldr	r2, [pc, #52]	@ (80006ac <main+0xb0>)
 8000678:	6013      	str	r3, [r2, #0]

	  sprintf(msg, "%lx \r\n", values);
 800067a:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <main+0xb0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	490b      	ldr	r1, [pc, #44]	@ (80006b0 <main+0xb4>)
 8000682:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <main+0xb8>)
 8000684:	f009 f920 	bl	80098c8 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000688:	480a      	ldr	r0, [pc, #40]	@ (80006b4 <main+0xb8>)
 800068a:	f7ff fdc9 	bl	8000220 <strlen>
 800068e:	4603      	mov	r3, r0
 8000690:	b29a      	uxth	r2, r3
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	4907      	ldr	r1, [pc, #28]	@ (80006b4 <main+0xb8>)
 8000698:	4807      	ldr	r0, [pc, #28]	@ (80006b8 <main+0xbc>)
 800069a:	f008 fa69 	bl	8008b70 <HAL_UART_Transmit>
	  HAL_Delay(100);
 800069e:	bf00      	nop
 80006a0:	e7e2      	b.n	8000668 <main+0x6c>
 80006a2:	bf00      	nop
 80006a4:	20000078 	.word	0x20000078
 80006a8:	20008078 	.word	0x20008078
 80006ac:	20008814 	.word	0x20008814
 80006b0:	0800a220 	.word	0x0800a220
 80006b4:	20008818 	.word	0x20008818
 80006b8:	20008780 	.word	0x20008780

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	@ 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0318 	add.w	r3, r7, #24
 80006c6:	2238      	movs	r2, #56	@ 0x38
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f009 f91e 	bl	800990c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006e2:	f005 fa01 	bl	8005ae8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	2340      	movs	r3, #64	@ 0x40
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0318 	add.w	r3, r7, #24
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 faa7 	bl	8005c50 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000708:	f001 fa66 	bl	8001bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000710:	2301      	movs	r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f005 fda5 	bl	8006274 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000730:	f001 fa52 	bl	8001bd8 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3750      	adds	r7, #80	@ 0x50
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	@ 0x30
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2220      	movs	r2, #32
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f009 f8d9 	bl	800990c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800075a:	4b34      	ldr	r3, [pc, #208]	@ (800082c <MX_ADC1_Init+0xf0>)
 800075c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000760:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000762:	4b32      	ldr	r3, [pc, #200]	@ (800082c <MX_ADC1_Init+0xf0>)
 8000764:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000768:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b30      	ldr	r3, [pc, #192]	@ (800082c <MX_ADC1_Init+0xf0>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b2e      	ldr	r3, [pc, #184]	@ (800082c <MX_ADC1_Init+0xf0>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000776:	4b2d      	ldr	r3, [pc, #180]	@ (800082c <MX_ADC1_Init+0xf0>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800077c:	4b2b      	ldr	r3, [pc, #172]	@ (800082c <MX_ADC1_Init+0xf0>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000782:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <MX_ADC1_Init+0xf0>)
 8000784:	2204      	movs	r2, #4
 8000786:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000788:	4b28      	ldr	r3, [pc, #160]	@ (800082c <MX_ADC1_Init+0xf0>)
 800078a:	2200      	movs	r2, #0
 800078c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078e:	4b27      	ldr	r3, [pc, #156]	@ (800082c <MX_ADC1_Init+0xf0>)
 8000790:	2201      	movs	r2, #1
 8000792:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000794:	4b25      	ldr	r3, [pc, #148]	@ (800082c <MX_ADC1_Init+0xf0>)
 8000796:	2201      	movs	r2, #1
 8000798:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079a:	4b24      	ldr	r3, [pc, #144]	@ (800082c <MX_ADC1_Init+0xf0>)
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a2:	4b22      	ldr	r3, [pc, #136]	@ (800082c <MX_ADC1_Init+0xf0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a8:	4b20      	ldr	r3, [pc, #128]	@ (800082c <MX_ADC1_Init+0xf0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ae:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <MX_ADC1_Init+0xf0>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <MX_ADC1_Init+0xf0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <MX_ADC1_Init+0xf0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c4:	4819      	ldr	r0, [pc, #100]	@ (800082c <MX_ADC1_Init+0xf0>)
 80007c6:	f002 fddd 	bl	8003384 <HAL_ADC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80007d0:	f001 fa02 	bl	8001bd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80007d4:	2306      	movs	r3, #6
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 80007d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e6:	4619      	mov	r1, r3
 80007e8:	4810      	ldr	r0, [pc, #64]	@ (800082c <MX_ADC1_Init+0xf0>)
 80007ea:	f004 f8ad 	bl	8004948 <HAL_ADCEx_MultiModeConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80007f4:	f001 f9f0 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <MX_ADC1_Init+0xf4>)
 80007fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007fc:	2306      	movs	r3, #6
 80007fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000804:	237f      	movs	r3, #127	@ 0x7f
 8000806:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000808:	2304      	movs	r3, #4
 800080a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_ADC1_Init+0xf0>)
 8000816:	f003 f9e5 	bl	8003be4 <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000820:	f001 f9da 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3730      	adds	r7, #48	@ 0x30
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20008078 	.word	0x20008078
 8000830:	10c00010 	.word	0x10c00010

08000834 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083a:	463b      	mov	r3, r7
 800083c:	2220      	movs	r2, #32
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f009 f863 	bl	800990c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000846:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 8000848:	4a28      	ldr	r2, [pc, #160]	@ (80008ec <MX_ADC2_Init+0xb8>)
 800084a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800084c:	4b26      	ldr	r3, [pc, #152]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 800084e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000852:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000854:	4b24      	ldr	r3, [pc, #144]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800085a:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000860:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000866:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 800086e:	2204      	movs	r2, #4
 8000870:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 8000874:	2200      	movs	r2, #0
 8000876:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 800087a:	2201      	movs	r2, #1
 800087c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 8000880:	2201      	movs	r2, #1
 8000882:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800088c:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 800088e:	2201      	movs	r2, #1
 8000890:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 8000896:	2200      	movs	r2, #0
 8000898:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008a2:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 80008a4:	f002 fd6e 	bl	8003384 <HAL_ADC_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80008ae:	f001 f993 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_ADC2_Init+0xbc>)
 80008b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b6:	2306      	movs	r3, #6
 80008b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008be:	237f      	movs	r3, #127	@ 0x7f
 80008c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008c2:	2304      	movs	r3, #4
 80008c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ca:	463b      	mov	r3, r7
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <MX_ADC2_Init+0xb4>)
 80008d0:	f003 f988 	bl	8003be4 <HAL_ADC_ConfigChannel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80008da:	f001 f97d 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	3720      	adds	r7, #32
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200080e4 	.word	0x200080e4
 80008ec:	50000100 	.word	0x50000100
 80008f0:	21800100 	.word	0x21800100

080008f4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	@ 0x30
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2220      	movs	r2, #32
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f008 fffd 	bl	800990c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000912:	4b34      	ldr	r3, [pc, #208]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 8000914:	4a34      	ldr	r2, [pc, #208]	@ (80009e8 <MX_ADC3_Init+0xf4>)
 8000916:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000918:	4b32      	ldr	r3, [pc, #200]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 800091a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800091e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000920:	4b30      	ldr	r3, [pc, #192]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000926:	4b2f      	ldr	r3, [pc, #188]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800092c:	4b2d      	ldr	r3, [pc, #180]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000932:	4b2c      	ldr	r3, [pc, #176]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000938:	4b2a      	ldr	r3, [pc, #168]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 800093a:	2204      	movs	r2, #4
 800093c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800093e:	4b29      	ldr	r3, [pc, #164]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 8000940:	2200      	movs	r2, #0
 8000942:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000944:	4b27      	ldr	r3, [pc, #156]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 8000946:	2201      	movs	r2, #1
 8000948:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800094a:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 800094c:	2201      	movs	r2, #1
 800094e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000950:	4b24      	ldr	r3, [pc, #144]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 8000952:	2200      	movs	r2, #0
 8000954:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000958:	4b22      	ldr	r3, [pc, #136]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 800095a:	2200      	movs	r2, #0
 800095c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095e:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 8000960:	2200      	movs	r2, #0
 8000962:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000964:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800096c:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 800096e:	2200      	movs	r2, #0
 8000970:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000972:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800097a:	481a      	ldr	r0, [pc, #104]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 800097c:	f002 fd02 	bl	8003384 <HAL_ADC_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000986:	f001 f927 	bl	8001bd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800098a:	2306      	movs	r3, #6
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 800098e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	4811      	ldr	r0, [pc, #68]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 80009a0:	f003 ffd2 	bl	8004948 <HAL_ADCEx_MultiModeConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 80009aa:	f001 f915 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_ADC3_Init+0xf8>)
 80009b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b2:	2306      	movs	r3, #6
 80009b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ba:	237f      	movs	r3, #127	@ 0x7f
 80009bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009be:	2304      	movs	r3, #4
 80009c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4619      	mov	r1, r3
 80009ca:	4806      	ldr	r0, [pc, #24]	@ (80009e4 <MX_ADC3_Init+0xf0>)
 80009cc:	f003 f90a 	bl	8003be4 <HAL_ADC_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_ADC3_Init+0xe6>
  {
    Error_Handler();
 80009d6:	f001 f8ff 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	@ 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20008150 	.word	0x20008150
 80009e8:	50000400 	.word	0x50000400
 80009ec:	3ac04000 	.word	0x3ac04000

080009f0 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2220      	movs	r2, #32
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f008 ff85 	bl	800990c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000a02:	4b28      	ldr	r3, [pc, #160]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a04:	4a28      	ldr	r2, [pc, #160]	@ (8000aa8 <MX_ADC4_Init+0xb8>)
 8000a06:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a08:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a0e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000a10:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a16:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000a1c:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a22:	4b20      	ldr	r3, [pc, #128]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000a48:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a50:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000a56:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000a5e:	4811      	ldr	r0, [pc, #68]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a60:	f002 fc90 	bl	8003384 <HAL_ADC_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 8000a6a:	f001 f8b5 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_ADC4_Init+0xbc>)
 8000a70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a72:	2306      	movs	r3, #6
 8000a74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a7a:	237f      	movs	r3, #127	@ 0x7f
 8000a7c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	@ (8000aa4 <MX_ADC4_Init+0xb4>)
 8000a8c:	f003 f8aa 	bl	8003be4 <HAL_ADC_ConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8000a96:	f001 f89f 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200081bc 	.word	0x200081bc
 8000aa8:	50000500 	.word	0x50000500
 8000aac:	04300002 	.word	0x04300002

08000ab0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08c      	sub	sp, #48	@ 0x30
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2230      	movs	r2, #48	@ 0x30
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f008 ff25 	bl	800990c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <MX_DAC1_Init+0x80>)
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <MX_DAC1_Init+0x84>)
 8000ac6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ac8:	4819      	ldr	r0, [pc, #100]	@ (8000b30 <MX_DAC1_Init+0x80>)
 8000aca:	f004 f954 	bl	8004d76 <HAL_DAC_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ad4:	f001 f880 	bl	8001bd8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8000af4:	2304      	movs	r3, #4
 8000af6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	2200      	movs	r2, #0
 8000b00:	4619      	mov	r1, r3
 8000b02:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <MX_DAC1_Init+0x80>)
 8000b04:	f004 f95a 	bl	8004dbc <HAL_DAC_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000b0e:	f001 f863 	bl	8001bd8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	2210      	movs	r2, #16
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_DAC1_Init+0x80>)
 8000b1a:	f004 f94f 	bl	8004dbc <HAL_DAC_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000b24:	f001 f858 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3730      	adds	r7, #48	@ 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200083a8 	.word	0x200083a8
 8000b34:	50000800 	.word	0x50000800

08000b38 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <MX_OPAMP3_Init+0x48>)
 8000b3e:	4a11      	ldr	r2, [pc, #68]	@ (8000b84 <MX_OPAMP3_Init+0x4c>)
 8000b40:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000b42:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <MX_OPAMP3_Init+0x48>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_STANDALONE_MODE;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <MX_OPAMP3_Init+0x48>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <MX_OPAMP3_Init+0x48>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <MX_OPAMP3_Init+0x48>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <MX_OPAMP3_Init+0x48>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <MX_OPAMP3_Init+0x48>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <MX_OPAMP3_Init+0x48>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <MX_OPAMP3_Init+0x48>)
 8000b6e:	f004 feeb 	bl	8005948 <HAL_OPAMP_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_OPAMP3_Init+0x44>
  {
    Error_Handler();
 8000b78:	f001 f82e 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200083bc 	.word	0x200083bc
 8000b84:	40010308 	.word	0x40010308

08000b88 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8000b8c:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <MX_OPAMP4_Init+0x48>)
 8000b8e:	4a11      	ldr	r2, [pc, #68]	@ (8000bd4 <MX_OPAMP4_Init+0x4c>)
 8000b90:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <MX_OPAMP4_Init+0x48>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_STANDALONE_MODE;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <MX_OPAMP4_Init+0x48>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hopamp4.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <MX_OPAMP4_Init+0x48>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <MX_OPAMP4_Init+0x48>)
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <MX_OPAMP4_Init+0x48>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <MX_OPAMP4_Init+0x48>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <MX_OPAMP4_Init+0x48>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	@ (8000bd0 <MX_OPAMP4_Init+0x48>)
 8000bbe:	f004 fec3 	bl	8005948 <HAL_OPAMP_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_OPAMP4_Init+0x44>
  {
    Error_Handler();
 8000bc8:	f001 f806 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200083f8 	.word	0x200083f8
 8000bd4:	4001030c 	.word	0x4001030c

08000bd8 <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <MX_OPAMP5_Init+0x48>)
 8000bde:	4a11      	ldr	r2, [pc, #68]	@ (8000c24 <MX_OPAMP5_Init+0x4c>)
 8000be0:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_OPAMP5_Init+0x48>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_STANDALONE_MODE;
 8000be8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <MX_OPAMP5_Init+0x48>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  hopamp5.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_OPAMP5_Init+0x48>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <MX_OPAMP5_Init+0x48>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = DISABLE;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_OPAMP5_Init+0x48>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <MX_OPAMP5_Init+0x48>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_OPAMP5_Init+0x48>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <MX_OPAMP5_Init+0x48>)
 8000c0e:	f004 fe9b 	bl	8005948 <HAL_OPAMP_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_OPAMP5_Init+0x44>
  {
    Error_Handler();
 8000c18:	f000 ffde 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20008434 	.word	0x20008434
 8000c24:	40010310 	.word	0x40010310

08000c28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c2e:	4a19      	ldr	r2, [pc, #100]	@ (8000c94 <MX_SPI1_Init+0x6c>)
 8000c30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000c32:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c40:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c58:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c64:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c70:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c7c:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c7e:	f005 ff63 	bl	8006b48 <HAL_SPI_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000c88:	f000 ffa6 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20008470 	.word	0x20008470
 8000c94:	40013000 	.word	0x40013000

08000c98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0a0      	sub	sp, #128	@ 0x80
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c9e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000cba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
 8000cd6:	615a      	str	r2, [r3, #20]
 8000cd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2234      	movs	r2, #52	@ 0x34
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f008 fe13 	bl	800990c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ce6:	4b57      	ldr	r3, [pc, #348]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000ce8:	4a57      	ldr	r2, [pc, #348]	@ (8000e48 <MX_TIM1_Init+0x1b0>)
 8000cea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cec:	4b55      	ldr	r3, [pc, #340]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf2:	4b54      	ldr	r3, [pc, #336]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cf8:	4b52      	ldr	r3, [pc, #328]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000cfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d00:	4b50      	ldr	r3, [pc, #320]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d06:	4b4f      	ldr	r3, [pc, #316]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d12:	484c      	ldr	r0, [pc, #304]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000d14:	f005 ffc3 	bl	8006c9e <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000d1e:	f000 ff5b 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d22:	4848      	ldr	r0, [pc, #288]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000d24:	f006 f873 	bl	8006e0e <HAL_TIM_PWM_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000d2e:	f000 ff53 	bl	8001bd8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000d32:	2306      	movs	r3, #6
 8000d34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000d36:	2310      	movs	r3, #16
 8000d38:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000d3a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4840      	ldr	r0, [pc, #256]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000d42:	f006 fd03 	bl	800774c <HAL_TIM_SlaveConfigSynchro>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000d4c:	f000 ff44 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d50:	2300      	movs	r3, #0
 8000d52:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	667b      	str	r3, [r7, #100]	@ 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d5c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d60:	4619      	mov	r1, r3
 8000d62:	4838      	ldr	r0, [pc, #224]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000d64:	f007 fc68 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000d6e:	f000 ff33 	bl	8001bd8 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000d72:	2301      	movs	r3, #1
 8000d74:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000d76:	2301      	movs	r3, #1
 8000d78:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000d7e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d82:	461a      	mov	r2, r3
 8000d84:	2101      	movs	r1, #1
 8000d86:	482f      	ldr	r0, [pc, #188]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000d88:	f007 fd80 	bl	800888c <HAL_TIMEx_ConfigBreakInput>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000d92:	f000 ff21 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000d96:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4829      	ldr	r0, [pc, #164]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000da0:	f007 fd74 	bl	800888c <HAL_TIMEx_ConfigBreakInput>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000daa:	f000 ff15 	bl	8001bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dae:	2360      	movs	r3, #96	@ 0x60
 8000db0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db6:	2300      	movs	r3, #0
 8000db8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000dce:	2208      	movs	r2, #8
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	481c      	ldr	r0, [pc, #112]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000dd4:	f006 fa9a 	bl	800730c <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000dde:	f000 fefb 	bl	8001bd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000de2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000de6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000de8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000df6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000e0a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4807      	ldr	r0, [pc, #28]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000e28:	f007 fc9c 	bl	8008764 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 8000e32:	f000 fed1 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e36:	4803      	ldr	r0, [pc, #12]	@ (8000e44 <MX_TIM1_Init+0x1ac>)
 8000e38:	f001 fd6e 	bl	8002918 <HAL_TIM_MspPostInit>

}
 8000e3c:	bf00      	nop
 8000e3e:	3780      	adds	r7, #128	@ 0x80
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200084d4 	.word	0x200084d4
 8000e48:	40012c00 	.word	0x40012c00

08000e4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b090      	sub	sp, #64	@ 0x40
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	2224      	movs	r2, #36	@ 0x24
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f008 fd56 	bl	800990c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e78:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <MX_TIM2_Init+0xec>)
 8000e7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e80:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <MX_TIM2_Init+0xec>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e86:	4b2c      	ldr	r3, [pc, #176]	@ (8000f38 <MX_TIM2_Init+0xec>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <MX_TIM2_Init+0xec>)
 8000e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e94:	4b28      	ldr	r3, [pc, #160]	@ (8000f38 <MX_TIM2_Init+0xec>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b27      	ldr	r3, [pc, #156]	@ (8000f38 <MX_TIM2_Init+0xec>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ea0:	4825      	ldr	r0, [pc, #148]	@ (8000f38 <MX_TIM2_Init+0xec>)
 8000ea2:	f006 f815 	bl	8006ed0 <HAL_TIM_IC_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000eac:	f000 fe94 	bl	8001bd8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Filter = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Filter = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4817      	ldr	r0, [pc, #92]	@ (8000f38 <MX_TIM2_Init+0xec>)
 8000edc:	f006 f84f 	bl	8006f7e <HAL_TIM_Encoder_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000ee6:	f000 fe77 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480f      	ldr	r0, [pc, #60]	@ (8000f38 <MX_TIM2_Init+0xec>)
 8000efa:	f007 fb9d 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000f04:	f000 fe68 	bl	8001bd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	@ (8000f38 <MX_TIM2_Init+0xec>)
 8000f20:	f006 f958 	bl	80071d4 <HAL_TIM_IC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000f2a:	f000 fe55 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	3740      	adds	r7, #64	@ 0x40
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20008520 	.word	0x20008520

08000f3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	@ 0x30
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f42:	f107 0320 	add.w	r3, r7, #32
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f68:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <MX_TIM3_Init+0xc8>)
 8000f6a:	4a27      	ldr	r2, [pc, #156]	@ (8001008 <MX_TIM3_Init+0xcc>)
 8000f6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f6e:	4b25      	ldr	r3, [pc, #148]	@ (8001004 <MX_TIM3_Init+0xc8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f74:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <MX_TIM3_Init+0xc8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	@ (8001004 <MX_TIM3_Init+0xc8>)
 8000f7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <MX_TIM3_Init+0xc8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <MX_TIM3_Init+0xc8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f8e:	481d      	ldr	r0, [pc, #116]	@ (8001004 <MX_TIM3_Init+0xc8>)
 8000f90:	f005 fe85 	bl	8006c9e <HAL_TIM_Base_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000f9a:	f000 fe1d 	bl	8001bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fa4:	f107 0320 	add.w	r3, r7, #32
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4816      	ldr	r0, [pc, #88]	@ (8001004 <MX_TIM3_Init+0xc8>)
 8000fac:	f006 fac2 	bl	8007534 <HAL_TIM_ConfigClockSource>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000fb6:	f000 fe0f 	bl	8001bd8 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	@ (8001004 <MX_TIM3_Init+0xc8>)
 8000fd2:	f007 fa77 	bl	80084c4 <HAL_TIMEx_HallSensor_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8000fdc:	f000 fdfc 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000fe0:	2350      	movs	r3, #80	@ 0x50
 8000fe2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	@ (8001004 <MX_TIM3_Init+0xc8>)
 8000fee:	f007 fb23 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000ff8:	f000 fdee 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3730      	adds	r7, #48	@ 0x30
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000856c 	.word	0x2000856c
 8001008:	40000400 	.word	0x40000400

0800100c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	@ 0x30
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001038:	4b26      	ldr	r3, [pc, #152]	@ (80010d4 <MX_TIM4_Init+0xc8>)
 800103a:	4a27      	ldr	r2, [pc, #156]	@ (80010d8 <MX_TIM4_Init+0xcc>)
 800103c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800103e:	4b25      	ldr	r3, [pc, #148]	@ (80010d4 <MX_TIM4_Init+0xc8>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b23      	ldr	r3, [pc, #140]	@ (80010d4 <MX_TIM4_Init+0xc8>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800104a:	4b22      	ldr	r3, [pc, #136]	@ (80010d4 <MX_TIM4_Init+0xc8>)
 800104c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001050:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001052:	4b20      	ldr	r3, [pc, #128]	@ (80010d4 <MX_TIM4_Init+0xc8>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001058:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <MX_TIM4_Init+0xc8>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800105e:	481d      	ldr	r0, [pc, #116]	@ (80010d4 <MX_TIM4_Init+0xc8>)
 8001060:	f005 fe1d 	bl	8006c9e <HAL_TIM_Base_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800106a:	f000 fdb5 	bl	8001bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001072:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001074:	f107 0320 	add.w	r3, r7, #32
 8001078:	4619      	mov	r1, r3
 800107a:	4816      	ldr	r0, [pc, #88]	@ (80010d4 <MX_TIM4_Init+0xc8>)
 800107c:	f006 fa5a 	bl	8007534 <HAL_TIM_ConfigClockSource>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001086:	f000 fda7 	bl	8001bd8 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <MX_TIM4_Init+0xc8>)
 80010a2:	f007 fa0f 	bl	80084c4 <HAL_TIMEx_HallSensor_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 80010ac:	f000 fd94 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80010b0:	2350      	movs	r3, #80	@ 0x50
 80010b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <MX_TIM4_Init+0xc8>)
 80010be:	f007 fabb 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 80010c8:	f000 fd86 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	3730      	adds	r7, #48	@ 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200085b8 	.word	0x200085b8
 80010d8:	40000800 	.word	0x40000800

080010dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b090      	sub	sp, #64	@ 0x40
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	2224      	movs	r2, #36	@ 0x24
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f008 fc0e 	bl	800990c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010fc:	463b      	mov	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001108:	4b2e      	ldr	r3, [pc, #184]	@ (80011c4 <MX_TIM5_Init+0xe8>)
 800110a:	4a2f      	ldr	r2, [pc, #188]	@ (80011c8 <MX_TIM5_Init+0xec>)
 800110c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800110e:	4b2d      	ldr	r3, [pc, #180]	@ (80011c4 <MX_TIM5_Init+0xe8>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <MX_TIM5_Init+0xe8>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800111a:	4b2a      	ldr	r3, [pc, #168]	@ (80011c4 <MX_TIM5_Init+0xe8>)
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001122:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <MX_TIM5_Init+0xe8>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b26      	ldr	r3, [pc, #152]	@ (80011c4 <MX_TIM5_Init+0xe8>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800112e:	4825      	ldr	r0, [pc, #148]	@ (80011c4 <MX_TIM5_Init+0xe8>)
 8001130:	f005 fece 	bl	8006ed0 <HAL_TIM_IC_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 800113a:	f000 fd4d 	bl	8001bd8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800113e:	2301      	movs	r3, #1
 8001140:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001146:	2301      	movs	r3, #1
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Filter = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001156:	2301      	movs	r3, #1
 8001158:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Filter = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	4816      	ldr	r0, [pc, #88]	@ (80011c4 <MX_TIM5_Init+0xe8>)
 800116a:	f005 ff08 	bl	8006f7e <HAL_TIM_Encoder_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001174:	f000 fd30 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	480f      	ldr	r0, [pc, #60]	@ (80011c4 <MX_TIM5_Init+0xe8>)
 8001188:	f007 fa56 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM5_Init+0xba>
  {
    Error_Handler();
 8001192:	f000 fd21 	bl	8001bd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800119a:	2301      	movs	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80011a6:	463b      	mov	r3, r7
 80011a8:	2208      	movs	r2, #8
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_TIM5_Init+0xe8>)
 80011ae:	f006 f811 	bl	80071d4 <HAL_TIM_IC_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM5_Init+0xe0>
  {
    Error_Handler();
 80011b8:	f000 fd0e 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	3740      	adds	r7, #64	@ 0x40
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20008604 	.word	0x20008604
 80011c8:	40000c00 	.word	0x40000c00

080011cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0a0      	sub	sp, #128	@ 0x80
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011d2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80011ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]
 800120a:	615a      	str	r2, [r3, #20]
 800120c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2234      	movs	r2, #52	@ 0x34
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f008 fb79 	bl	800990c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800121a:	4b68      	ldr	r3, [pc, #416]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 800121c:	4a68      	ldr	r2, [pc, #416]	@ (80013c0 <MX_TIM8_Init+0x1f4>)
 800121e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001220:	4b66      	ldr	r3, [pc, #408]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b65      	ldr	r3, [pc, #404]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800122c:	4b63      	ldr	r3, [pc, #396]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 800122e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001232:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001234:	4b61      	ldr	r3, [pc, #388]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800123a:	4b60      	ldr	r3, [pc, #384]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001240:	4b5e      	ldr	r3, [pc, #376]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001246:	485d      	ldr	r0, [pc, #372]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 8001248:	f005 fd29 	bl	8006c9e <HAL_TIM_Base_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001252:	f000 fcc1 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001256:	4859      	ldr	r0, [pc, #356]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 8001258:	f005 fdd9 	bl	8006e0e <HAL_TIM_PWM_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001262:	f000 fcb9 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001266:	4855      	ldr	r0, [pc, #340]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 8001268:	f005 fd70 	bl	8006d4c <HAL_TIM_OC_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001272:	f000 fcb1 	bl	8001bd8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001276:	2306      	movs	r3, #6
 8001278:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800127a:	2310      	movs	r3, #16
 800127c:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800127e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001282:	4619      	mov	r1, r3
 8001284:	484d      	ldr	r0, [pc, #308]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 8001286:	f006 fa61 	bl	800774c <HAL_TIM_SlaveConfigSynchro>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001290:	f000 fca2 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	667b      	str	r3, [r7, #100]	@ 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012a0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80012a4:	4619      	mov	r1, r3
 80012a6:	4845      	ldr	r0, [pc, #276]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 80012a8:	f007 f9c6 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM8_Init+0xea>
  {
    Error_Handler();
 80012b2:	f000 fc91 	bl	8001bd8 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80012b6:	2301      	movs	r3, #1
 80012b8:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80012be:	2300      	movs	r3, #0
 80012c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80012c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012c6:	461a      	mov	r2, r3
 80012c8:	2101      	movs	r1, #1
 80012ca:	483c      	ldr	r0, [pc, #240]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 80012cc:	f007 fade 	bl	800888c <HAL_TIMEx_ConfigBreakInput>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80012d6:	f000 fc7f 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80012da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012de:	461a      	mov	r2, r3
 80012e0:	2102      	movs	r1, #2
 80012e2:	4836      	ldr	r0, [pc, #216]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 80012e4:	f007 fad2 	bl	800888c <HAL_TIMEx_ConfigBreakInput>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 80012ee:	f000 fc73 	bl	8001bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f2:	2360      	movs	r3, #96	@ 0x60
 80012f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012fe:	2300      	movs	r3, #0
 8001300:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	4829      	ldr	r0, [pc, #164]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 8001318:	f005 fff8 	bl	800730c <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8001322:	f000 fc59 	bl	8001bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001326:	2300      	movs	r3, #0
 8001328:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800132a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800132e:	2204      	movs	r2, #4
 8001330:	4619      	mov	r1, r3
 8001332:	4822      	ldr	r0, [pc, #136]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 8001334:	f005 fed4 	bl	80070e0 <HAL_TIM_OC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM8_Init+0x176>
  {
    Error_Handler();
 800133e:	f000 fc4b 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001342:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001346:	2208      	movs	r2, #8
 8001348:	4619      	mov	r1, r3
 800134a:	481c      	ldr	r0, [pc, #112]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 800134c:	f005 fec8 	bl	80070e0 <HAL_TIM_OC_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM8_Init+0x18e>
  {
    Error_Handler();
 8001356:	f000 fc3f 	bl	8001bd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800135a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800135e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001360:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001364:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800136e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001372:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001374:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001378:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001382:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001388:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800138c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001392:	2300      	movs	r3, #0
 8001394:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4807      	ldr	r0, [pc, #28]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 80013a0:	f007 f9e0 	bl	8008764 <HAL_TIMEx_ConfigBreakDeadTime>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM8_Init+0x1e2>
  {
    Error_Handler();
 80013aa:	f000 fc15 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013ae:	4803      	ldr	r0, [pc, #12]	@ (80013bc <MX_TIM8_Init+0x1f0>)
 80013b0:	f001 fab2 	bl	8002918 <HAL_TIM_MspPostInit>

}
 80013b4:	bf00      	nop
 80013b6:	3780      	adds	r7, #128	@ 0x80
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20008650 	.word	0x20008650
 80013c0:	40013400 	.word	0x40013400

080013c4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b098      	sub	sp, #96	@ 0x60
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80013ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
 80013e6:	615a      	str	r2, [r3, #20]
 80013e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2234      	movs	r2, #52	@ 0x34
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f008 fa8b 	bl	800990c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80013f6:	4b3a      	ldr	r3, [pc, #232]	@ (80014e0 <MX_TIM16_Init+0x11c>)
 80013f8:	4a3a      	ldr	r2, [pc, #232]	@ (80014e4 <MX_TIM16_Init+0x120>)
 80013fa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80013fc:	4b38      	ldr	r3, [pc, #224]	@ (80014e0 <MX_TIM16_Init+0x11c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001402:	4b37      	ldr	r3, [pc, #220]	@ (80014e0 <MX_TIM16_Init+0x11c>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001408:	4b35      	ldr	r3, [pc, #212]	@ (80014e0 <MX_TIM16_Init+0x11c>)
 800140a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800140e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001410:	4b33      	ldr	r3, [pc, #204]	@ (80014e0 <MX_TIM16_Init+0x11c>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001416:	4b32      	ldr	r3, [pc, #200]	@ (80014e0 <MX_TIM16_Init+0x11c>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b30      	ldr	r3, [pc, #192]	@ (80014e0 <MX_TIM16_Init+0x11c>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001422:	482f      	ldr	r0, [pc, #188]	@ (80014e0 <MX_TIM16_Init+0x11c>)
 8001424:	f005 fc3b 	bl	8006c9e <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800142e:	f000 fbd3 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001432:	482b      	ldr	r0, [pc, #172]	@ (80014e0 <MX_TIM16_Init+0x11c>)
 8001434:	f005 fc8a 	bl	8006d4c <HAL_TIM_OC_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM16_Init+0x7e>
  {
    Error_Handler();
 800143e:	f000 fbcb 	bl	8001bd8 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001442:	2301      	movs	r3, #1
 8001444:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001446:	2301      	movs	r3, #1
 8001448:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800144a:	2300      	movs	r3, #0
 800144c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim16, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800144e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001452:	461a      	mov	r2, r3
 8001454:	2101      	movs	r1, #1
 8001456:	4822      	ldr	r0, [pc, #136]	@ (80014e0 <MX_TIM16_Init+0x11c>)
 8001458:	f007 fa18 	bl	800888c <HAL_TIMEx_ConfigBreakInput>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM16_Init+0xa2>
  {
    Error_Handler();
 8001462:	f000 fbb9 	bl	8001bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001466:	2300      	movs	r3, #0
 8001468:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146e:	2300      	movs	r3, #0
 8001470:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001472:	2300      	movs	r3, #0
 8001474:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001482:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001486:	2200      	movs	r2, #0
 8001488:	4619      	mov	r1, r3
 800148a:	4815      	ldr	r0, [pc, #84]	@ (80014e0 <MX_TIM16_Init+0x11c>)
 800148c:	f005 fe28 	bl	80070e0 <HAL_TIM_OC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM16_Init+0xd6>
  {
    Error_Handler();
 8001496:	f000 fb9f 	bl	8001bd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80014aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4807      	ldr	r0, [pc, #28]	@ (80014e0 <MX_TIM16_Init+0x11c>)
 80014c4:	f007 f94e 	bl	8008764 <HAL_TIMEx_ConfigBreakDeadTime>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM16_Init+0x10e>
  {
    Error_Handler();
 80014ce:	f000 fb83 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80014d2:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <MX_TIM16_Init+0x11c>)
 80014d4:	f001 fa20 	bl	8002918 <HAL_TIM_MspPostInit>

}
 80014d8:	bf00      	nop
 80014da:	3760      	adds	r7, #96	@ 0x60
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000869c 	.word	0x2000869c
 80014e4:	40014400 	.word	0x40014400

080014e8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b098      	sub	sp, #96	@ 0x60
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80014ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	615a      	str	r2, [r3, #20]
 800150c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2234      	movs	r2, #52	@ 0x34
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f008 f9f9 	bl	800990c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800151a:	4b3a      	ldr	r3, [pc, #232]	@ (8001604 <MX_TIM17_Init+0x11c>)
 800151c:	4a3a      	ldr	r2, [pc, #232]	@ (8001608 <MX_TIM17_Init+0x120>)
 800151e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001520:	4b38      	ldr	r3, [pc, #224]	@ (8001604 <MX_TIM17_Init+0x11c>)
 8001522:	2200      	movs	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b37      	ldr	r3, [pc, #220]	@ (8001604 <MX_TIM17_Init+0x11c>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800152c:	4b35      	ldr	r3, [pc, #212]	@ (8001604 <MX_TIM17_Init+0x11c>)
 800152e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001532:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b33      	ldr	r3, [pc, #204]	@ (8001604 <MX_TIM17_Init+0x11c>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800153a:	4b32      	ldr	r3, [pc, #200]	@ (8001604 <MX_TIM17_Init+0x11c>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001540:	4b30      	ldr	r3, [pc, #192]	@ (8001604 <MX_TIM17_Init+0x11c>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001546:	482f      	ldr	r0, [pc, #188]	@ (8001604 <MX_TIM17_Init+0x11c>)
 8001548:	f005 fba9 	bl	8006c9e <HAL_TIM_Base_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8001552:	f000 fb41 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001556:	482b      	ldr	r0, [pc, #172]	@ (8001604 <MX_TIM17_Init+0x11c>)
 8001558:	f005 fbf8 	bl	8006d4c <HAL_TIM_OC_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM17_Init+0x7e>
  {
    Error_Handler();
 8001562:	f000 fb39 	bl	8001bd8 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001566:	2301      	movs	r3, #1
 8001568:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800156a:	2301      	movs	r3, #1
 800156c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800156e:	2300      	movs	r3, #0
 8001570:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim17, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001572:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001576:	461a      	mov	r2, r3
 8001578:	2101      	movs	r1, #1
 800157a:	4822      	ldr	r0, [pc, #136]	@ (8001604 <MX_TIM17_Init+0x11c>)
 800157c:	f007 f986 	bl	800888c <HAL_TIMEx_ConfigBreakInput>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM17_Init+0xa2>
  {
    Error_Handler();
 8001586:	f000 fb27 	bl	8001bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800158a:	2300      	movs	r3, #0
 800158c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001596:	2300      	movs	r3, #0
 8001598:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015aa:	2200      	movs	r2, #0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4815      	ldr	r0, [pc, #84]	@ (8001604 <MX_TIM17_Init+0x11c>)
 80015b0:	f005 fd96 	bl	80070e0 <HAL_TIM_OC_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM17_Init+0xd6>
  {
    Error_Handler();
 80015ba:	f000 fb0d 	bl	8001bd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80015ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4807      	ldr	r0, [pc, #28]	@ (8001604 <MX_TIM17_Init+0x11c>)
 80015e8:	f007 f8bc 	bl	8008764 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM17_Init+0x10e>
  {
    Error_Handler();
 80015f2:	f000 faf1 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80015f6:	4803      	ldr	r0, [pc, #12]	@ (8001604 <MX_TIM17_Init+0x11c>)
 80015f8:	f001 f98e 	bl	8002918 <HAL_TIM_MspPostInit>

}
 80015fc:	bf00      	nop
 80015fe:	3760      	adds	r7, #96	@ 0x60
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200086e8 	.word	0x200086e8
 8001608:	40014800 	.word	0x40014800

0800160c <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0a0      	sub	sp, #128	@ 0x80
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001612:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001622:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800162e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2234      	movs	r2, #52	@ 0x34
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f008 f959 	bl	800990c <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 800165a:	4b62      	ldr	r3, [pc, #392]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 800165c:	4a62      	ldr	r2, [pc, #392]	@ (80017e8 <MX_TIM20_Init+0x1dc>)
 800165e:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001660:	4b60      	ldr	r3, [pc, #384]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	4b5f      	ldr	r3, [pc, #380]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 800166c:	4b5d      	ldr	r3, [pc, #372]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 800166e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001672:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001674:	4b5b      	ldr	r3, [pc, #364]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800167a:	4b5a      	ldr	r3, [pc, #360]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b58      	ldr	r3, [pc, #352]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001686:	4857      	ldr	r0, [pc, #348]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 8001688:	f005 fb09 	bl	8006c9e <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM20_Init+0x8a>
  {
    Error_Handler();
 8001692:	f000 faa1 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8001696:	4853      	ldr	r0, [pc, #332]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 8001698:	f005 fbb9 	bl	8006e0e <HAL_TIM_PWM_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM20_Init+0x9a>
  {
    Error_Handler();
 80016a2:	f000 fa99 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim20) != HAL_OK)
 80016a6:	484f      	ldr	r0, [pc, #316]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 80016a8:	f005 fb50 	bl	8006d4c <HAL_TIM_OC_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM20_Init+0xaa>
  {
    Error_Handler();
 80016b2:	f000 fa91 	bl	8001bd8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80016b6:	2306      	movs	r3, #6
 80016b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80016ba:	2310      	movs	r3, #16
 80016bc:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 80016be:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016c2:	4619      	mov	r1, r3
 80016c4:	4847      	ldr	r0, [pc, #284]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 80016c6:	f006 f841 	bl	800774c <HAL_TIM_SlaveConfigSynchro>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM20_Init+0xc8>
  {
    Error_Handler();
 80016d0:	f000 fa82 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	667b      	str	r3, [r7, #100]	@ 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80016e0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016e4:	4619      	mov	r1, r3
 80016e6:	483f      	ldr	r0, [pc, #252]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 80016e8:	f006 ffa6 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM20_Init+0xea>
  {
    Error_Handler();
 80016f2:	f000 fa71 	bl	8001bd8 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80016f6:	2301      	movs	r3, #1
 80016f8:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80016fa:	2301      	movs	r3, #1
 80016fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80016fe:	2300      	movs	r3, #0
 8001700:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim20, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001702:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001706:	461a      	mov	r2, r3
 8001708:	2101      	movs	r1, #1
 800170a:	4836      	ldr	r0, [pc, #216]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 800170c:	f007 f8be 	bl	800888c <HAL_TIMEx_ConfigBreakInput>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM20_Init+0x10e>
  {
    Error_Handler();
 8001716:	f000 fa5f 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim20, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 800171a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800171e:	461a      	mov	r2, r3
 8001720:	2102      	movs	r1, #2
 8001722:	4830      	ldr	r0, [pc, #192]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 8001724:	f007 f8b2 	bl	800888c <HAL_TIMEx_ConfigBreakInput>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM20_Init+0x126>
  {
    Error_Handler();
 800172e:	f000 fa53 	bl	8001bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001732:	2360      	movs	r3, #96	@ 0x60
 8001734:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800173a:	2300      	movs	r3, #0
 800173c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800173e:	2300      	movs	r3, #0
 8001740:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800174a:	2300      	movs	r3, #0
 800174c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800174e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001752:	2204      	movs	r2, #4
 8001754:	4619      	mov	r1, r3
 8001756:	4823      	ldr	r0, [pc, #140]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 8001758:	f005 fdd8 	bl	800730c <HAL_TIM_PWM_ConfigChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM20_Init+0x15a>
  {
    Error_Handler();
 8001762:	f000 fa39 	bl	8001bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001766:	2300      	movs	r3, #0
 8001768:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800176a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800176e:	2208      	movs	r2, #8
 8001770:	4619      	mov	r1, r3
 8001772:	481c      	ldr	r0, [pc, #112]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 8001774:	f005 fcb4 	bl	80070e0 <HAL_TIM_OC_ConfigChannel>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM20_Init+0x176>
  {
    Error_Handler();
 800177e:	f000 fa2b 	bl	8001bd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001782:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001786:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001788:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800178c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001796:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800179a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800179c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80017aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	4619      	mov	r1, r3
 80017c6:	4807      	ldr	r0, [pc, #28]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 80017c8:	f006 ffcc 	bl	8008764 <HAL_TIMEx_ConfigBreakDeadTime>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM20_Init+0x1ca>
  {
    Error_Handler();
 80017d2:	f000 fa01 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 80017d6:	4803      	ldr	r0, [pc, #12]	@ (80017e4 <MX_TIM20_Init+0x1d8>)
 80017d8:	f001 f89e 	bl	8002918 <HAL_TIM_MspPostInit>

}
 80017dc:	bf00      	nop
 80017de:	3780      	adds	r7, #128	@ 0x80
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20008734 	.word	0x20008734
 80017e8:	40015000 	.word	0x40015000

080017ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017f0:	4b22      	ldr	r3, [pc, #136]	@ (800187c <MX_USART1_UART_Init+0x90>)
 80017f2:	4a23      	ldr	r2, [pc, #140]	@ (8001880 <MX_USART1_UART_Init+0x94>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017f6:	4b21      	ldr	r3, [pc, #132]	@ (800187c <MX_USART1_UART_Init+0x90>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b1f      	ldr	r3, [pc, #124]	@ (800187c <MX_USART1_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <MX_USART1_UART_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800180a:	4b1c      	ldr	r3, [pc, #112]	@ (800187c <MX_USART1_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <MX_USART1_UART_Init+0x90>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b19      	ldr	r3, [pc, #100]	@ (800187c <MX_USART1_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b17      	ldr	r3, [pc, #92]	@ (800187c <MX_USART1_UART_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001822:	4b16      	ldr	r3, [pc, #88]	@ (800187c <MX_USART1_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001828:	4b14      	ldr	r3, [pc, #80]	@ (800187c <MX_USART1_UART_Init+0x90>)
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182e:	4b13      	ldr	r3, [pc, #76]	@ (800187c <MX_USART1_UART_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001834:	4811      	ldr	r0, [pc, #68]	@ (800187c <MX_USART1_UART_Init+0x90>)
 8001836:	f007 f94b 	bl	8008ad0 <HAL_UART_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001840:	f000 f9ca 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001844:	2100      	movs	r1, #0
 8001846:	480d      	ldr	r0, [pc, #52]	@ (800187c <MX_USART1_UART_Init+0x90>)
 8001848:	f007 ff74 	bl	8009734 <HAL_UARTEx_SetTxFifoThreshold>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001852:	f000 f9c1 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001856:	2100      	movs	r1, #0
 8001858:	4808      	ldr	r0, [pc, #32]	@ (800187c <MX_USART1_UART_Init+0x90>)
 800185a:	f007 ffa9 	bl	80097b0 <HAL_UARTEx_SetRxFifoThreshold>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001864:	f000 f9b8 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001868:	4804      	ldr	r0, [pc, #16]	@ (800187c <MX_USART1_UART_Init+0x90>)
 800186a:	f007 ff2a 	bl	80096c2 <HAL_UARTEx_DisableFifoMode>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001874:	f000 f9b0 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20008780 	.word	0x20008780
 8001880:	40013800 	.word	0x40013800

08001884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800188a:	4b24      	ldr	r3, [pc, #144]	@ (800191c <MX_DMA_Init+0x98>)
 800188c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800188e:	4a23      	ldr	r2, [pc, #140]	@ (800191c <MX_DMA_Init+0x98>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6493      	str	r3, [r2, #72]	@ 0x48
 8001896:	4b21      	ldr	r3, [pc, #132]	@ (800191c <MX_DMA_Init+0x98>)
 8001898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <MX_DMA_Init+0x98>)
 80018a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018a6:	4a1d      	ldr	r2, [pc, #116]	@ (800191c <MX_DMA_Init+0x98>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80018ae:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <MX_DMA_Init+0x98>)
 80018b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018ba:	4b18      	ldr	r3, [pc, #96]	@ (800191c <MX_DMA_Init+0x98>)
 80018bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018be:	4a17      	ldr	r2, [pc, #92]	@ (800191c <MX_DMA_Init+0x98>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6493      	str	r3, [r2, #72]	@ 0x48
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <MX_DMA_Init+0x98>)
 80018c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	200e      	movs	r0, #14
 80018d8:	f003 fa19 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80018dc:	200e      	movs	r0, #14
 80018de:	f003 fa30 	bl	8004d42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	2038      	movs	r0, #56	@ 0x38
 80018e8:	f003 fa11 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80018ec:	2038      	movs	r0, #56	@ 0x38
 80018ee:	f003 fa28 	bl	8004d42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2039      	movs	r0, #57	@ 0x39
 80018f8:	f003 fa09 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80018fc:	2039      	movs	r0, #57	@ 0x39
 80018fe:	f003 fa20 	bl	8004d42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel8_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2060      	movs	r0, #96	@ 0x60
 8001908:	f003 fa01 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 800190c:	2060      	movs	r0, #96	@ 0x60
 800190e:	f003 fa18 	bl	8004d42 <HAL_NVIC_EnableIRQ>

}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000

08001920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08c      	sub	sp, #48	@ 0x30
 8001924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001936:	4b78      	ldr	r3, [pc, #480]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	4a77      	ldr	r2, [pc, #476]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 800193c:	f043 0310 	orr.w	r3, r3, #16
 8001940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001942:	4b75      	ldr	r3, [pc, #468]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194e:	4b72      	ldr	r3, [pc, #456]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	4a71      	ldr	r2, [pc, #452]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195a:	4b6f      	ldr	r3, [pc, #444]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001966:	4b6c      	ldr	r3, [pc, #432]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	4a6b      	ldr	r2, [pc, #428]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 800196c:	f043 0320 	orr.w	r3, r3, #32
 8001970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001972:	4b69      	ldr	r3, [pc, #420]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001976:	f003 0320 	and.w	r3, r3, #32
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800197e:	4b66      	ldr	r3, [pc, #408]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001982:	4a65      	ldr	r2, [pc, #404]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 8001984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800198a:	4b63      	ldr	r3, [pc, #396]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	4b60      	ldr	r3, [pc, #384]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	4a5f      	ldr	r2, [pc, #380]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	4a59      	ldr	r2, [pc, #356]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ba:	4b57      	ldr	r3, [pc, #348]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c6:	4b54      	ldr	r3, [pc, #336]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	4a53      	ldr	r2, [pc, #332]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 80019cc:	f043 0308 	orr.w	r3, r3, #8
 80019d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d2:	4b51      	ldr	r3, [pc, #324]	@ (8001b18 <MX_GPIO_Init+0x1f8>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_ENABLE1_GPIO_GPIO_Port, M2_ENABLE1_GPIO_Pin, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	2120      	movs	r1, #32
 80019e2:	484e      	ldr	r0, [pc, #312]	@ (8001b1c <MX_GPIO_Init+0x1fc>)
 80019e4:	f003 ff98 	bl	8005918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_OUT_LED_GREEN_Pin|M1_ENABLE1_GPIO_Pin|M1_ENABLE2_GPIO_Pin|M2_ENABLE2_GPIO_Pin
 80019e8:	2200      	movs	r2, #0
 80019ea:	f648 013c 	movw	r1, #34876	@ 0x883c
 80019ee:	484c      	ldr	r0, [pc, #304]	@ (8001b20 <MX_GPIO_Init+0x200>)
 80019f0:	f003 ff92 	bl	8005918 <HAL_GPIO_WritePin>
                          |GPIO_OUT_INRUSH_Pin|GPIO_OUT_ID_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M3_ENABLE1_GPIO_GPIO_Port, M3_ENABLE1_GPIO_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019fa:	484a      	ldr	r0, [pc, #296]	@ (8001b24 <MX_GPIO_Init+0x204>)
 80019fc:	f003 ff8c 	bl	8005918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_OUT_M2_ENABLE_Pin|GPIO_OUT_M1_ENABLE_Pin|GPIO_OUT_M1_BRAKE_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001a06:	4848      	ldr	r0, [pc, #288]	@ (8001b28 <MX_GPIO_Init+0x208>)
 8001a08:	f003 ff86 	bl	8005918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_OUT_M22_BRAKE_Pin|M3_ENABLE2_GPIO_Pin|GPIO_OUT_LED_YELLOW_Pin|GPIO_OUT_LED_RED_Pin, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2165      	movs	r1, #101	@ 0x65
 8001a10:	4846      	ldr	r0, [pc, #280]	@ (8001b2c <MX_GPIO_Init+0x20c>)
 8001a12:	f003 ff81 	bl	8005918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : M2_ENABLE1_GPIO_Pin */
  GPIO_InitStruct.Pin = M2_ENABLE1_GPIO_Pin;
 8001a16:	2320      	movs	r3, #32
 8001a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(M2_ENABLE1_GPIO_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	483b      	ldr	r0, [pc, #236]	@ (8001b1c <MX_GPIO_Init+0x1fc>)
 8001a2e:	f003 fdf1 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	4619      	mov	r1, r3
 8001a46:	4837      	ldr	r0, [pc, #220]	@ (8001b24 <MX_GPIO_Init+0x204>)
 8001a48:	f003 fde4 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_LED_GREEN_Pin M1_ENABLE1_GPIO_Pin M1_ENABLE2_GPIO_Pin M2_ENABLE2_GPIO_Pin
                           GPIO_OUT_INRUSH_Pin GPIO_OUT_ID_ENABLE_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_LED_GREEN_Pin|M1_ENABLE1_GPIO_Pin|M1_ENABLE2_GPIO_Pin|M2_ENABLE2_GPIO_Pin
 8001a4c:	f648 033c 	movw	r3, #34876	@ 0x883c
 8001a50:	61fb      	str	r3, [r7, #28]
                          |GPIO_OUT_INRUSH_Pin|GPIO_OUT_ID_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a52:	2301      	movs	r3, #1
 8001a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	4619      	mov	r1, r3
 8001a64:	482e      	ldr	r0, [pc, #184]	@ (8001b20 <MX_GPIO_Init+0x200>)
 8001a66:	f003 fdd5 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_RESET_Pin */
  GPIO_InitStruct.Pin = BUTTON_RESET_Pin;
 8001a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_RESET_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	482a      	ldr	r0, [pc, #168]	@ (8001b28 <MX_GPIO_Init+0x208>)
 8001a80:	f003 fdc8 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_VOLT_V_ADC345_IN16_Pin */
  GPIO_InitStruct.Pin = M1_VOLT_V_ADC345_IN16_Pin;
 8001a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(M1_VOLT_V_ADC345_IN16_GPIO_Port, &GPIO_InitStruct);
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	4619      	mov	r1, r3
 8001a98:	4820      	ldr	r0, [pc, #128]	@ (8001b1c <MX_GPIO_Init+0x1fc>)
 8001a9a:	f003 fdbb 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC45_IN12_PFC_Current1_Pin ADC45_IN13_PFC_Current2_Pin M1_VOLT_U_ADC345_IN7_Pin M1_CURR_U_ADC345_IN8_Pin
                           M1_CURR_V_ADC345_IN9_Pin M1_VOLT_W_ADC345_IN10_Pin M1_CURR_W_ADC345_IN11_Pin */
  GPIO_InitStruct.Pin = ADC45_IN12_PFC_Current1_Pin|ADC45_IN13_PFC_Current2_Pin|M1_VOLT_U_ADC345_IN7_Pin|M1_CURR_U_ADC345_IN8_Pin
 8001a9e:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8001aa2:	61fb      	str	r3, [r7, #28]
                          |M1_CURR_V_ADC345_IN9_Pin|M1_VOLT_W_ADC345_IN10_Pin|M1_CURR_W_ADC345_IN11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	481e      	ldr	r0, [pc, #120]	@ (8001b2c <MX_GPIO_Init+0x20c>)
 8001ab4:	f003 fdae 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3_ENABLE1_GPIO_Pin */
  GPIO_InitStruct.Pin = M3_ENABLE1_GPIO_Pin;
 8001ab8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(M3_ENABLE1_GPIO_GPIO_Port, &GPIO_InitStruct);
 8001aca:	f107 031c 	add.w	r3, r7, #28
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4814      	ldr	r0, [pc, #80]	@ (8001b24 <MX_GPIO_Init+0x204>)
 8001ad2:	f003 fd9f 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_M2_ENABLE_Pin GPIO_OUT_M1_ENABLE_Pin GPIO_OUT_M1_BRAKE_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_M2_ENABLE_Pin|GPIO_OUT_M1_ENABLE_Pin|GPIO_OUT_M1_BRAKE_Pin;
 8001ad6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	4619      	mov	r1, r3
 8001aee:	480e      	ldr	r0, [pc, #56]	@ (8001b28 <MX_GPIO_Init+0x208>)
 8001af0:	f003 fd90 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_M22_BRAKE_Pin M3_ENABLE2_GPIO_Pin GPIO_OUT_LED_YELLOW_Pin GPIO_OUT_LED_RED_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_M22_BRAKE_Pin|M3_ENABLE2_GPIO_Pin|GPIO_OUT_LED_YELLOW_Pin|GPIO_OUT_LED_RED_Pin;
 8001af4:	2365      	movs	r3, #101	@ 0x65
 8001af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4808      	ldr	r0, [pc, #32]	@ (8001b2c <MX_GPIO_Init+0x20c>)
 8001b0c:	f003 fd82 	bl	8005614 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b10:	bf00      	nop
 8001b12:	3730      	adds	r7, #48	@ 0x30
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	48001000 	.word	0x48001000
 8001b20:	48001400 	.word	0x48001400
 8001b24:	48000800 	.word	0x48000800
 8001b28:	48001800 	.word	0x48001800
 8001b2c:	48000c00 	.word	0x48000c00

08001b30 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
//Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b40:	d105      	bne.n	8001b4e <HAL_ADC_ConvHalfCpltCallback+0x1e>
	{
	 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8001b42:	2201      	movs	r2, #1
 8001b44:	2108      	movs	r1, #8
 8001b46:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8001b48:	f003 fee6 	bl	8005918 <HAL_GPIO_WritePin>
	}
	else
	{
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
	}
}
 8001b4c:	e00f      	b.n	8001b6e <HAL_ADC_ConvHalfCpltCallback+0x3e>
	else if (hadc->Instance == ADC2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d105      	bne.n	8001b64 <HAL_ADC_ConvHalfCpltCallback+0x34>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2140      	movs	r1, #64	@ 0x40
 8001b5c:	4808      	ldr	r0, [pc, #32]	@ (8001b80 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8001b5e:	f003 fedb 	bl	8005918 <HAL_GPIO_WritePin>
}
 8001b62:	e004      	b.n	8001b6e <HAL_ADC_ConvHalfCpltCallback+0x3e>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	2120      	movs	r1, #32
 8001b68:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8001b6a:	f003 fed5 	bl	8005918 <HAL_GPIO_WritePin>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	48001400 	.word	0x48001400
 8001b7c:	50000100 	.word	0x50000100
 8001b80:	48000c00 	.word	0x48000c00

08001b84 <HAL_ADC_ConvCpltCallback>:

//Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b94:	d105      	bne.n	8001ba2 <HAL_ADC_ConvCpltCallback+0x1e>
	{
	 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2108      	movs	r1, #8
 8001b9a:	480c      	ldr	r0, [pc, #48]	@ (8001bcc <HAL_ADC_ConvCpltCallback+0x48>)
 8001b9c:	f003 febc 	bl	8005918 <HAL_GPIO_WritePin>
	}
	else
	{
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
	}
}
 8001ba0:	e00f      	b.n	8001bc2 <HAL_ADC_ConvCpltCallback+0x3e>
	else if (hadc->Instance == ADC2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d105      	bne.n	8001bb8 <HAL_ADC_ConvCpltCallback+0x34>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2140      	movs	r1, #64	@ 0x40
 8001bb0:	4808      	ldr	r0, [pc, #32]	@ (8001bd4 <HAL_ADC_ConvCpltCallback+0x50>)
 8001bb2:	f003 feb1 	bl	8005918 <HAL_GPIO_WritePin>
}
 8001bb6:	e004      	b.n	8001bc2 <HAL_ADC_ConvCpltCallback+0x3e>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2120      	movs	r1, #32
 8001bbc:	4805      	ldr	r0, [pc, #20]	@ (8001bd4 <HAL_ADC_ConvCpltCallback+0x50>)
 8001bbe:	f003 feab 	bl	8005918 <HAL_GPIO_WritePin>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	48001400 	.word	0x48001400
 8001bd0:	50000100 	.word	0x50000100
 8001bd4:	48000c00 	.word	0x48000c00

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
}
 8001bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <Error_Handler+0x8>

08001be4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <HAL_MspInit+0x44>)
 8001bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bee:	4a0e      	ldr	r2, [pc, #56]	@ (8001c28 <HAL_MspInit+0x44>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <HAL_MspInit+0x44>)
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <HAL_MspInit+0x44>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c06:	4a08      	ldr	r2, [pc, #32]	@ (8001c28 <HAL_MspInit+0x44>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_MspInit+0x44>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c1a:	f004 f809 	bl	8005c30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b0ac      	sub	sp, #176	@ 0xb0
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c44:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c48:	2254      	movs	r2, #84	@ 0x54
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f007 fe5d 	bl	800990c <memset>
  if(hadc->Instance==ADC1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c5a:	f040 8092 	bne.w	8001d82 <HAL_ADC_MspInit+0x156>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c62:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c64:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c6c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 fd1b 	bl	80066ac <HAL_RCCEx_PeriphCLKConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8001c7c:	f7ff ffac 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c80:	4ba7      	ldr	r3, [pc, #668]	@ (8001f20 <HAL_ADC_MspInit+0x2f4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	4aa6      	ldr	r2, [pc, #664]	@ (8001f20 <HAL_ADC_MspInit+0x2f4>)
 8001c88:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c8a:	4ba5      	ldr	r3, [pc, #660]	@ (8001f20 <HAL_ADC_MspInit+0x2f4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d10b      	bne.n	8001caa <HAL_ADC_MspInit+0x7e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c92:	4ba4      	ldr	r3, [pc, #656]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c96:	4aa3      	ldr	r2, [pc, #652]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001c98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c9e:	4ba1      	ldr	r3, [pc, #644]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001caa:	4b9e      	ldr	r3, [pc, #632]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cae:	4a9d      	ldr	r2, [pc, #628]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb6:	4b9b      	ldr	r3, [pc, #620]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	4b98      	ldr	r3, [pc, #608]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc6:	4a97      	ldr	r2, [pc, #604]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cce:	4b95      	ldr	r3, [pc, #596]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	488d      	ldr	r0, [pc, #564]	@ (8001f28 <HAL_ADC_MspInit+0x2fc>)
 8001cf4:	f003 fc8e 	bl	8005614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cf8:	230c      	movs	r3, #12
 8001cfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d14:	f003 fc7e 	bl	8005614 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8001d18:	4b84      	ldr	r3, [pc, #528]	@ (8001f2c <HAL_ADC_MspInit+0x300>)
 8001d1a:	4a85      	ldr	r2, [pc, #532]	@ (8001f30 <HAL_ADC_MspInit+0x304>)
 8001d1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d1e:	4b83      	ldr	r3, [pc, #524]	@ (8001f2c <HAL_ADC_MspInit+0x300>)
 8001d20:	2205      	movs	r2, #5
 8001d22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d24:	4b81      	ldr	r3, [pc, #516]	@ (8001f2c <HAL_ADC_MspInit+0x300>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d2a:	4b80      	ldr	r3, [pc, #512]	@ (8001f2c <HAL_ADC_MspInit+0x300>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d30:	4b7e      	ldr	r3, [pc, #504]	@ (8001f2c <HAL_ADC_MspInit+0x300>)
 8001d32:	2280      	movs	r2, #128	@ 0x80
 8001d34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d36:	4b7d      	ldr	r3, [pc, #500]	@ (8001f2c <HAL_ADC_MspInit+0x300>)
 8001d38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d3e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f2c <HAL_ADC_MspInit+0x300>)
 8001d40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d46:	4b79      	ldr	r3, [pc, #484]	@ (8001f2c <HAL_ADC_MspInit+0x300>)
 8001d48:	2220      	movs	r2, #32
 8001d4a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001d4c:	4b77      	ldr	r3, [pc, #476]	@ (8001f2c <HAL_ADC_MspInit+0x300>)
 8001d4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d54:	4875      	ldr	r0, [pc, #468]	@ (8001f2c <HAL_ADC_MspInit+0x300>)
 8001d56:	f003 f9eb 	bl	8005130 <HAL_DMA_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001d60:	f7ff ff3a 	bl	8001bd8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a71      	ldr	r2, [pc, #452]	@ (8001f2c <HAL_ADC_MspInit+0x300>)
 8001d68:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d6a:	4a70      	ldr	r2, [pc, #448]	@ (8001f2c <HAL_ADC_MspInit+0x300>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2101      	movs	r1, #1
 8001d74:	2012      	movs	r0, #18
 8001d76:	f002 ffca 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d7a:	2012      	movs	r0, #18
 8001d7c:	f002 ffe1 	bl	8004d42 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC4_MspInit 1 */

    /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001d80:	e21f      	b.n	80021c2 <HAL_ADC_MspInit+0x596>
  else if(hadc->Instance==ADC2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a6b      	ldr	r2, [pc, #428]	@ (8001f34 <HAL_ADC_MspInit+0x308>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	f040 80dd 	bne.w	8001f48 <HAL_ADC_MspInit+0x31c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d92:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001d94:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001d98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001da0:	4618      	mov	r0, r3
 8001da2:	f004 fc83 	bl	80066ac <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8001dac:	f7ff ff14 	bl	8001bd8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001db0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f20 <HAL_ADC_MspInit+0x2f4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	4a5a      	ldr	r2, [pc, #360]	@ (8001f20 <HAL_ADC_MspInit+0x2f4>)
 8001db8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001dba:	4b59      	ldr	r3, [pc, #356]	@ (8001f20 <HAL_ADC_MspInit+0x2f4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d10b      	bne.n	8001dda <HAL_ADC_MspInit+0x1ae>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001dc2:	4b58      	ldr	r3, [pc, #352]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc6:	4a57      	ldr	r2, [pc, #348]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001dc8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dce:	4b55      	ldr	r3, [pc, #340]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dda:	4b52      	ldr	r3, [pc, #328]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dde:	4a51      	ldr	r2, [pc, #324]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001de0:	f043 0320 	orr.w	r3, r3, #32
 8001de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de6:	4b4f      	ldr	r3, [pc, #316]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8001df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df2:	4b4c      	ldr	r3, [pc, #304]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df6:	4a4b      	ldr	r2, [pc, #300]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dfe:	4b49      	ldr	r3, [pc, #292]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	4b46      	ldr	r3, [pc, #280]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0e:	4a45      	ldr	r2, [pc, #276]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e16:	4b43      	ldr	r3, [pc, #268]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	4b40      	ldr	r3, [pc, #256]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	4a3f      	ldr	r2, [pc, #252]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f24 <HAL_ADC_MspInit+0x2f8>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = ADC2_IN10_PFC_AC_V_Pin;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e40:	2303      	movs	r3, #3
 8001e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(ADC2_IN10_PFC_AC_V_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e50:	4619      	mov	r1, r3
 8001e52:	4839      	ldr	r0, [pc, #228]	@ (8001f38 <HAL_ADC_MspInit+0x30c>)
 8001e54:	f003 fbde 	bl	8005614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e58:	233f      	movs	r3, #63	@ 0x3f
 8001e5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e6e:	4619      	mov	r1, r3
 8001e70:	482d      	ldr	r0, [pc, #180]	@ (8001f28 <HAL_ADC_MspInit+0x2fc>)
 8001e72:	f003 fbcf 	bl	8005614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2_RES_EX_DAC1_OUT2_Pin|M3_TEMP_ID_ADC2IN3_Pin;
 8001e76:	2360      	movs	r3, #96	@ 0x60
 8001e78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e92:	f003 fbbf 	bl	8005614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e96:	2304      	movs	r3, #4
 8001e98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001eac:	4619      	mov	r1, r3
 8001eae:	4823      	ldr	r0, [pc, #140]	@ (8001f3c <HAL_ADC_MspInit+0x310>)
 8001eb0:	f003 fbb0 	bl	8005614 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel8;
 8001eb4:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <HAL_ADC_MspInit+0x314>)
 8001eb6:	4a23      	ldr	r2, [pc, #140]	@ (8001f44 <HAL_ADC_MspInit+0x318>)
 8001eb8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001eba:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <HAL_ADC_MspInit+0x314>)
 8001ebc:	2224      	movs	r2, #36	@ 0x24
 8001ebe:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <HAL_ADC_MspInit+0x314>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <HAL_ADC_MspInit+0x314>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f40 <HAL_ADC_MspInit+0x314>)
 8001ece:	2280      	movs	r2, #128	@ 0x80
 8001ed0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <HAL_ADC_MspInit+0x314>)
 8001ed4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ed8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001eda:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_ADC_MspInit+0x314>)
 8001edc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ee0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <HAL_ADC_MspInit+0x314>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8001ee8:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <HAL_ADC_MspInit+0x314>)
 8001eea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001ef0:	4813      	ldr	r0, [pc, #76]	@ (8001f40 <HAL_ADC_MspInit+0x314>)
 8001ef2:	f003 f91d 	bl	8005130 <HAL_DMA_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_ADC_MspInit+0x2d4>
      Error_Handler();
 8001efc:	f7ff fe6c 	bl	8001bd8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a0f      	ldr	r2, [pc, #60]	@ (8001f40 <HAL_ADC_MspInit+0x314>)
 8001f04:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f06:	4a0e      	ldr	r2, [pc, #56]	@ (8001f40 <HAL_ADC_MspInit+0x314>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2101      	movs	r1, #1
 8001f10:	2012      	movs	r0, #18
 8001f12:	f002 fefc 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f16:	2012      	movs	r0, #18
 8001f18:	f002 ff13 	bl	8004d42 <HAL_NVIC_EnableIRQ>
}
 8001f1c:	e151      	b.n	80021c2 <HAL_ADC_MspInit+0x596>
 8001f1e:	bf00      	nop
 8001f20:	2000882c 	.word	0x2000882c
 8001f24:	40021000 	.word	0x40021000
 8001f28:	48000800 	.word	0x48000800
 8001f2c:	20008228 	.word	0x20008228
 8001f30:	40020044 	.word	0x40020044
 8001f34:	50000100 	.word	0x50000100
 8001f38:	48001400 	.word	0x48001400
 8001f3c:	48000400 	.word	0x48000400
 8001f40:	20008288 	.word	0x20008288
 8001f44:	40020094 	.word	0x40020094
  else if(hadc->Instance==ADC3)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a9f      	ldr	r2, [pc, #636]	@ (80021cc <HAL_ADC_MspInit+0x5a0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	f040 80a7 	bne.w	80020a2 <HAL_ADC_MspInit+0x476>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001f54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f58:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001f5a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001f5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f62:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f66:	4618      	mov	r0, r3
 8001f68:	f004 fba0 	bl	80066ac <HAL_RCCEx_PeriphCLKConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_ADC_MspInit+0x34a>
      Error_Handler();
 8001f72:	f7ff fe31 	bl	8001bd8 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001f76:	4b96      	ldr	r3, [pc, #600]	@ (80021d0 <HAL_ADC_MspInit+0x5a4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	4a94      	ldr	r2, [pc, #592]	@ (80021d0 <HAL_ADC_MspInit+0x5a4>)
 8001f7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001f80:	4b93      	ldr	r3, [pc, #588]	@ (80021d0 <HAL_ADC_MspInit+0x5a4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d10b      	bne.n	8001fa0 <HAL_ADC_MspInit+0x374>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001f88:	4b92      	ldr	r3, [pc, #584]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8c:	4a91      	ldr	r2, [pc, #580]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8001f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f94:	4b8f      	ldr	r3, [pc, #572]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8001f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fa0:	4b8c      	ldr	r3, [pc, #560]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8001fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa4:	4a8b      	ldr	r2, [pc, #556]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8001fa6:	f043 0310 	orr.w	r3, r3, #16
 8001faa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fac:	4b89      	ldr	r3, [pc, #548]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8001fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	623b      	str	r3, [r7, #32]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb8:	4b86      	ldr	r3, [pc, #536]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbc:	4a85      	ldr	r2, [pc, #532]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8001fbe:	f043 0302 	orr.w	r3, r3, #2
 8001fc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc4:	4b83      	ldr	r3, [pc, #524]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd0:	4b80      	ldr	r3, [pc, #512]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd4:	4a7f      	ldr	r2, [pc, #508]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8001fd6:	f043 0308 	orr.w	r3, r3, #8
 8001fda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fdc:	4b7d      	ldr	r3, [pc, #500]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8001fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|M1_VOLT_V_ADC345_IN16_Pin;
 8001fe8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001fec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ffc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002000:	4619      	mov	r1, r3
 8002002:	4875      	ldr	r0, [pc, #468]	@ (80021d8 <HAL_ADC_MspInit+0x5ac>)
 8002004:	f003 fb06 	bl	8005614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_VBUS_ADC3_IN5_Pin;
 8002008:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800200c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002010:	2303      	movs	r3, #3
 8002012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(M1_VBUS_ADC3_IN5_GPIO_Port, &GPIO_InitStruct);
 800201c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002020:	4619      	mov	r1, r3
 8002022:	486e      	ldr	r0, [pc, #440]	@ (80021dc <HAL_ADC_MspInit+0x5b0>)
 8002024:	f003 faf6 	bl	8005614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_VOLT_U_ADC345_IN7_Pin|M1_CURR_U_ADC345_IN8_Pin|M1_CURR_V_ADC345_IN9_Pin|M1_VOLT_W_ADC345_IN10_Pin
 8002028:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 800202c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002030:	2303      	movs	r3, #3
 8002032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002040:	4619      	mov	r1, r3
 8002042:	4867      	ldr	r0, [pc, #412]	@ (80021e0 <HAL_ADC_MspInit+0x5b4>)
 8002044:	f003 fae6 	bl	8005614 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel1;
 8002048:	4b66      	ldr	r3, [pc, #408]	@ (80021e4 <HAL_ADC_MspInit+0x5b8>)
 800204a:	4a67      	ldr	r2, [pc, #412]	@ (80021e8 <HAL_ADC_MspInit+0x5bc>)
 800204c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800204e:	4b65      	ldr	r3, [pc, #404]	@ (80021e4 <HAL_ADC_MspInit+0x5b8>)
 8002050:	2225      	movs	r2, #37	@ 0x25
 8002052:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002054:	4b63      	ldr	r3, [pc, #396]	@ (80021e4 <HAL_ADC_MspInit+0x5b8>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800205a:	4b62      	ldr	r3, [pc, #392]	@ (80021e4 <HAL_ADC_MspInit+0x5b8>)
 800205c:	2200      	movs	r2, #0
 800205e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002060:	4b60      	ldr	r3, [pc, #384]	@ (80021e4 <HAL_ADC_MspInit+0x5b8>)
 8002062:	2280      	movs	r2, #128	@ 0x80
 8002064:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002066:	4b5f      	ldr	r3, [pc, #380]	@ (80021e4 <HAL_ADC_MspInit+0x5b8>)
 8002068:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800206c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800206e:	4b5d      	ldr	r3, [pc, #372]	@ (80021e4 <HAL_ADC_MspInit+0x5b8>)
 8002070:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002074:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002076:	4b5b      	ldr	r3, [pc, #364]	@ (80021e4 <HAL_ADC_MspInit+0x5b8>)
 8002078:	2220      	movs	r2, #32
 800207a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800207c:	4b59      	ldr	r3, [pc, #356]	@ (80021e4 <HAL_ADC_MspInit+0x5b8>)
 800207e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002082:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002084:	4857      	ldr	r0, [pc, #348]	@ (80021e4 <HAL_ADC_MspInit+0x5b8>)
 8002086:	f003 f853 	bl	8005130 <HAL_DMA_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_ADC_MspInit+0x468>
      Error_Handler();
 8002090:	f7ff fda2 	bl	8001bd8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a53      	ldr	r2, [pc, #332]	@ (80021e4 <HAL_ADC_MspInit+0x5b8>)
 8002098:	655a      	str	r2, [r3, #84]	@ 0x54
 800209a:	4a52      	ldr	r2, [pc, #328]	@ (80021e4 <HAL_ADC_MspInit+0x5b8>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80020a0:	e08f      	b.n	80021c2 <HAL_ADC_MspInit+0x596>
  else if(hadc->Instance==ADC4)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a51      	ldr	r2, [pc, #324]	@ (80021ec <HAL_ADC_MspInit+0x5c0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	f040 808a 	bne.w	80021c2 <HAL_ADC_MspInit+0x596>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80020ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80020b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80020b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020bc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020c0:	4618      	mov	r0, r3
 80020c2:	f004 faf3 	bl	80066ac <HAL_RCCEx_PeriphCLKConfig>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_ADC_MspInit+0x4a4>
      Error_Handler();
 80020cc:	f7ff fd84 	bl	8001bd8 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80020d0:	4b3f      	ldr	r3, [pc, #252]	@ (80021d0 <HAL_ADC_MspInit+0x5a4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	4a3e      	ldr	r2, [pc, #248]	@ (80021d0 <HAL_ADC_MspInit+0x5a4>)
 80020d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80020da:	4b3d      	ldr	r3, [pc, #244]	@ (80021d0 <HAL_ADC_MspInit+0x5a4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d10b      	bne.n	80020fa <HAL_ADC_MspInit+0x4ce>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80020e2:	4b3c      	ldr	r3, [pc, #240]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	4a3b      	ldr	r2, [pc, #236]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ee:	4b39      	ldr	r3, [pc, #228]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020fa:	4b36      	ldr	r3, [pc, #216]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	4a35      	ldr	r2, [pc, #212]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8002100:	f043 0310 	orr.w	r3, r3, #16
 8002104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002106:	4b33      	ldr	r3, [pc, #204]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002112:	4b30      	ldr	r3, [pc, #192]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	4a2f      	ldr	r2, [pc, #188]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211e:	4b2d      	ldr	r3, [pc, #180]	@ (80021d4 <HAL_ADC_MspInit+0x5a8>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_VOLT_V_ADC345_IN16_Pin|ADC4_IN1_MORPHO_Pin|M1_TEMP_ID_ADC4_IN2_Pin;
 800212a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800212e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002132:	2303      	movs	r3, #3
 8002134:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800213e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002142:	4619      	mov	r1, r3
 8002144:	4824      	ldr	r0, [pc, #144]	@ (80021d8 <HAL_ADC_MspInit+0x5ac>)
 8002146:	f003 fa65 	bl	8005614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC45_IN12_PFC_Current1_Pin|ADC45_IN13_PFC_Current2_Pin|M1_VOLT_U_ADC345_IN7_Pin|M1_CURR_U_ADC345_IN8_Pin
 800214a:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 800214e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002152:	2303      	movs	r3, #3
 8002154:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002162:	4619      	mov	r1, r3
 8002164:	481e      	ldr	r0, [pc, #120]	@ (80021e0 <HAL_ADC_MspInit+0x5b4>)
 8002166:	f003 fa55 	bl	8005614 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 800216a:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <HAL_ADC_MspInit+0x5c4>)
 800216c:	4a21      	ldr	r2, [pc, #132]	@ (80021f4 <HAL_ADC_MspInit+0x5c8>)
 800216e:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8002170:	4b1f      	ldr	r3, [pc, #124]	@ (80021f0 <HAL_ADC_MspInit+0x5c4>)
 8002172:	2226      	movs	r2, #38	@ 0x26
 8002174:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002176:	4b1e      	ldr	r3, [pc, #120]	@ (80021f0 <HAL_ADC_MspInit+0x5c4>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800217c:	4b1c      	ldr	r3, [pc, #112]	@ (80021f0 <HAL_ADC_MspInit+0x5c4>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8002182:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <HAL_ADC_MspInit+0x5c4>)
 8002184:	2280      	movs	r2, #128	@ 0x80
 8002186:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002188:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <HAL_ADC_MspInit+0x5c4>)
 800218a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800218e:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002190:	4b17      	ldr	r3, [pc, #92]	@ (80021f0 <HAL_ADC_MspInit+0x5c4>)
 8002192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002196:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8002198:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <HAL_ADC_MspInit+0x5c4>)
 800219a:	2220      	movs	r2, #32
 800219c:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 800219e:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <HAL_ADC_MspInit+0x5c4>)
 80021a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80021a6:	4812      	ldr	r0, [pc, #72]	@ (80021f0 <HAL_ADC_MspInit+0x5c4>)
 80021a8:	f002 ffc2 	bl	8005130 <HAL_DMA_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_ADC_MspInit+0x58a>
      Error_Handler();
 80021b2:	f7ff fd11 	bl	8001bd8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a0d      	ldr	r2, [pc, #52]	@ (80021f0 <HAL_ADC_MspInit+0x5c4>)
 80021ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80021bc:	4a0c      	ldr	r2, [pc, #48]	@ (80021f0 <HAL_ADC_MspInit+0x5c4>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80021c2:	bf00      	nop
 80021c4:	37b0      	adds	r7, #176	@ 0xb0
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	50000400 	.word	0x50000400
 80021d0:	20008830 	.word	0x20008830
 80021d4:	40021000 	.word	0x40021000
 80021d8:	48001000 	.word	0x48001000
 80021dc:	48000400 	.word	0x48000400
 80021e0:	48000c00 	.word	0x48000c00
 80021e4:	200082e8 	.word	0x200082e8
 80021e8:	40020408 	.word	0x40020408
 80021ec:	50000500 	.word	0x50000500
 80021f0:	20008348 	.word	0x20008348
 80021f4:	4002041c 	.word	0x4002041c

080021f8 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	@ 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a15      	ldr	r2, [pc, #84]	@ (800226c <HAL_DAC_MspInit+0x74>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d124      	bne.n	8002264 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800221a:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <HAL_DAC_MspInit+0x78>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	4a14      	ldr	r2, [pc, #80]	@ (8002270 <HAL_DAC_MspInit+0x78>)
 8002220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002226:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_DAC_MspInit+0x78>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <HAL_DAC_MspInit+0x78>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002236:	4a0e      	ldr	r2, [pc, #56]	@ (8002270 <HAL_DAC_MspInit+0x78>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800223e:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <HAL_DAC_MspInit+0x78>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = M1_RES_EX_DAC1_OUT1_Pin|M2_RES_EX_DAC1_OUT2_Pin;
 800224a:	2330      	movs	r3, #48	@ 0x30
 800224c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800224e:	2303      	movs	r3, #3
 8002250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	4619      	mov	r1, r3
 800225c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002260:	f003 f9d8 	bl	8005614 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002264:	bf00      	nop
 8002266:	3728      	adds	r7, #40	@ 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	50000800 	.word	0x50000800
 8002270:	40021000 	.word	0x40021000

08002274 <HAL_OPAMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hopamp: OPAMP handle pointer
  * @retval None
  */
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	@ 0x30
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP3)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3b      	ldr	r2, [pc, #236]	@ (8002380 <HAL_OPAMP_MspInit+0x10c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d118      	bne.n	80022c8 <HAL_OPAMP_MspInit+0x54>
  {
    /* USER CODE BEGIN OPAMP3_MspInit 0 */

    /* USER CODE END OPAMP3_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002296:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <HAL_OPAMP_MspInit+0x110>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229a:	4a3a      	ldr	r2, [pc, #232]	@ (8002384 <HAL_OPAMP_MspInit+0x110>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022a2:	4b38      	ldr	r3, [pc, #224]	@ (8002384 <HAL_OPAMP_MspInit+0x110>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP3 GPIO Configuration
    PB0     ------> OPAMP3_VINP
    PB1     ------> OPAMP3_VOUT
    PB2     ------> OPAMP3_VINM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80022ae:	2307      	movs	r3, #7
 80022b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022b2:	2303      	movs	r3, #3
 80022b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	4831      	ldr	r0, [pc, #196]	@ (8002388 <HAL_OPAMP_MspInit+0x114>)
 80022c2:	f003 f9a7 	bl	8005614 <HAL_GPIO_Init>
    /* USER CODE BEGIN OPAMP5_MspInit 1 */

    /* USER CODE END OPAMP5_MspInit 1 */
  }

}
 80022c6:	e056      	b.n	8002376 <HAL_OPAMP_MspInit+0x102>
  else if(hopamp->Instance==OPAMP4)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a2f      	ldr	r2, [pc, #188]	@ (800238c <HAL_OPAMP_MspInit+0x118>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d119      	bne.n	8002306 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002384 <HAL_OPAMP_MspInit+0x110>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002384 <HAL_OPAMP_MspInit+0x110>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022de:	4b29      	ldr	r3, [pc, #164]	@ (8002384 <HAL_OPAMP_MspInit+0x110>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80022ea:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f0:	2303      	movs	r3, #3
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f8:	f107 031c 	add.w	r3, r7, #28
 80022fc:	4619      	mov	r1, r3
 80022fe:	4822      	ldr	r0, [pc, #136]	@ (8002388 <HAL_OPAMP_MspInit+0x114>)
 8002300:	f003 f988 	bl	8005614 <HAL_GPIO_Init>
}
 8002304:	e037      	b.n	8002376 <HAL_OPAMP_MspInit+0x102>
  else if(hopamp->Instance==OPAMP5)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a21      	ldr	r2, [pc, #132]	@ (8002390 <HAL_OPAMP_MspInit+0x11c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d132      	bne.n	8002376 <HAL_OPAMP_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002310:	4b1c      	ldr	r3, [pc, #112]	@ (8002384 <HAL_OPAMP_MspInit+0x110>)
 8002312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002314:	4a1b      	ldr	r2, [pc, #108]	@ (8002384 <HAL_OPAMP_MspInit+0x110>)
 8002316:	f043 0302 	orr.w	r3, r3, #2
 800231a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_OPAMP_MspInit+0x110>)
 800231e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	4b16      	ldr	r3, [pc, #88]	@ (8002384 <HAL_OPAMP_MspInit+0x110>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232c:	4a15      	ldr	r2, [pc, #84]	@ (8002384 <HAL_OPAMP_MspInit+0x110>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002334:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <HAL_OPAMP_MspInit+0x110>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002340:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002346:	2303      	movs	r3, #3
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234e:	f107 031c 	add.w	r3, r7, #28
 8002352:	4619      	mov	r1, r3
 8002354:	480c      	ldr	r0, [pc, #48]	@ (8002388 <HAL_OPAMP_MspInit+0x114>)
 8002356:	f003 f95d 	bl	8005614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800235a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800235e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002360:	2303      	movs	r3, #3
 8002362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	f107 031c 	add.w	r3, r7, #28
 800236c:	4619      	mov	r1, r3
 800236e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002372:	f003 f94f 	bl	8005614 <HAL_GPIO_Init>
}
 8002376:	bf00      	nop
 8002378:	3730      	adds	r7, #48	@ 0x30
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40010308 	.word	0x40010308
 8002384:	40021000 	.word	0x40021000
 8002388:	48000400 	.word	0x48000400
 800238c:	4001030c 	.word	0x4001030c
 8002390:	40010310 	.word	0x40010310

08002394 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	@ 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a17      	ldr	r2, [pc, #92]	@ (8002410 <HAL_SPI_MspInit+0x7c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d127      	bne.n	8002406 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023b6:	4b17      	ldr	r3, [pc, #92]	@ (8002414 <HAL_SPI_MspInit+0x80>)
 80023b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ba:	4a16      	ldr	r2, [pc, #88]	@ (8002414 <HAL_SPI_MspInit+0x80>)
 80023bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80023c2:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <HAL_SPI_MspInit+0x80>)
 80023c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023ce:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <HAL_SPI_MspInit+0x80>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d2:	4a10      	ldr	r2, [pc, #64]	@ (8002414 <HAL_SPI_MspInit+0x80>)
 80023d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023da:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <HAL_SPI_MspInit+0x80>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    PG5     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80023e6:	233c      	movs	r3, #60	@ 0x3c
 80023e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023f6:	2305      	movs	r3, #5
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4619      	mov	r1, r3
 8002400:	4805      	ldr	r0, [pc, #20]	@ (8002418 <HAL_SPI_MspInit+0x84>)
 8002402:	f003 f907 	bl	8005614 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002406:	bf00      	nop
 8002408:	3728      	adds	r7, #40	@ 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40013000 	.word	0x40013000
 8002414:	40021000 	.word	0x40021000
 8002418:	48001800 	.word	0x48001800

0800241c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b09a      	sub	sp, #104	@ 0x68
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a9f      	ldr	r2, [pc, #636]	@ (80026b8 <HAL_TIM_Base_MspInit+0x29c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d159      	bne.n	80024f2 <HAL_TIM_Base_MspInit+0xd6>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800243e:	4b9f      	ldr	r3, [pc, #636]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002442:	4a9e      	ldr	r2, [pc, #632]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002444:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002448:	6613      	str	r3, [r2, #96]	@ 0x60
 800244a:	4b9c      	ldr	r3, [pc, #624]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 800244c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002452:	653b      	str	r3, [r7, #80]	@ 0x50
 8002454:	6d3b      	ldr	r3, [r7, #80]	@ 0x50

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002456:	4b99      	ldr	r3, [pc, #612]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	4a98      	ldr	r2, [pc, #608]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 800245c:	f043 0310 	orr.w	r3, r3, #16
 8002460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002462:	4b96      	ldr	r3, [pc, #600]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800246c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	4b93      	ldr	r3, [pc, #588]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002472:	4a92      	ldr	r2, [pc, #584]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800247a:	4b90      	ldr	r3, [pc, #576]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PA11     ------> TIM1_BKIN2
    PA15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = M2_PWM_UH_TIM1_CH1_Pin|M2_PWM_VH_TIM1_CH2_Pin;
 8002486:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800248a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002498:	2302      	movs	r3, #2
 800249a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800249c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024a0:	4619      	mov	r1, r3
 80024a2:	4887      	ldr	r0, [pc, #540]	@ (80026c0 <HAL_TIM_Base_MspInit+0x2a4>)
 80024a4:	f003 f8b6 	bl	8005614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M2_TIM1_BKIN2_Pin;
 80024a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024ac:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ae:	2312      	movs	r3, #18
 80024b0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 80024ba:	230c      	movs	r3, #12
 80024bc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M2_TIM1_BKIN2_GPIO_Port, &GPIO_InitStruct);
 80024be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024c2:	4619      	mov	r1, r3
 80024c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024c8:	f003 f8a4 	bl	8005614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024d0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d2:	2312      	movs	r3, #18
 80024d4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80024de:	2309      	movs	r3, #9
 80024e0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024e6:	4619      	mov	r1, r3
 80024e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ec:	f003 f892 	bl	8005614 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 80024f0:	e18d      	b.n	800280e <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM3)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a73      	ldr	r2, [pc, #460]	@ (80026c4 <HAL_TIM_Base_MspInit+0x2a8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d128      	bne.n	800254e <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024fc:	4b6f      	ldr	r3, [pc, #444]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	4a6e      	ldr	r2, [pc, #440]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002502:	f043 0302 	orr.w	r3, r3, #2
 8002506:	6593      	str	r3, [r2, #88]	@ 0x58
 8002508:	4b6c      	ldr	r3, [pc, #432]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	647b      	str	r3, [r7, #68]	@ 0x44
 8002512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002514:	4b69      	ldr	r3, [pc, #420]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002518:	4a68      	ldr	r2, [pc, #416]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 800251a:	f043 0310 	orr.w	r3, r3, #16
 800251e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002520:	4b66      	ldr	r3, [pc, #408]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	643b      	str	r3, [r7, #64]	@ 0x40
 800252a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pin = M1_HALL_H1_TIM3_CH1_Pin|M1_HALL_H2_TIM3_CH2_Pin|M1_HALL_H3_TIM3_CH3_Pin;
 800252c:	231c      	movs	r3, #28
 800252e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	2300      	movs	r3, #0
 800253a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800253c:	2302      	movs	r3, #2
 800253e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002540:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002544:	4619      	mov	r1, r3
 8002546:	485e      	ldr	r0, [pc, #376]	@ (80026c0 <HAL_TIM_Base_MspInit+0x2a4>)
 8002548:	f003 f864 	bl	8005614 <HAL_GPIO_Init>
}
 800254c:	e15f      	b.n	800280e <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM4)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a5d      	ldr	r2, [pc, #372]	@ (80026c8 <HAL_TIM_Base_MspInit+0x2ac>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d147      	bne.n	80025e8 <HAL_TIM_Base_MspInit+0x1cc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002558:	4b58      	ldr	r3, [pc, #352]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255c:	4a57      	ldr	r2, [pc, #348]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	6593      	str	r3, [r2, #88]	@ 0x58
 8002564:	4b55      	ldr	r3, [pc, #340]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800256e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002570:	4b52      	ldr	r3, [pc, #328]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002574:	4a51      	ldr	r2, [pc, #324]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800257c:	4b4f      	ldr	r3, [pc, #316]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002588:	4b4c      	ldr	r3, [pc, #304]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 800258a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258c:	4a4b      	ldr	r2, [pc, #300]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 800258e:	f043 0302 	orr.w	r3, r3, #2
 8002592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002594:	4b49      	ldr	r3, [pc, #292]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	637b      	str	r3, [r7, #52]	@ 0x34
 800259e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Pin = M2_HALL_H2_TIM4_CH2_Pin;
 80025a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025a4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80025b2:	230a      	movs	r3, #10
 80025b4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M2_HALL_H2_TIM4_CH2_GPIO_Port, &GPIO_InitStruct);
 80025b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025ba:	4619      	mov	r1, r3
 80025bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025c0:	f003 f828 	bl	8005614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2_HALL_H1_TIM4_CH1_Pin|M2_HALL_H3_TIM4_CH3_Pin;
 80025c4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80025c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025d6:	2302      	movs	r3, #2
 80025d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025de:	4619      	mov	r1, r3
 80025e0:	483a      	ldr	r0, [pc, #232]	@ (80026cc <HAL_TIM_Base_MspInit+0x2b0>)
 80025e2:	f003 f817 	bl	8005614 <HAL_GPIO_Init>
}
 80025e6:	e112      	b.n	800280e <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM8)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a38      	ldr	r2, [pc, #224]	@ (80026d0 <HAL_TIM_Base_MspInit+0x2b4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d172      	bne.n	80026d8 <HAL_TIM_Base_MspInit+0x2bc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025f2:	4b32      	ldr	r3, [pc, #200]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 80025f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f6:	4a31      	ldr	r2, [pc, #196]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 80025f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80025fe:	4b2f      	ldr	r3, [pc, #188]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002606:	633b      	str	r3, [r7, #48]	@ 0x30
 8002608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	4b2c      	ldr	r3, [pc, #176]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 800260c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260e:	4a2b      	ldr	r2, [pc, #172]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002616:	4b29      	ldr	r3, [pc, #164]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002622:	4b26      	ldr	r3, [pc, #152]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002626:	4a25      	ldr	r2, [pc, #148]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002628:	f043 0308 	orr.w	r3, r3, #8
 800262c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800262e:	4b23      	ldr	r3, [pc, #140]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263a:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 800263c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263e:	4a1f      	ldr	r2, [pc, #124]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002640:	f043 0302 	orr.w	r3, r3, #2
 8002644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002646:	4b1d      	ldr	r3, [pc, #116]	@ (80026bc <HAL_TIM_Base_MspInit+0x2a0>)
 8002648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = M1_TIM8_ETR_Pin;
 8002652:	2301      	movs	r3, #1
 8002654:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002662:	230a      	movs	r3, #10
 8002664:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M1_TIM8_ETR_GPIO_Port, &GPIO_InitStruct);
 8002666:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800266a:	4619      	mov	r1, r3
 800266c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002670:	f002 ffd0 	bl	8005614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TIM8_BKIN2_Pin;
 8002674:	2302      	movs	r3, #2
 8002676:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002678:	2312      	movs	r3, #18
 800267a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 8002684:	2306      	movs	r3, #6
 8002686:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M1_TIM8_BKIN2_GPIO_Port, &GPIO_InitStruct);
 8002688:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800268c:	4619      	mov	r1, r3
 800268e:	4811      	ldr	r0, [pc, #68]	@ (80026d4 <HAL_TIM_Base_MspInit+0x2b8>)
 8002690:	f002 ffc0 	bl	8005614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TIM8_BKIN_Pin;
 8002694:	2380      	movs	r3, #128	@ 0x80
 8002696:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002698:	2312      	movs	r3, #18
 800269a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a0:	2300      	movs	r3, #0
 80026a2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80026a4:	2305      	movs	r3, #5
 80026a6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M1_TIM8_BKIN_GPIO_Port, &GPIO_InitStruct);
 80026a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026ac:	4619      	mov	r1, r3
 80026ae:	4807      	ldr	r0, [pc, #28]	@ (80026cc <HAL_TIM_Base_MspInit+0x2b0>)
 80026b0:	f002 ffb0 	bl	8005614 <HAL_GPIO_Init>
}
 80026b4:	e0ab      	b.n	800280e <HAL_TIM_Base_MspInit+0x3f2>
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	48001000 	.word	0x48001000
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40000800 	.word	0x40000800
 80026cc:	48000400 	.word	0x48000400
 80026d0:	40013400 	.word	0x40013400
 80026d4:	48000c00 	.word	0x48000c00
  else if(htim_base->Instance==TIM16)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002818 <HAL_TIM_Base_MspInit+0x3fc>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d128      	bne.n	8002734 <HAL_TIM_Base_MspInit+0x318>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80026e2:	4b4e      	ldr	r3, [pc, #312]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 80026e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e6:	4a4d      	ldr	r2, [pc, #308]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80026ee:	4b4b      	ldr	r3, [pc, #300]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 80026f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	623b      	str	r3, [r7, #32]
 80026f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	4b48      	ldr	r3, [pc, #288]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fe:	4a47      	ldr	r2, [pc, #284]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002706:	4b45      	ldr	r3, [pc, #276]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PFC_TIM16_BKIN_Pin;
 8002712:	2320      	movs	r3, #32
 8002714:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002716:	2312      	movs	r3, #18
 8002718:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002722:	2301      	movs	r3, #1
 8002724:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(PFC_TIM16_BKIN_GPIO_Port, &GPIO_InitStruct);
 8002726:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800272a:	4619      	mov	r1, r3
 800272c:	483c      	ldr	r0, [pc, #240]	@ (8002820 <HAL_TIM_Base_MspInit+0x404>)
 800272e:	f002 ff71 	bl	8005614 <HAL_GPIO_Init>
}
 8002732:	e06c      	b.n	800280e <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM17)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a3a      	ldr	r2, [pc, #232]	@ (8002824 <HAL_TIM_Base_MspInit+0x408>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d128      	bne.n	8002790 <HAL_TIM_Base_MspInit+0x374>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800273e:	4b37      	ldr	r3, [pc, #220]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 8002740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002742:	4a36      	ldr	r2, [pc, #216]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 8002744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002748:	6613      	str	r3, [r2, #96]	@ 0x60
 800274a:	4b34      	ldr	r3, [pc, #208]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 800274c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	4b31      	ldr	r3, [pc, #196]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	4a30      	ldr	r2, [pc, #192]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002762:	4b2e      	ldr	r3, [pc, #184]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PFC_TIM17_BKIN_Pin;
 800276e:	2310      	movs	r3, #16
 8002770:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002772:	2312      	movs	r3, #18
 8002774:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2300      	movs	r3, #0
 800277c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800277e:	230a      	movs	r3, #10
 8002780:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(PFC_TIM17_BKIN_GPIO_Port, &GPIO_InitStruct);
 8002782:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002786:	4619      	mov	r1, r3
 8002788:	4825      	ldr	r0, [pc, #148]	@ (8002820 <HAL_TIM_Base_MspInit+0x404>)
 800278a:	f002 ff43 	bl	8005614 <HAL_GPIO_Init>
}
 800278e:	e03e      	b.n	800280e <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM20)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a24      	ldr	r2, [pc, #144]	@ (8002828 <HAL_TIM_Base_MspInit+0x40c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d139      	bne.n	800280e <HAL_TIM_Base_MspInit+0x3f2>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800279a:	4b20      	ldr	r3, [pc, #128]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 800279c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279e:	4a1f      	ldr	r2, [pc, #124]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 80027a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80027a6:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 80027a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027b2:	4b1a      	ldr	r3, [pc, #104]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 80027b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b6:	4a19      	ldr	r2, [pc, #100]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 80027b8:	f043 0320 	orr.w	r3, r3, #32
 80027bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027be:	4b17      	ldr	r3, [pc, #92]	@ (800281c <HAL_TIM_Base_MspInit+0x400>)
 80027c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_TIM20_BKIN_Pin|M3_TIM20_BKIN2_Pin;
 80027ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80027ce:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027d0:	2312      	movs	r3, #18
 80027d2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 80027dc:	2302      	movs	r3, #2
 80027de:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027e4:	4619      	mov	r1, r3
 80027e6:	4811      	ldr	r0, [pc, #68]	@ (800282c <HAL_TIM_Base_MspInit+0x410>)
 80027e8:	f002 ff14 	bl	8005614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3_PWM_UH_TIM20_CH1_Pin;
 80027ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027f0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 80027fe:	2302      	movs	r3, #2
 8002800:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M3_PWM_UH_TIM20_CH1_GPIO_Port, &GPIO_InitStruct);
 8002802:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002806:	4619      	mov	r1, r3
 8002808:	4808      	ldr	r0, [pc, #32]	@ (800282c <HAL_TIM_Base_MspInit+0x410>)
 800280a:	f002 ff03 	bl	8005614 <HAL_GPIO_Init>
}
 800280e:	bf00      	nop
 8002810:	3768      	adds	r7, #104	@ 0x68
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40014400 	.word	0x40014400
 800281c:	40021000 	.word	0x40021000
 8002820:	48000400 	.word	0x48000400
 8002824:	40014800 	.word	0x40014800
 8002828:	40015000 	.word	0x40015000
 800282c:	48001400 	.word	0x48001400

08002830 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	@ 0x30
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 031c 	add.w	r3, r7, #28
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002850:	d128      	bne.n	80028a4 <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002852:	4b2d      	ldr	r3, [pc, #180]	@ (8002908 <HAL_TIM_IC_MspInit+0xd8>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002856:	4a2c      	ldr	r2, [pc, #176]	@ (8002908 <HAL_TIM_IC_MspInit+0xd8>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6593      	str	r3, [r2, #88]	@ 0x58
 800285e:	4b2a      	ldr	r3, [pc, #168]	@ (8002908 <HAL_TIM_IC_MspInit+0xd8>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800286a:	4b27      	ldr	r3, [pc, #156]	@ (8002908 <HAL_TIM_IC_MspInit+0xd8>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286e:	4a26      	ldr	r2, [pc, #152]	@ (8002908 <HAL_TIM_IC_MspInit+0xd8>)
 8002870:	f043 0308 	orr.w	r3, r3, #8
 8002874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002876:	4b24      	ldr	r3, [pc, #144]	@ (8002908 <HAL_TIM_IC_MspInit+0xd8>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = M2_ENCA_TIM2_CH1_Pin|M2_ENCB_TIM2_CH2_Pin|M2_ENCZ_TIM2_CH3_Pin;
 8002882:	2398      	movs	r3, #152	@ 0x98
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002892:	2302      	movs	r3, #2
 8002894:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	4619      	mov	r1, r3
 800289c:	481b      	ldr	r0, [pc, #108]	@ (800290c <HAL_TIM_IC_MspInit+0xdc>)
 800289e:	f002 feb9 	bl	8005614 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 80028a2:	e02d      	b.n	8002900 <HAL_TIM_IC_MspInit+0xd0>
  else if(htim_ic->Instance==TIM5)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a19      	ldr	r2, [pc, #100]	@ (8002910 <HAL_TIM_IC_MspInit+0xe0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d128      	bne.n	8002900 <HAL_TIM_IC_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028ae:	4b16      	ldr	r3, [pc, #88]	@ (8002908 <HAL_TIM_IC_MspInit+0xd8>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b2:	4a15      	ldr	r2, [pc, #84]	@ (8002908 <HAL_TIM_IC_MspInit+0xd8>)
 80028b4:	f043 0308 	orr.w	r3, r3, #8
 80028b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ba:	4b13      	ldr	r3, [pc, #76]	@ (8002908 <HAL_TIM_IC_MspInit+0xd8>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028c6:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <HAL_TIM_IC_MspInit+0xd8>)
 80028c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002908 <HAL_TIM_IC_MspInit+0xd8>)
 80028cc:	f043 0320 	orr.w	r3, r3, #32
 80028d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002908 <HAL_TIM_IC_MspInit+0xd8>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d6:	f003 0320 	and.w	r3, r3, #32
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_ENCB_TIM5_CH2_Pin|M1_ENCZ_TIM5_CH3_Pin|M1_ENCA_TIM5_CH1_Pin;
 80028de:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80028e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 80028f0:	2306      	movs	r3, #6
 80028f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028f4:	f107 031c 	add.w	r3, r7, #28
 80028f8:	4619      	mov	r1, r3
 80028fa:	4806      	ldr	r0, [pc, #24]	@ (8002914 <HAL_TIM_IC_MspInit+0xe4>)
 80028fc:	f002 fe8a 	bl	8005614 <HAL_GPIO_Init>
}
 8002900:	bf00      	nop
 8002902:	3730      	adds	r7, #48	@ 0x30
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	48000c00 	.word	0x48000c00
 8002910:	40000c00 	.word	0x40000c00
 8002914:	48001400 	.word	0x48001400

08002918 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b090      	sub	sp, #64	@ 0x40
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a81      	ldr	r2, [pc, #516]	@ (8002b3c <HAL_TIM_MspPostInit+0x224>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d13a      	bne.n	80029b0 <HAL_TIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800293a:	4b81      	ldr	r3, [pc, #516]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293e:	4a80      	ldr	r2, [pc, #512]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002940:	f043 0310 	orr.w	r3, r3, #16
 8002944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002946:	4b7e      	ldr	r3, [pc, #504]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002952:	4b7b      	ldr	r3, [pc, #492]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002956:	4a7a      	ldr	r2, [pc, #488]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800295e:	4b78      	ldr	r3, [pc, #480]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = M2_PWM_WL_TIM1_CH3_Pin;
 800296a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800297c:	2302      	movs	r3, #2
 800297e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M2_PWM_WL_TIM1_CH3_GPIO_Port, &GPIO_InitStruct);
 8002980:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002984:	4619      	mov	r1, r3
 8002986:	486f      	ldr	r0, [pc, #444]	@ (8002b44 <HAL_TIM_MspPostInit+0x22c>)
 8002988:	f002 fe44 	bl	8005614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M2_PWM_WL_TIM1_CH3N_Pin;
 800298c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002990:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 800299e:	230c      	movs	r3, #12
 80029a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M2_PWM_WL_TIM1_CH3N_GPIO_Port, &GPIO_InitStruct);
 80029a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029a6:	4619      	mov	r1, r3
 80029a8:	4867      	ldr	r0, [pc, #412]	@ (8002b48 <HAL_TIM_MspPostInit+0x230>)
 80029aa:	f002 fe33 	bl	8005614 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 80029ae:	e0c0      	b.n	8002b32 <HAL_TIM_MspPostInit+0x21a>
  else if(htim->Instance==TIM8)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a65      	ldr	r2, [pc, #404]	@ (8002b4c <HAL_TIM_MspPostInit+0x234>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d11d      	bne.n	80029f6 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ba:	4b61      	ldr	r3, [pc, #388]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029be:	4a60      	ldr	r2, [pc, #384]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 80029c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	623b      	str	r3, [r7, #32]
 80029d0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = M1_PWM_UH_TIM8_CH1_Pin|M1_PWM_VH_TIM8_CH2_Pin|M1_PWM_WH_TIM8_CH3_Pin|M1_PWM_UL_TIM8_CH1N_Pin
 80029d2:	f44f 53ee 	mov.w	r3, #7616	@ 0x1dc0
 80029d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2300      	movs	r3, #0
 80029e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80029e4:	2304      	movs	r3, #4
 80029e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029ec:	4619      	mov	r1, r3
 80029ee:	4858      	ldr	r0, [pc, #352]	@ (8002b50 <HAL_TIM_MspPostInit+0x238>)
 80029f0:	f002 fe10 	bl	8005614 <HAL_GPIO_Init>
}
 80029f4:	e09d      	b.n	8002b32 <HAL_TIM_MspPostInit+0x21a>
  else if(htim->Instance==TIM16)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a56      	ldr	r2, [pc, #344]	@ (8002b54 <HAL_TIM_MspPostInit+0x23c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d11c      	bne.n	8002a3a <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a00:	4b4f      	ldr	r3, [pc, #316]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a04:	4a4e      	ldr	r2, [pc, #312]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002a06:	f043 0310 	orr.w	r3, r3, #16
 8002a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a0c:	4b4c      	ldr	r3, [pc, #304]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PFC_PWM1_TIM16_CH1_Pin;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM16;
 8002a28:	2304      	movs	r3, #4
 8002a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(PFC_PWM1_TIM16_CH1_GPIO_Port, &GPIO_InitStruct);
 8002a2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a30:	4619      	mov	r1, r3
 8002a32:	4844      	ldr	r0, [pc, #272]	@ (8002b44 <HAL_TIM_MspPostInit+0x22c>)
 8002a34:	f002 fdee 	bl	8005614 <HAL_GPIO_Init>
}
 8002a38:	e07b      	b.n	8002b32 <HAL_TIM_MspPostInit+0x21a>
  else if(htim->Instance==TIM17)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a46      	ldr	r2, [pc, #280]	@ (8002b58 <HAL_TIM_MspPostInit+0x240>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d11c      	bne.n	8002a7e <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a44:	4b3e      	ldr	r3, [pc, #248]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a48:	4a3d      	ldr	r2, [pc, #244]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002a4a:	f043 0310 	orr.w	r3, r3, #16
 8002a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a50:	4b3b      	ldr	r3, [pc, #236]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PFC_PWM2_TIM17_CH1_Pin;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM17;
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(PFC_PWM2_TIM17_CH1_GPIO_Port, &GPIO_InitStruct);
 8002a70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a74:	4619      	mov	r1, r3
 8002a76:	4833      	ldr	r0, [pc, #204]	@ (8002b44 <HAL_TIM_MspPostInit+0x22c>)
 8002a78:	f002 fdcc 	bl	8005614 <HAL_GPIO_Init>
}
 8002a7c:	e059      	b.n	8002b32 <HAL_TIM_MspPostInit+0x21a>
  else if(htim->Instance==TIM20)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a36      	ldr	r2, [pc, #216]	@ (8002b5c <HAL_TIM_MspPostInit+0x244>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d154      	bne.n	8002b32 <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a88:	4b2d      	ldr	r3, [pc, #180]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8c:	4a2c      	ldr	r2, [pc, #176]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002a8e:	f043 0310 	orr.w	r3, r3, #16
 8002a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a94:	4b2a      	ldr	r3, [pc, #168]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aa0:	4b27      	ldr	r3, [pc, #156]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa4:	4a26      	ldr	r2, [pc, #152]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002aa6:	f043 0320 	orr.w	r3, r3, #32
 8002aaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aac:	4b24      	ldr	r3, [pc, #144]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ab8:	4b21      	ldr	r3, [pc, #132]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002abc:	4a20      	ldr	r2, [pc, #128]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ac2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b40 <HAL_TIM_MspPostInit+0x228>)
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_WL_TIM20_CH3N_Pin;
 8002ad0:	2340      	movs	r3, #64	@ 0x40
 8002ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002adc:	2300      	movs	r3, #0
 8002ade:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8002ae0:	2306      	movs	r3, #6
 8002ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M3_PWM_WL_TIM20_CH3N_GPIO_Port, &GPIO_InitStruct);
 8002ae4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4816      	ldr	r0, [pc, #88]	@ (8002b44 <HAL_TIM_MspPostInit+0x22c>)
 8002aec:	f002 fd92 	bl	8005614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3_PWM_VH_TIM20_CH2_Pin|M3_PWM_WH_TIM20_CH3_Pin;
 8002af0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afe:	2300      	movs	r3, #0
 8002b00:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 8002b02:	2302      	movs	r3, #2
 8002b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4814      	ldr	r0, [pc, #80]	@ (8002b60 <HAL_TIM_MspPostInit+0x248>)
 8002b0e:	f002 fd81 	bl	8005614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3_PWM_UL_TIM20_CH1N_Pin|M3_PWM_VL_TIM20_CH2N_Pin;
 8002b12:	2303      	movs	r3, #3
 8002b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b16:	2302      	movs	r3, #2
 8002b18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 8002b22:	2302      	movs	r3, #2
 8002b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	480d      	ldr	r0, [pc, #52]	@ (8002b64 <HAL_TIM_MspPostInit+0x24c>)
 8002b2e:	f002 fd71 	bl	8005614 <HAL_GPIO_Init>
}
 8002b32:	bf00      	nop
 8002b34:	3740      	adds	r7, #64	@ 0x40
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40012c00 	.word	0x40012c00
 8002b40:	40021000 	.word	0x40021000
 8002b44:	48001000 	.word	0x48001000
 8002b48:	48000400 	.word	0x48000400
 8002b4c:	40013400 	.word	0x40013400
 8002b50:	48000800 	.word	0x48000800
 8002b54:	40014400 	.word	0x40014400
 8002b58:	40014800 	.word	0x40014800
 8002b5c:	40015000 	.word	0x40015000
 8002b60:	48001400 	.word	0x48001400
 8002b64:	48001800 	.word	0x48001800

08002b68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b0a0      	sub	sp, #128	@ 0x80
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b80:	f107 0318 	add.w	r3, r7, #24
 8002b84:	2254      	movs	r2, #84	@ 0x54
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f006 febf 	bl	800990c <memset>
  if(huart->Instance==USART1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2e      	ldr	r2, [pc, #184]	@ (8002c4c <HAL_UART_MspInit+0xe4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d154      	bne.n	8002c42 <HAL_UART_MspInit+0xda>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ba0:	f107 0318 	add.w	r3, r7, #24
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 fd81 	bl	80066ac <HAL_RCCEx_PeriphCLKConfig>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bb0:	f7ff f812 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bb4:	4b26      	ldr	r3, [pc, #152]	@ (8002c50 <HAL_UART_MspInit+0xe8>)
 8002bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb8:	4a25      	ldr	r2, [pc, #148]	@ (8002c50 <HAL_UART_MspInit+0xe8>)
 8002bba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bc0:	4b23      	ldr	r3, [pc, #140]	@ (8002c50 <HAL_UART_MspInit+0xe8>)
 8002bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bcc:	4b20      	ldr	r3, [pc, #128]	@ (8002c50 <HAL_UART_MspInit+0xe8>)
 8002bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c50 <HAL_UART_MspInit+0xe8>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c50 <HAL_UART_MspInit+0xe8>)
 8002bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002be4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <HAL_UART_MspInit+0xe8>)
 8002be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be8:	4a19      	ldr	r2, [pc, #100]	@ (8002c50 <HAL_UART_MspInit+0xe8>)
 8002bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bf0:	4b17      	ldr	r3, [pc, #92]	@ (8002c50 <HAL_UART_MspInit+0xe8>)
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PG9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c0e:	2307      	movs	r3, #7
 8002c10:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c12:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002c16:	4619      	mov	r1, r3
 8002c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c1c:	f002 fcfa 	bl	8005614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c32:	2307      	movs	r3, #7
 8002c34:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c36:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4805      	ldr	r0, [pc, #20]	@ (8002c54 <HAL_UART_MspInit+0xec>)
 8002c3e:	f002 fce9 	bl	8005614 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002c42:	bf00      	nop
 8002c44:	3780      	adds	r7, #128	@ 0x80
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40021000 	.word	0x40021000
 8002c54:	48001800 	.word	0x48001800

08002c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <NMI_Handler+0x4>

08002c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <HardFault_Handler+0x4>

08002c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <MemManage_Handler+0x4>

08002c70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <BusFault_Handler+0x4>

08002c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <UsageFault_Handler+0x4>

08002c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cae:	f000 f8fd 	bl	8002eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cbc:	4802      	ldr	r0, [pc, #8]	@ (8002cc8 <DMA1_Channel4_IRQHandler+0x10>)
 8002cbe:	f002 fb5a 	bl	8005376 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20008228 	.word	0x20008228

08002ccc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002cd0:	4803      	ldr	r0, [pc, #12]	@ (8002ce0 <ADC1_2_IRQHandler+0x14>)
 8002cd2:	f000 fd13 	bl	80036fc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002cd6:	4803      	ldr	r0, [pc, #12]	@ (8002ce4 <ADC1_2_IRQHandler+0x18>)
 8002cd8:	f000 fd10 	bl	80036fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20008078 	.word	0x20008078
 8002ce4:	200080e4 	.word	0x200080e4

08002ce8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002cec:	4802      	ldr	r0, [pc, #8]	@ (8002cf8 <DMA2_Channel1_IRQHandler+0x10>)
 8002cee:	f002 fb42 	bl	8005376 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200082e8 	.word	0x200082e8

08002cfc <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8002d00:	4802      	ldr	r0, [pc, #8]	@ (8002d0c <DMA2_Channel2_IRQHandler+0x10>)
 8002d02:	f002 fb38 	bl	8005376 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20008348 	.word	0x20008348

08002d10 <DMA1_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA1 channel8 global interrupt.
  */
void DMA1_Channel8_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel8_IRQn 0 */

  /* USER CODE END DMA1_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002d14:	4802      	ldr	r0, [pc, #8]	@ (8002d20 <DMA1_Channel8_IRQHandler+0x10>)
 8002d16:	f002 fb2e 	bl	8005376 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel8_IRQn 1 */

  /* USER CODE END DMA1_Channel8_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20008288 	.word	0x20008288

08002d24 <_sbrk>:
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	4a14      	ldr	r2, [pc, #80]	@ (8002d80 <_sbrk+0x5c>)
 8002d2e:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <_sbrk+0x60>)
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	4b13      	ldr	r3, [pc, #76]	@ (8002d88 <_sbrk+0x64>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <_sbrk+0x22>
 8002d40:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <_sbrk+0x64>)
 8002d42:	4a12      	ldr	r2, [pc, #72]	@ (8002d8c <_sbrk+0x68>)
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	4b10      	ldr	r3, [pc, #64]	@ (8002d88 <_sbrk+0x64>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d207      	bcs.n	8002d64 <_sbrk+0x40>
 8002d54:	f006 fde2 	bl	800991c <__errno>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d62:	e009      	b.n	8002d78 <_sbrk+0x54>
 8002d64:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <_sbrk+0x64>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4b07      	ldr	r3, [pc, #28]	@ (8002d88 <_sbrk+0x64>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	4a05      	ldr	r2, [pc, #20]	@ (8002d88 <_sbrk+0x64>)
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20020000 	.word	0x20020000
 8002d84:	00000400 	.word	0x00000400
 8002d88:	20008834 	.word	0x20008834
 8002d8c:	20008988 	.word	0x20008988

08002d90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d94:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <SystemInit+0x20>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9a:	4a05      	ldr	r2, [pc, #20]	@ (8002db0 <SystemInit+0x20>)
 8002d9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002da0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <Reset_Handler>:
 8002db4:	480d      	ldr	r0, [pc, #52]	@ (8002dec <LoopForever+0x2>)
 8002db6:	4685      	mov	sp, r0
 8002db8:	f7ff ffea 	bl	8002d90 <SystemInit>
 8002dbc:	480c      	ldr	r0, [pc, #48]	@ (8002df0 <LoopForever+0x6>)
 8002dbe:	490d      	ldr	r1, [pc, #52]	@ (8002df4 <LoopForever+0xa>)
 8002dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002df8 <LoopForever+0xe>)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e002      	b.n	8002dcc <LoopCopyDataInit>

08002dc6 <CopyDataInit>:
 8002dc6:	58d4      	ldr	r4, [r2, r3]
 8002dc8:	50c4      	str	r4, [r0, r3]
 8002dca:	3304      	adds	r3, #4

08002dcc <LoopCopyDataInit>:
 8002dcc:	18c4      	adds	r4, r0, r3
 8002dce:	428c      	cmp	r4, r1
 8002dd0:	d3f9      	bcc.n	8002dc6 <CopyDataInit>
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dfc <LoopForever+0x12>)
 8002dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8002e00 <LoopForever+0x16>)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e001      	b.n	8002dde <LoopFillZerobss>

08002dda <FillZerobss>:
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	3204      	adds	r2, #4

08002dde <LoopFillZerobss>:
 8002dde:	42a2      	cmp	r2, r4
 8002de0:	d3fb      	bcc.n	8002dda <FillZerobss>
 8002de2:	f006 fda1 	bl	8009928 <__libc_init_array>
 8002de6:	f7fd fc09 	bl	80005fc <main>

08002dea <LoopForever>:
 8002dea:	e7fe      	b.n	8002dea <LoopForever>
 8002dec:	20020000 	.word	0x20020000
 8002df0:	20000000 	.word	0x20000000
 8002df4:	2000005c 	.word	0x2000005c
 8002df8:	0800a2ac 	.word	0x0800a2ac
 8002dfc:	2000005c 	.word	0x2000005c
 8002e00:	20008984 	.word	0x20008984

08002e04 <ADC3_IRQHandler>:
 8002e04:	e7fe      	b.n	8002e04 <ADC3_IRQHandler>

08002e06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e10:	2003      	movs	r0, #3
 8002e12:	f001 ff71 	bl	8004cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e16:	2000      	movs	r0, #0
 8002e18:	f000 f80e 	bl	8002e38 <HAL_InitTick>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	71fb      	strb	r3, [r7, #7]
 8002e26:	e001      	b.n	8002e2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e28:	f7fe fedc 	bl	8001be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e2c:	79fb      	ldrb	r3, [r7, #7]

}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002e44:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <HAL_InitTick+0x68>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d022      	beq.n	8002e92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002e4c:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <HAL_InitTick+0x6c>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <HAL_InitTick+0x68>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 ff7c 	bl	8004d5e <HAL_SYSTICK_Config>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10f      	bne.n	8002e8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b0f      	cmp	r3, #15
 8002e70:	d809      	bhi.n	8002e86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e72:	2200      	movs	r2, #0
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7a:	f001 ff48 	bl	8004d0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea8 <HAL_InitTick+0x70>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	e007      	b.n	8002e96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
 8002e8a:	e004      	b.n	8002e96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
 8002e90:	e001      	b.n	8002e96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20000008 	.word	0x20000008
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000004 	.word	0x20000004

08002eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb0:	4b05      	ldr	r3, [pc, #20]	@ (8002ec8 <HAL_IncTick+0x1c>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <HAL_IncTick+0x20>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4413      	add	r3, r2
 8002eba:	4a03      	ldr	r2, [pc, #12]	@ (8002ec8 <HAL_IncTick+0x1c>)
 8002ebc:	6013      	str	r3, [r2, #0]
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	20008838 	.word	0x20008838
 8002ecc:	20000008 	.word	0x20000008

08002ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	@ (8002ee4 <HAL_GetTick+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20008838 	.word	0x20008838

08002ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef0:	f7ff ffee 	bl	8002ed0 <HAL_GetTick>
 8002ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d004      	beq.n	8002f0c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f02:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <HAL_Delay+0x40>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4413      	add	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f0c:	bf00      	nop
 8002f0e:	f7ff ffdf 	bl	8002ed0 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d8f7      	bhi.n	8002f0e <HAL_Delay+0x26>
  {
  }
}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000008 	.word	0x20000008

08002f2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	609a      	str	r2, [r3, #8]
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3360      	adds	r3, #96	@ 0x60
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b08      	ldr	r3, [pc, #32]	@ (8002fd8 <LL_ADC_SetOffset+0x44>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002fcc:	bf00      	nop
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	03fff000 	.word	0x03fff000

08002fdc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3360      	adds	r3, #96	@ 0x60
 8002fea:	461a      	mov	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3360      	adds	r3, #96	@ 0x60
 8003018:	461a      	mov	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	431a      	orrs	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003032:	bf00      	nop
 8003034:	371c      	adds	r7, #28
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800303e:	b480      	push	{r7}
 8003040:	b087      	sub	sp, #28
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3360      	adds	r3, #96	@ 0x60
 800304e:	461a      	mov	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	431a      	orrs	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003068:	bf00      	nop
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3360      	adds	r3, #96	@ 0x60
 8003084:	461a      	mov	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	431a      	orrs	r2, r3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800309e:	bf00      	nop
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	615a      	str	r2, [r3, #20]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b087      	sub	sp, #28
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3330      	adds	r3, #48	@ 0x30
 8003106:	461a      	mov	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	4413      	add	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	211f      	movs	r1, #31
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	401a      	ands	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	0e9b      	lsrs	r3, r3, #26
 800312e:	f003 011f 	and.w	r1, r3, #31
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	431a      	orrs	r2, r3
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3314      	adds	r3, #20
 8003184:	461a      	mov	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	0e5b      	lsrs	r3, r3, #25
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	4413      	add	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	0d1b      	lsrs	r3, r3, #20
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2107      	movs	r1, #7
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	401a      	ands	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	0d1b      	lsrs	r3, r3, #20
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	431a      	orrs	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031be:	bf00      	nop
 80031c0:	371c      	adds	r7, #28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e4:	43db      	mvns	r3, r3
 80031e6:	401a      	ands	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 0318 	and.w	r3, r3, #24
 80031ee:	4908      	ldr	r1, [pc, #32]	@ (8003210 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031f0:	40d9      	lsrs	r1, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	400b      	ands	r3, r1
 80031f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fa:	431a      	orrs	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	0007ffff 	.word	0x0007ffff

08003214 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 031f 	and.w	r3, r3, #31
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800325c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6093      	str	r3, [r2, #8]
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003284:	d101      	bne.n	800328a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032d4:	d101      	bne.n	80032da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032fc:	f043 0201 	orr.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <LL_ADC_IsEnabled+0x18>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <LL_ADC_IsEnabled+0x1a>
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b04      	cmp	r3, #4
 8003348:	d101      	bne.n	800334e <LL_ADC_REG_IsConversionOngoing+0x18>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b08      	cmp	r3, #8
 800336e:	d101      	bne.n	8003374 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003384:	b590      	push	{r4, r7, lr}
 8003386:	b089      	sub	sp, #36	@ 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e1a9      	b.n	80036f2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7fe fc3d 	bl	8001c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff53 	bl	8003270 <LL_ADC_IsDeepPowerDownEnabled>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d004      	beq.n	80033da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff39 	bl	800324c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff ff6e 	bl	80032c0 <LL_ADC_IsInternalRegulatorEnabled>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d115      	bne.n	8003416 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ff52 	bl	8003298 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033f4:	4b9c      	ldr	r3, [pc, #624]	@ (8003668 <HAL_ADC_Init+0x2e4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	099b      	lsrs	r3, r3, #6
 80033fa:	4a9c      	ldr	r2, [pc, #624]	@ (800366c <HAL_ADC_Init+0x2e8>)
 80033fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003400:	099b      	lsrs	r3, r3, #6
 8003402:	3301      	adds	r3, #1
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003408:	e002      	b.n	8003410 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3b01      	subs	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f9      	bne.n	800340a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ff50 	bl	80032c0 <LL_ADC_IsInternalRegulatorEnabled>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10d      	bne.n	8003442 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342a:	f043 0210 	orr.w	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003436:	f043 0201 	orr.w	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff ff75 	bl	8003336 <LL_ADC_REG_IsConversionOngoing>
 800344c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	f040 8142 	bne.w	80036e0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 813e 	bne.w	80036e0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003468:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800346c:	f043 0202 	orr.w	r2, r3, #2
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff ff49 	bl	8003310 <LL_ADC_IsEnabled>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d141      	bne.n	8003508 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800348c:	d004      	beq.n	8003498 <HAL_ADC_Init+0x114>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a77      	ldr	r2, [pc, #476]	@ (8003670 <HAL_ADC_Init+0x2ec>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d10f      	bne.n	80034b8 <HAL_ADC_Init+0x134>
 8003498:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800349c:	f7ff ff38 	bl	8003310 <LL_ADC_IsEnabled>
 80034a0:	4604      	mov	r4, r0
 80034a2:	4873      	ldr	r0, [pc, #460]	@ (8003670 <HAL_ADC_Init+0x2ec>)
 80034a4:	f7ff ff34 	bl	8003310 <LL_ADC_IsEnabled>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4323      	orrs	r3, r4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	e012      	b.n	80034de <HAL_ADC_Init+0x15a>
 80034b8:	486e      	ldr	r0, [pc, #440]	@ (8003674 <HAL_ADC_Init+0x2f0>)
 80034ba:	f7ff ff29 	bl	8003310 <LL_ADC_IsEnabled>
 80034be:	4604      	mov	r4, r0
 80034c0:	486d      	ldr	r0, [pc, #436]	@ (8003678 <HAL_ADC_Init+0x2f4>)
 80034c2:	f7ff ff25 	bl	8003310 <LL_ADC_IsEnabled>
 80034c6:	4603      	mov	r3, r0
 80034c8:	431c      	orrs	r4, r3
 80034ca:	486c      	ldr	r0, [pc, #432]	@ (800367c <HAL_ADC_Init+0x2f8>)
 80034cc:	f7ff ff20 	bl	8003310 <LL_ADC_IsEnabled>
 80034d0:	4603      	mov	r3, r0
 80034d2:	4323      	orrs	r3, r4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d012      	beq.n	8003508 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034ea:	d004      	beq.n	80034f6 <HAL_ADC_Init+0x172>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a5f      	ldr	r2, [pc, #380]	@ (8003670 <HAL_ADC_Init+0x2ec>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_ADC_Init+0x176>
 80034f6:	4a62      	ldr	r2, [pc, #392]	@ (8003680 <HAL_ADC_Init+0x2fc>)
 80034f8:	e000      	b.n	80034fc <HAL_ADC_Init+0x178>
 80034fa:	4a62      	ldr	r2, [pc, #392]	@ (8003684 <HAL_ADC_Init+0x300>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4619      	mov	r1, r3
 8003502:	4610      	mov	r0, r2
 8003504:	f7ff fd12 	bl	8002f2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	7f5b      	ldrb	r3, [r3, #29]
 800350c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003512:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003518:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800351e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003526:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003532:	2b01      	cmp	r3, #1
 8003534:	d106      	bne.n	8003544 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353a:	3b01      	subs	r3, #1
 800353c:	045b      	lsls	r3, r3, #17
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d009      	beq.n	8003560 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003558:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	4b48      	ldr	r3, [pc, #288]	@ (8003688 <HAL_ADC_Init+0x304>)
 8003568:	4013      	ands	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	69b9      	ldr	r1, [r7, #24]
 8003570:	430b      	orrs	r3, r1
 8003572:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fee4 	bl	800335c <LL_ADC_INJ_IsConversionOngoing>
 8003594:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d17f      	bne.n	800369c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d17c      	bne.n	800369c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035a6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80035ae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035be:	f023 0302 	bic.w	r3, r3, #2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	69b9      	ldr	r1, [r7, #24]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d017      	beq.n	8003604 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80035e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80035ec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80035f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6911      	ldr	r1, [r2, #16]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003602:	e013      	b.n	800362c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003612:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003624:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003628:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003632:	2b01      	cmp	r3, #1
 8003634:	d12a      	bne.n	800368c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003640:	f023 0304 	bic.w	r3, r3, #4
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800364c:	4311      	orrs	r1, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003652:	4311      	orrs	r1, r2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003658:	430a      	orrs	r2, r1
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	611a      	str	r2, [r3, #16]
 8003666:	e019      	b.n	800369c <HAL_ADC_Init+0x318>
 8003668:	20000000 	.word	0x20000000
 800366c:	053e2d63 	.word	0x053e2d63
 8003670:	50000100 	.word	0x50000100
 8003674:	50000400 	.word	0x50000400
 8003678:	50000500 	.word	0x50000500
 800367c:	50000600 	.word	0x50000600
 8003680:	50000300 	.word	0x50000300
 8003684:	50000700 	.word	0x50000700
 8003688:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10c      	bne.n	80036be <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036aa:	f023 010f 	bic.w	r1, r3, #15
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	1e5a      	subs	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80036bc:	e007      	b.n	80036ce <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 020f 	bic.w	r2, r2, #15
 80036cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	f043 0201 	orr.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036de:	e007      	b.n	80036f0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e4:	f043 0210 	orr.w	r2, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3724      	adds	r7, #36	@ 0x24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd90      	pop	{r4, r7, pc}
 80036fa:	bf00      	nop

080036fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	@ 0x28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003720:	d004      	beq.n	800372c <HAL_ADC_IRQHandler+0x30>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a8e      	ldr	r2, [pc, #568]	@ (8003960 <HAL_ADC_IRQHandler+0x264>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d101      	bne.n	8003730 <HAL_ADC_IRQHandler+0x34>
 800372c:	4b8d      	ldr	r3, [pc, #564]	@ (8003964 <HAL_ADC_IRQHandler+0x268>)
 800372e:	e000      	b.n	8003732 <HAL_ADC_IRQHandler+0x36>
 8003730:	4b8d      	ldr	r3, [pc, #564]	@ (8003968 <HAL_ADC_IRQHandler+0x26c>)
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fd6e 	bl	8003214 <LL_ADC_GetMultimode>
 8003738:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d017      	beq.n	8003774 <HAL_ADC_IRQHandler+0x78>
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d012      	beq.n	8003774 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	d105      	bne.n	8003766 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f001 f8e4 	bl	8004934 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2202      	movs	r2, #2
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <HAL_ADC_IRQHandler+0x8c>
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10b      	bne.n	80037a0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8094 	beq.w	80038bc <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 808e 	beq.w	80038bc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fc87 	bl	80030d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d072      	beq.n	80038ae <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a64      	ldr	r2, [pc, #400]	@ (8003960 <HAL_ADC_IRQHandler+0x264>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d009      	beq.n	80037e6 <HAL_ADC_IRQHandler+0xea>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a65      	ldr	r2, [pc, #404]	@ (800396c <HAL_ADC_IRQHandler+0x270>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d002      	beq.n	80037e2 <HAL_ADC_IRQHandler+0xe6>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	e003      	b.n	80037ea <HAL_ADC_IRQHandler+0xee>
 80037e2:	4b63      	ldr	r3, [pc, #396]	@ (8003970 <HAL_ADC_IRQHandler+0x274>)
 80037e4:	e001      	b.n	80037ea <HAL_ADC_IRQHandler+0xee>
 80037e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d008      	beq.n	8003804 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	d002      	beq.n	8003804 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b09      	cmp	r3, #9
 8003802:	d104      	bne.n	800380e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	623b      	str	r3, [r7, #32]
 800380c:	e014      	b.n	8003838 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a53      	ldr	r2, [pc, #332]	@ (8003960 <HAL_ADC_IRQHandler+0x264>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_ADC_IRQHandler+0x130>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a53      	ldr	r2, [pc, #332]	@ (800396c <HAL_ADC_IRQHandler+0x270>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d002      	beq.n	8003828 <HAL_ADC_IRQHandler+0x12c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	e003      	b.n	8003830 <HAL_ADC_IRQHandler+0x134>
 8003828:	4b51      	ldr	r3, [pc, #324]	@ (8003970 <HAL_ADC_IRQHandler+0x274>)
 800382a:	e001      	b.n	8003830 <HAL_ADC_IRQHandler+0x134>
 800382c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003830:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d135      	bne.n	80038ae <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b08      	cmp	r3, #8
 800384e:	d12e      	bne.n	80038ae <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff fd6e 	bl	8003336 <LL_ADC_REG_IsConversionOngoing>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d11a      	bne.n	8003896 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 020c 	bic.w	r2, r2, #12
 800386e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003874:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d112      	bne.n	80038ae <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388c:	f043 0201 	orr.w	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003894:	e00b      	b.n	80038ae <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389a:	f043 0210 	orr.w	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a6:	f043 0201 	orr.w	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fe f968 	bl	8001b84 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	220c      	movs	r2, #12
 80038ba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d004      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x1d4>
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10b      	bne.n	80038e8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80b3 	beq.w	8003a42 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 80ad 	beq.w	8003a42 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d105      	bne.n	8003900 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fc22 	bl	800314e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800390a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff fbdd 	bl	80030d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003916:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a10      	ldr	r2, [pc, #64]	@ (8003960 <HAL_ADC_IRQHandler+0x264>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_ADC_IRQHandler+0x23a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a11      	ldr	r2, [pc, #68]	@ (800396c <HAL_ADC_IRQHandler+0x270>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d002      	beq.n	8003932 <HAL_ADC_IRQHandler+0x236>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	e003      	b.n	800393a <HAL_ADC_IRQHandler+0x23e>
 8003932:	4b0f      	ldr	r3, [pc, #60]	@ (8003970 <HAL_ADC_IRQHandler+0x274>)
 8003934:	e001      	b.n	800393a <HAL_ADC_IRQHandler+0x23e>
 8003936:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	4293      	cmp	r3, r2
 8003940:	d008      	beq.n	8003954 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b06      	cmp	r3, #6
 800394c:	d002      	beq.n	8003954 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b07      	cmp	r3, #7
 8003952:	d10f      	bne.n	8003974 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	623b      	str	r3, [r7, #32]
 800395c:	e01f      	b.n	800399e <HAL_ADC_IRQHandler+0x2a2>
 800395e:	bf00      	nop
 8003960:	50000100 	.word	0x50000100
 8003964:	50000300 	.word	0x50000300
 8003968:	50000700 	.word	0x50000700
 800396c:	50000500 	.word	0x50000500
 8003970:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a8b      	ldr	r2, [pc, #556]	@ (8003ba8 <HAL_ADC_IRQHandler+0x4ac>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d009      	beq.n	8003992 <HAL_ADC_IRQHandler+0x296>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a8a      	ldr	r2, [pc, #552]	@ (8003bac <HAL_ADC_IRQHandler+0x4b0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d002      	beq.n	800398e <HAL_ADC_IRQHandler+0x292>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	e003      	b.n	8003996 <HAL_ADC_IRQHandler+0x29a>
 800398e:	4b88      	ldr	r3, [pc, #544]	@ (8003bb0 <HAL_ADC_IRQHandler+0x4b4>)
 8003990:	e001      	b.n	8003996 <HAL_ADC_IRQHandler+0x29a>
 8003992:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003996:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d047      	beq.n	8003a34 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <HAL_ADC_IRQHandler+0x2c2>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d03f      	beq.n	8003a34 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d13a      	bne.n	8003a34 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c8:	2b40      	cmp	r3, #64	@ 0x40
 80039ca:	d133      	bne.n	8003a34 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d12e      	bne.n	8003a34 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fcbe 	bl	800335c <LL_ADC_INJ_IsConversionOngoing>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11a      	bne.n	8003a1c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039f4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d112      	bne.n	8003a34 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a1a:	e00b      	b.n	8003a34 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a20:	f043 0210 	orr.w	r2, r3, #16
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 ff55 	bl	80048e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2260      	movs	r2, #96	@ 0x60
 8003a40:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d011      	beq.n	8003a70 <HAL_ADC_IRQHandler+0x374>
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00c      	beq.n	8003a70 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f8aa 	bl	8003bbc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2280      	movs	r2, #128	@ 0x80
 8003a6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d012      	beq.n	8003aa0 <HAL_ADC_IRQHandler+0x3a4>
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00d      	beq.n	8003aa0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a88:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 ff3b 	bl	800490c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d012      	beq.n	8003ad0 <HAL_ADC_IRQHandler+0x3d4>
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 ff2d 	bl	8004920 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ace:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d043      	beq.n	8003b62 <HAL_ADC_IRQHandler+0x466>
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d03e      	beq.n	8003b62 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d102      	bne.n	8003af2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003aec:	2301      	movs	r3, #1
 8003aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af0:	e021      	b.n	8003b36 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d015      	beq.n	8003b24 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b00:	d004      	beq.n	8003b0c <HAL_ADC_IRQHandler+0x410>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a28      	ldr	r2, [pc, #160]	@ (8003ba8 <HAL_ADC_IRQHandler+0x4ac>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <HAL_ADC_IRQHandler+0x414>
 8003b0c:	4b29      	ldr	r3, [pc, #164]	@ (8003bb4 <HAL_ADC_IRQHandler+0x4b8>)
 8003b0e:	e000      	b.n	8003b12 <HAL_ADC_IRQHandler+0x416>
 8003b10:	4b29      	ldr	r3, [pc, #164]	@ (8003bb8 <HAL_ADC_IRQHandler+0x4bc>)
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff fb8c 	bl	8003230 <LL_ADC_GetMultiDMATransfer>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b22:	e008      	b.n	8003b36 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003b32:	2301      	movs	r3, #1
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10e      	bne.n	8003b5a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b40:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4c:	f043 0202 	orr.w	r2, r3, #2
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f83b 	bl	8003bd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2210      	movs	r2, #16
 8003b60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d018      	beq.n	8003b9e <HAL_ADC_IRQHandler+0x4a2>
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d013      	beq.n	8003b9e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b86:	f043 0208 	orr.w	r2, r3, #8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b96:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fead 	bl	80048f8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003b9e:	bf00      	nop
 8003ba0:	3728      	adds	r7, #40	@ 0x28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	50000100 	.word	0x50000100
 8003bac:	50000500 	.word	0x50000500
 8003bb0:	50000400 	.word	0x50000400
 8003bb4:	50000300 	.word	0x50000300
 8003bb8:	50000700 	.word	0x50000700

08003bbc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b0b6      	sub	sp, #216	@ 0xd8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d102      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x24>
 8003c02:	2302      	movs	r3, #2
 8003c04:	f000 bc13 	b.w	800442e <HAL_ADC_ConfigChannel+0x84a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fb8e 	bl	8003336 <LL_ADC_REG_IsConversionOngoing>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f040 83f3 	bne.w	8004408 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f7ff fa61 	bl	80030f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff fb7c 	bl	8003336 <LL_ADC_REG_IsConversionOngoing>
 8003c3e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fb88 	bl	800335c <LL_ADC_INJ_IsConversionOngoing>
 8003c4c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 81d9 	bne.w	800400c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f040 81d4 	bne.w	800400c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c6c:	d10f      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2200      	movs	r2, #0
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f7ff fa7b 	bl	8003174 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fa0f 	bl	80030aa <LL_ADC_SetSamplingTimeCommonConfig>
 8003c8c:	e00e      	b.n	8003cac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f7ff fa6a 	bl	8003174 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff f9ff 	bl	80030aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	08db      	lsrs	r3, r3, #3
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d022      	beq.n	8003d14 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6919      	ldr	r1, [r3, #16]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cde:	f7ff f959 	bl	8002f94 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6919      	ldr	r1, [r3, #16]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f7ff f9a5 	bl	800303e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d102      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x126>
 8003d04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d08:	e000      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x128>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f7ff f9b1 	bl	8003074 <LL_ADC_SetOffsetSaturation>
 8003d12:	e17b      	b.n	800400c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff f95e 	bl	8002fdc <LL_ADC_GetOffsetChannel>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x15c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff f953 	bl	8002fdc <LL_ADC_GetOffsetChannel>
 8003d36:	4603      	mov	r3, r0
 8003d38:	0e9b      	lsrs	r3, r3, #26
 8003d3a:	f003 021f 	and.w	r2, r3, #31
 8003d3e:	e01e      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x19a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff f948 	bl	8002fdc <LL_ADC_GetOffsetChannel>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003d6e:	2320      	movs	r3, #32
 8003d70:	e004      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003d72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x1b2>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	0e9b      	lsrs	r3, r3, #26
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	e018      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x1e4>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003db2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003dba:	2320      	movs	r3, #32
 8003dbc:	e004      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003dc2:	fab3 f383 	clz	r3, r3
 8003dc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d106      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff f917 	bl	8003008 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2101      	movs	r1, #1
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff f8fb 	bl	8002fdc <LL_ADC_GetOffsetChannel>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x222>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2101      	movs	r1, #1
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff f8f0 	bl	8002fdc <LL_ADC_GetOffsetChannel>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	0e9b      	lsrs	r3, r3, #26
 8003e00:	f003 021f 	and.w	r2, r3, #31
 8003e04:	e01e      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x260>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff f8e5 	bl	8002fdc <LL_ADC_GetOffsetChannel>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e1c:	fa93 f3a3 	rbit	r3, r3
 8003e20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003e24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003e2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003e34:	2320      	movs	r3, #32
 8003e36:	e004      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003e38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x278>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	0e9b      	lsrs	r3, r3, #26
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	e018      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x2aa>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e68:	fa93 f3a3 	rbit	r3, r3
 8003e6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003e70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003e80:	2320      	movs	r3, #32
 8003e82:	e004      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e88:	fab3 f383 	clz	r3, r3
 8003e8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d106      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff f8b4 	bl	8003008 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff f898 	bl	8002fdc <LL_ADC_GetOffsetChannel>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x2e8>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2102      	movs	r1, #2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff f88d 	bl	8002fdc <LL_ADC_GetOffsetChannel>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	0e9b      	lsrs	r3, r3, #26
 8003ec6:	f003 021f 	and.w	r2, r3, #31
 8003eca:	e01e      	b.n	8003f0a <HAL_ADC_ConfigChannel+0x326>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff f882 	bl	8002fdc <LL_ADC_GetOffsetChannel>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee2:	fa93 f3a3 	rbit	r3, r3
 8003ee6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003eea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003eee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003ef2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003efa:	2320      	movs	r3, #32
 8003efc:	e004      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003efe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d105      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x33e>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	0e9b      	lsrs	r3, r3, #26
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	e016      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x36c>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f2e:	fa93 f3a3 	rbit	r3, r3
 8003f32:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003f34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003f42:	2320      	movs	r3, #32
 8003f44:	e004      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f4a:	fab3 f383 	clz	r3, r3
 8003f4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d106      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff f853 	bl	8003008 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2103      	movs	r1, #3
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff f837 	bl	8002fdc <LL_ADC_GetOffsetChannel>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x3aa>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2103      	movs	r1, #3
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff f82c 	bl	8002fdc <LL_ADC_GetOffsetChannel>
 8003f84:	4603      	mov	r3, r0
 8003f86:	0e9b      	lsrs	r3, r3, #26
 8003f88:	f003 021f 	and.w	r2, r3, #31
 8003f8c:	e017      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x3da>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2103      	movs	r1, #3
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff f821 	bl	8002fdc <LL_ADC_GetOffsetChannel>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fa0:	fa93 f3a3 	rbit	r3, r3
 8003fa4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003fa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003faa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	e003      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fb6:	fab3 f383 	clz	r3, r3
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d105      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x3f2>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	0e9b      	lsrs	r3, r3, #26
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	e011      	b.n	8003ffa <HAL_ADC_ConfigChannel+0x416>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003fe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fe6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003fee:	2320      	movs	r3, #32
 8003ff0:	e003      	b.n	8003ffa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d106      	bne.n	800400c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2200      	movs	r2, #0
 8004004:	2103      	movs	r1, #3
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fffe 	bl	8003008 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff f97d 	bl	8003310 <LL_ADC_IsEnabled>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	f040 813d 	bne.w	8004298 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6819      	ldr	r1, [r3, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	461a      	mov	r2, r3
 800402c:	f7ff f8ce 	bl	80031cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4aa2      	ldr	r2, [pc, #648]	@ (80042c0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	f040 812e 	bne.w	8004298 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x480>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	0e9b      	lsrs	r3, r3, #26
 8004052:	3301      	adds	r3, #1
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2b09      	cmp	r3, #9
 800405a:	bf94      	ite	ls
 800405c:	2301      	movls	r3, #1
 800405e:	2300      	movhi	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e019      	b.n	8004098 <HAL_ADC_ConfigChannel+0x4b4>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004072:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004074:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004076:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800407c:	2320      	movs	r3, #32
 800407e:	e003      	b.n	8004088 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004080:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004082:	fab3 f383 	clz	r3, r3
 8004086:	b2db      	uxtb	r3, r3
 8004088:	3301      	adds	r3, #1
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	2b09      	cmp	r3, #9
 8004090:	bf94      	ite	ls
 8004092:	2301      	movls	r3, #1
 8004094:	2300      	movhi	r3, #0
 8004096:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004098:	2b00      	cmp	r3, #0
 800409a:	d079      	beq.n	8004190 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d107      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x4d4>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	0e9b      	lsrs	r3, r3, #26
 80040ae:	3301      	adds	r3, #1
 80040b0:	069b      	lsls	r3, r3, #26
 80040b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040b6:	e015      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x500>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80040c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80040ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80040d0:	2320      	movs	r3, #32
 80040d2:	e003      	b.n	80040dc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80040d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	069b      	lsls	r3, r3, #26
 80040e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d109      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x520>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0e9b      	lsrs	r3, r3, #26
 80040f6:	3301      	adds	r3, #1
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	e017      	b.n	8004134 <HAL_ADC_ConfigChannel+0x550>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800410c:	fa93 f3a3 	rbit	r3, r3
 8004110:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004114:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800411c:	2320      	movs	r3, #32
 800411e:	e003      	b.n	8004128 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004120:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004122:	fab3 f383 	clz	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	3301      	adds	r3, #1
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	2101      	movs	r1, #1
 8004130:	fa01 f303 	lsl.w	r3, r1, r3
 8004134:	ea42 0103 	orr.w	r1, r2, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <HAL_ADC_ConfigChannel+0x576>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	0e9b      	lsrs	r3, r3, #26
 800414a:	3301      	adds	r3, #1
 800414c:	f003 021f 	and.w	r2, r3, #31
 8004150:	4613      	mov	r3, r2
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	4413      	add	r3, r2
 8004156:	051b      	lsls	r3, r3, #20
 8004158:	e018      	b.n	800418c <HAL_ADC_ConfigChannel+0x5a8>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800416c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004172:	2320      	movs	r3, #32
 8004174:	e003      	b.n	800417e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004178:	fab3 f383 	clz	r3, r3
 800417c:	b2db      	uxtb	r3, r3
 800417e:	3301      	adds	r3, #1
 8004180:	f003 021f 	and.w	r2, r3, #31
 8004184:	4613      	mov	r3, r2
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	4413      	add	r3, r2
 800418a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800418c:	430b      	orrs	r3, r1
 800418e:	e07e      	b.n	800428e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004198:	2b00      	cmp	r3, #0
 800419a:	d107      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x5c8>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	0e9b      	lsrs	r3, r3, #26
 80041a2:	3301      	adds	r3, #1
 80041a4:	069b      	lsls	r3, r3, #26
 80041a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041aa:	e015      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x5f4>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80041ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041bc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80041be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80041c4:	2320      	movs	r3, #32
 80041c6:	e003      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80041c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	3301      	adds	r3, #1
 80041d2:	069b      	lsls	r3, r3, #26
 80041d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x614>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	0e9b      	lsrs	r3, r3, #26
 80041ea:	3301      	adds	r3, #1
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	2101      	movs	r1, #1
 80041f2:	fa01 f303 	lsl.w	r3, r1, r3
 80041f6:	e017      	b.n	8004228 <HAL_ADC_ConfigChannel+0x644>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	fa93 f3a3 	rbit	r3, r3
 8004204:	61fb      	str	r3, [r7, #28]
  return result;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004210:	2320      	movs	r3, #32
 8004212:	e003      	b.n	800421c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	fab3 f383 	clz	r3, r3
 800421a:	b2db      	uxtb	r3, r3
 800421c:	3301      	adds	r3, #1
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	2101      	movs	r1, #1
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	ea42 0103 	orr.w	r1, r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10d      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x670>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0e9b      	lsrs	r3, r3, #26
 800423e:	3301      	adds	r3, #1
 8004240:	f003 021f 	and.w	r2, r3, #31
 8004244:	4613      	mov	r3, r2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4413      	add	r3, r2
 800424a:	3b1e      	subs	r3, #30
 800424c:	051b      	lsls	r3, r3, #20
 800424e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004252:	e01b      	b.n	800428c <HAL_ADC_ConfigChannel+0x6a8>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	fa93 f3a3 	rbit	r3, r3
 8004260:	613b      	str	r3, [r7, #16]
  return result;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800426c:	2320      	movs	r3, #32
 800426e:	e003      	b.n	8004278 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	3301      	adds	r3, #1
 800427a:	f003 021f 	and.w	r2, r3, #31
 800427e:	4613      	mov	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	4413      	add	r3, r2
 8004284:	3b1e      	subs	r3, #30
 8004286:	051b      	lsls	r3, r3, #20
 8004288:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800428c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004292:	4619      	mov	r1, r3
 8004294:	f7fe ff6e 	bl	8003174 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b09      	ldr	r3, [pc, #36]	@ (80042c4 <HAL_ADC_ConfigChannel+0x6e0>)
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80be 	beq.w	8004422 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ae:	d004      	beq.n	80042ba <HAL_ADC_ConfigChannel+0x6d6>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a04      	ldr	r2, [pc, #16]	@ (80042c8 <HAL_ADC_ConfigChannel+0x6e4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d10a      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x6ec>
 80042ba:	4b04      	ldr	r3, [pc, #16]	@ (80042cc <HAL_ADC_ConfigChannel+0x6e8>)
 80042bc:	e009      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x6ee>
 80042be:	bf00      	nop
 80042c0:	407f0000 	.word	0x407f0000
 80042c4:	80080000 	.word	0x80080000
 80042c8:	50000100 	.word	0x50000100
 80042cc:	50000300 	.word	0x50000300
 80042d0:	4b59      	ldr	r3, [pc, #356]	@ (8004438 <HAL_ADC_ConfigChannel+0x854>)
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fe50 	bl	8002f78 <LL_ADC_GetCommonPathInternalCh>
 80042d8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a56      	ldr	r2, [pc, #344]	@ (800443c <HAL_ADC_ConfigChannel+0x858>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_ADC_ConfigChannel+0x70c>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a55      	ldr	r2, [pc, #340]	@ (8004440 <HAL_ADC_ConfigChannel+0x85c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d13a      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d134      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004304:	d005      	beq.n	8004312 <HAL_ADC_ConfigChannel+0x72e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a4e      	ldr	r2, [pc, #312]	@ (8004444 <HAL_ADC_ConfigChannel+0x860>)
 800430c:	4293      	cmp	r3, r2
 800430e:	f040 8085 	bne.w	800441c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800431a:	d004      	beq.n	8004326 <HAL_ADC_ConfigChannel+0x742>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a49      	ldr	r2, [pc, #292]	@ (8004448 <HAL_ADC_ConfigChannel+0x864>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d101      	bne.n	800432a <HAL_ADC_ConfigChannel+0x746>
 8004326:	4a49      	ldr	r2, [pc, #292]	@ (800444c <HAL_ADC_ConfigChannel+0x868>)
 8004328:	e000      	b.n	800432c <HAL_ADC_ConfigChannel+0x748>
 800432a:	4a43      	ldr	r2, [pc, #268]	@ (8004438 <HAL_ADC_ConfigChannel+0x854>)
 800432c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004330:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f7fe fe0b 	bl	8002f52 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800433c:	4b44      	ldr	r3, [pc, #272]	@ (8004450 <HAL_ADC_ConfigChannel+0x86c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	099b      	lsrs	r3, r3, #6
 8004342:	4a44      	ldr	r2, [pc, #272]	@ (8004454 <HAL_ADC_ConfigChannel+0x870>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	099b      	lsrs	r3, r3, #6
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	4613      	mov	r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004356:	e002      	b.n	800435e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3b01      	subs	r3, #1
 800435c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f9      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004364:	e05a      	b.n	800441c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a3b      	ldr	r2, [pc, #236]	@ (8004458 <HAL_ADC_ConfigChannel+0x874>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d125      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d11f      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a31      	ldr	r2, [pc, #196]	@ (8004448 <HAL_ADC_ConfigChannel+0x864>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d104      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x7ac>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a34      	ldr	r2, [pc, #208]	@ (800445c <HAL_ADC_ConfigChannel+0x878>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d047      	beq.n	8004420 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004398:	d004      	beq.n	80043a4 <HAL_ADC_ConfigChannel+0x7c0>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a2a      	ldr	r2, [pc, #168]	@ (8004448 <HAL_ADC_ConfigChannel+0x864>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d101      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x7c4>
 80043a4:	4a29      	ldr	r2, [pc, #164]	@ (800444c <HAL_ADC_ConfigChannel+0x868>)
 80043a6:	e000      	b.n	80043aa <HAL_ADC_ConfigChannel+0x7c6>
 80043a8:	4a23      	ldr	r2, [pc, #140]	@ (8004438 <HAL_ADC_ConfigChannel+0x854>)
 80043aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7fe fdcc 	bl	8002f52 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043ba:	e031      	b.n	8004420 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a27      	ldr	r2, [pc, #156]	@ (8004460 <HAL_ADC_ConfigChannel+0x87c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d12d      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d127      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004448 <HAL_ADC_ConfigChannel+0x864>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d022      	beq.n	8004422 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043e4:	d004      	beq.n	80043f0 <HAL_ADC_ConfigChannel+0x80c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a17      	ldr	r2, [pc, #92]	@ (8004448 <HAL_ADC_ConfigChannel+0x864>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d101      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x810>
 80043f0:	4a16      	ldr	r2, [pc, #88]	@ (800444c <HAL_ADC_ConfigChannel+0x868>)
 80043f2:	e000      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x812>
 80043f4:	4a10      	ldr	r2, [pc, #64]	@ (8004438 <HAL_ADC_ConfigChannel+0x854>)
 80043f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043fe:	4619      	mov	r1, r3
 8004400:	4610      	mov	r0, r2
 8004402:	f7fe fda6 	bl	8002f52 <LL_ADC_SetCommonPathInternalCh>
 8004406:	e00c      	b.n	8004422 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800441a:	e002      	b.n	8004422 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800441c:	bf00      	nop
 800441e:	e000      	b.n	8004422 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004420:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800442a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800442e:	4618      	mov	r0, r3
 8004430:	37d8      	adds	r7, #216	@ 0xd8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	50000700 	.word	0x50000700
 800443c:	c3210000 	.word	0xc3210000
 8004440:	90c00010 	.word	0x90c00010
 8004444:	50000600 	.word	0x50000600
 8004448:	50000100 	.word	0x50000100
 800444c:	50000300 	.word	0x50000300
 8004450:	20000000 	.word	0x20000000
 8004454:	053e2d63 	.word	0x053e2d63
 8004458:	c7520000 	.word	0xc7520000
 800445c:	50000500 	.word	0x50000500
 8004460:	cb840000 	.word	0xcb840000

08004464 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800446c:	2300      	movs	r3, #0
 800446e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f7fe ff4b 	bl	8003310 <LL_ADC_IsEnabled>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d176      	bne.n	800456e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	4b3c      	ldr	r3, [pc, #240]	@ (8004578 <ADC_Enable+0x114>)
 8004488:	4013      	ands	r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00d      	beq.n	80044aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004492:	f043 0210 	orr.w	r2, r3, #16
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800449e:	f043 0201 	orr.w	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e062      	b.n	8004570 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe ff1a 	bl	80032e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044bc:	d004      	beq.n	80044c8 <ADC_Enable+0x64>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <ADC_Enable+0x118>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d101      	bne.n	80044cc <ADC_Enable+0x68>
 80044c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004580 <ADC_Enable+0x11c>)
 80044ca:	e000      	b.n	80044ce <ADC_Enable+0x6a>
 80044cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004584 <ADC_Enable+0x120>)
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe fd52 	bl	8002f78 <LL_ADC_GetCommonPathInternalCh>
 80044d4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80044d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d013      	beq.n	8004506 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044de:	4b2a      	ldr	r3, [pc, #168]	@ (8004588 <ADC_Enable+0x124>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	099b      	lsrs	r3, r3, #6
 80044e4:	4a29      	ldr	r2, [pc, #164]	@ (800458c <ADC_Enable+0x128>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	099b      	lsrs	r3, r3, #6
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	4613      	mov	r3, r2
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80044f8:	e002      	b.n	8004500 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f9      	bne.n	80044fa <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004506:	f7fe fce3 	bl	8002ed0 <HAL_GetTick>
 800450a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800450c:	e028      	b.n	8004560 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe fefc 	bl	8003310 <LL_ADC_IsEnabled>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d104      	bne.n	8004528 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fe fee0 	bl	80032e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004528:	f7fe fcd2 	bl	8002ed0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d914      	bls.n	8004560 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d00d      	beq.n	8004560 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004548:	f043 0210 	orr.w	r2, r3, #16
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004554:	f043 0201 	orr.w	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e007      	b.n	8004570 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b01      	cmp	r3, #1
 800456c:	d1cf      	bne.n	800450e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	8000003f 	.word	0x8000003f
 800457c:	50000100 	.word	0x50000100
 8004580:	50000300 	.word	0x50000300
 8004584:	50000700 	.word	0x50000700
 8004588:	20000000 	.word	0x20000000
 800458c:	053e2d63 	.word	0x053e2d63

08004590 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d14b      	bne.n	8004642 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d021      	beq.n	8004608 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fe fd81 	bl	80030d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d032      	beq.n	800463a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d12b      	bne.n	800463a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d11f      	bne.n	800463a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fe:	f043 0201 	orr.w	r2, r3, #1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004606:	e018      	b.n	800463a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d111      	bne.n	800463a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004626:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d105      	bne.n	800463a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004632:	f043 0201 	orr.w	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7fd faa2 	bl	8001b84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004640:	e00e      	b.n	8004660 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff fabe 	bl	8003bd0 <HAL_ADC_ErrorCallback>
}
 8004654:	e004      	b.n	8004660 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004674:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7fd fa5a 	bl	8001b30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004690:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004696:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a2:	f043 0204 	orr.w	r2, r3, #4
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff fa90 	bl	8003bd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <LL_ADC_IsEnabled>:
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <LL_ADC_IsEnabled+0x18>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <LL_ADC_IsEnabled+0x1a>
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <LL_ADC_REG_StartConversion>:
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046f2:	f043 0204 	orr.w	r2, r3, #4
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	609a      	str	r2, [r3, #8]
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <LL_ADC_REG_IsConversionOngoing>:
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b04      	cmp	r3, #4
 8004718:	d101      	bne.n	800471e <LL_ADC_REG_IsConversionOngoing+0x18>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b0a2      	sub	sp, #136	@ 0x88
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ffe2 	bl	8004706 <LL_ADC_REG_IsConversionOngoing>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
 800474a:	e096      	b.n	800487a <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8004756:	2302      	movs	r3, #2
 8004758:	e08f      	b.n	800487a <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004762:	2300      	movs	r3, #0
 8004764:	673b      	str	r3, [r7, #112]	@ 0x70
    ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004766:	2300      	movs	r3, #0
 8004768:	677b      	str	r3, [r7, #116]	@ 0x74

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004772:	d102      	bne.n	800477a <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8004774:	4b43      	ldr	r3, [pc, #268]	@ (8004884 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e009      	b.n	800478e <HAL_ADCEx_MultiModeStart_DMA+0x62>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a42      	ldr	r2, [pc, #264]	@ (8004888 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d102      	bne.n	800478a <HAL_ADCEx_MultiModeStart_DMA+0x5e>
 8004784:	4b41      	ldr	r3, [pc, #260]	@ (800488c <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	e001      	b.n	800478e <HAL_ADCEx_MultiModeStart_DMA+0x62>
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]

    if (tmp_hadc_slave.Instance == NULL)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <HAL_ADCEx_MultiModeStart_DMA+0x80>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004798:	f043 0220 	orr.w	r2, r3, #32
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e066      	b.n	800487a <HAL_ADCEx_MultiModeStart_DMA+0x14e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7ff fe59 	bl	8004464 <ADC_Enable>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (tmp_hal_status == HAL_OK)
 80047b8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d107      	bne.n	80047d0 <HAL_ADCEx_MultiModeStart_DMA+0xa4>
    {
      tmp_hal_status = ADC_Enable(&tmp_hadc_slave);
 80047c0:	f107 0314 	add.w	r3, r7, #20
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fe4d 	bl	8004464 <ADC_Enable>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80047d0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d14a      	bne.n	800486e <HAL_ADCEx_MultiModeStart_DMA+0x142>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80047e0:	f023 0301 	bic.w	r3, r3, #1
 80047e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	65da      	str	r2, [r3, #92]	@ 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f6:	4a26      	ldr	r2, [pc, #152]	@ (8004890 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 80047f8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fe:	4a25      	ldr	r2, [pc, #148]	@ (8004894 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8004800:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004806:	4a24      	ldr	r2, [pc, #144]	@ (8004898 <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 8004808:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004812:	d004      	beq.n	800481e <HAL_ADCEx_MultiModeStart_DMA+0xf2>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1a      	ldr	r2, [pc, #104]	@ (8004884 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d101      	bne.n	8004822 <HAL_ADCEx_MultiModeStart_DMA+0xf6>
 800481e:	4b1f      	ldr	r3, [pc, #124]	@ (800489c <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 8004820:	e000      	b.n	8004824 <HAL_ADCEx_MultiModeStart_DMA+0xf8>
 8004822:	4b1f      	ldr	r3, [pc, #124]	@ (80048a0 <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 8004824:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	221c      	movs	r2, #28
 800482e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0210 	orr.w	r2, r2, #16
 8004846:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800484c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004850:	330c      	adds	r3, #12
 8004852:	4619      	mov	r1, r3
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f000 fd12 	bl	8005280 <HAL_DMA_Start_IT>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff ff39 	bl	80046de <LL_ADC_REG_StartConversion>
 800486c:	e003      	b.n	8004876 <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004876:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 800487a:	4618      	mov	r0, r3
 800487c:	3788      	adds	r7, #136	@ 0x88
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	50000100 	.word	0x50000100
 8004888:	50000400 	.word	0x50000400
 800488c:	50000500 	.word	0x50000500
 8004890:	08004591 	.word	0x08004591
 8004894:	08004669 	.word	0x08004669
 8004898:	08004685 	.word	0x08004685
 800489c:	50000300 	.word	0x50000300
 80048a0:	50000700 	.word	0x50000700

080048a4 <HAL_ADCEx_MultiModeGetValue>:
  * @brief  Return the last ADC Master and Slave regular conversions results when in multimode configuration.
  * @param hadc ADC handle of ADC Master (handle of ADC Slave must not be used)
  * @retval The converted data values.
  */
uint32_t HAL_ADCEx_MultiModeGetValue(const ADC_HandleTypeDef *hadc)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning if no assert_param check */
  /* and possible no usage in __LL_ADC_COMMON_INSTANCE() below               */
  UNUSED(hadc);

  /* Pointer to the common control register  */
  tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048b4:	d004      	beq.n	80048c0 <HAL_ADCEx_MultiModeGetValue+0x1c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a07      	ldr	r2, [pc, #28]	@ (80048d8 <HAL_ADCEx_MultiModeGetValue+0x34>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d101      	bne.n	80048c4 <HAL_ADCEx_MultiModeGetValue+0x20>
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_ADCEx_MultiModeGetValue+0x38>)
 80048c2:	e000      	b.n	80048c6 <HAL_ADCEx_MultiModeGetValue+0x22>
 80048c4:	4b06      	ldr	r3, [pc, #24]	@ (80048e0 <HAL_ADCEx_MultiModeGetValue+0x3c>)
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Return the multi mode conversion value */
  return tmpADC_Common->CDR;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	68db      	ldr	r3, [r3, #12]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	50000100 	.word	0x50000100
 80048dc:	50000300 	.word	0x50000300
 80048e0:	50000700 	.word	0x50000700

080048e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b0a1      	sub	sp, #132	@ 0x84
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004962:	2302      	movs	r3, #2
 8004964:	e0e7      	b.n	8004b36 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800496e:	2300      	movs	r3, #0
 8004970:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004972:	2300      	movs	r3, #0
 8004974:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800497e:	d102      	bne.n	8004986 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004980:	4b6f      	ldr	r3, [pc, #444]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	e009      	b.n	800499a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a6e      	ldr	r2, [pc, #440]	@ (8004b44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d102      	bne.n	8004996 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004990:	4b6d      	ldr	r3, [pc, #436]	@ (8004b48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004992:	60bb      	str	r3, [r7, #8]
 8004994:	e001      	b.n	800499a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004996:	2300      	movs	r3, #0
 8004998:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10b      	bne.n	80049b8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a4:	f043 0220 	orr.w	r2, r3, #32
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0be      	b.n	8004b36 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fea3 	bl	8004706 <LL_ADC_REG_IsConversionOngoing>
 80049c0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff fe9d 	bl	8004706 <LL_ADC_REG_IsConversionOngoing>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f040 80a0 	bne.w	8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80049d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f040 809c 	bne.w	8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049e4:	d004      	beq.n	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a55      	ldr	r2, [pc, #340]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d101      	bne.n	80049f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80049f0:	4b56      	ldr	r3, [pc, #344]	@ (8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80049f2:	e000      	b.n	80049f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80049f4:	4b56      	ldr	r3, [pc, #344]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80049f6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d04b      	beq.n	8004a98 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004a00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a12:	035b      	lsls	r3, r3, #13
 8004a14:	430b      	orrs	r3, r1
 8004a16:	431a      	orrs	r2, r3
 8004a18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a24:	d004      	beq.n	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a45      	ldr	r2, [pc, #276]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d10f      	bne.n	8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004a30:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004a34:	f7ff fe40 	bl	80046b8 <LL_ADC_IsEnabled>
 8004a38:	4604      	mov	r4, r0
 8004a3a:	4841      	ldr	r0, [pc, #260]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a3c:	f7ff fe3c 	bl	80046b8 <LL_ADC_IsEnabled>
 8004a40:	4603      	mov	r3, r0
 8004a42:	4323      	orrs	r3, r4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e012      	b.n	8004a76 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004a50:	483c      	ldr	r0, [pc, #240]	@ (8004b44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a52:	f7ff fe31 	bl	80046b8 <LL_ADC_IsEnabled>
 8004a56:	4604      	mov	r4, r0
 8004a58:	483b      	ldr	r0, [pc, #236]	@ (8004b48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004a5a:	f7ff fe2d 	bl	80046b8 <LL_ADC_IsEnabled>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	431c      	orrs	r4, r3
 8004a62:	483c      	ldr	r0, [pc, #240]	@ (8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004a64:	f7ff fe28 	bl	80046b8 <LL_ADC_IsEnabled>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4323      	orrs	r3, r4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d056      	beq.n	8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a82:	f023 030f 	bic.w	r3, r3, #15
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	6811      	ldr	r1, [r2, #0]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	6892      	ldr	r2, [r2, #8]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	431a      	orrs	r2, r3
 8004a92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a94:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a96:	e047      	b.n	8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004a98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aa2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aac:	d004      	beq.n	8004ab8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a23      	ldr	r2, [pc, #140]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d10f      	bne.n	8004ad8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004ab8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004abc:	f7ff fdfc 	bl	80046b8 <LL_ADC_IsEnabled>
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	481f      	ldr	r0, [pc, #124]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ac4:	f7ff fdf8 	bl	80046b8 <LL_ADC_IsEnabled>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	4323      	orrs	r3, r4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf0c      	ite	eq
 8004ad0:	2301      	moveq	r3, #1
 8004ad2:	2300      	movne	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	e012      	b.n	8004afe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004ad8:	481a      	ldr	r0, [pc, #104]	@ (8004b44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004ada:	f7ff fded 	bl	80046b8 <LL_ADC_IsEnabled>
 8004ade:	4604      	mov	r4, r0
 8004ae0:	4819      	ldr	r0, [pc, #100]	@ (8004b48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004ae2:	f7ff fde9 	bl	80046b8 <LL_ADC_IsEnabled>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	431c      	orrs	r4, r3
 8004aea:	481a      	ldr	r0, [pc, #104]	@ (8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004aec:	f7ff fde4 	bl	80046b8 <LL_ADC_IsEnabled>
 8004af0:	4603      	mov	r3, r0
 8004af2:	4323      	orrs	r3, r4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d012      	beq.n	8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004b0a:	f023 030f 	bic.w	r3, r3, #15
 8004b0e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004b10:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b12:	e009      	b.n	8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004b26:	e000      	b.n	8004b2a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b32:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3784      	adds	r7, #132	@ 0x84
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd90      	pop	{r4, r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	50000100 	.word	0x50000100
 8004b44:	50000400 	.word	0x50000400
 8004b48:	50000500 	.word	0x50000500
 8004b4c:	50000300 	.word	0x50000300
 8004b50:	50000700 	.word	0x50000700
 8004b54:	50000600 	.word	0x50000600

08004b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b68:	4b0c      	ldr	r3, [pc, #48]	@ (8004b9c <__NVIC_SetPriorityGrouping+0x44>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b74:	4013      	ands	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b8a:	4a04      	ldr	r2, [pc, #16]	@ (8004b9c <__NVIC_SetPriorityGrouping+0x44>)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	60d3      	str	r3, [r2, #12]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba4:	4b04      	ldr	r3, [pc, #16]	@ (8004bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	0a1b      	lsrs	r3, r3, #8
 8004baa:	f003 0307 	and.w	r3, r3, #7
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	db0b      	blt.n	8004be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	f003 021f 	and.w	r2, r3, #31
 8004bd4:	4907      	ldr	r1, [pc, #28]	@ (8004bf4 <__NVIC_EnableIRQ+0x38>)
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2001      	movs	r0, #1
 8004bde:	fa00 f202 	lsl.w	r2, r0, r2
 8004be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	e000e100 	.word	0xe000e100

08004bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	6039      	str	r1, [r7, #0]
 8004c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	db0a      	blt.n	8004c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	490c      	ldr	r1, [pc, #48]	@ (8004c44 <__NVIC_SetPriority+0x4c>)
 8004c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c16:	0112      	lsls	r2, r2, #4
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c20:	e00a      	b.n	8004c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4908      	ldr	r1, [pc, #32]	@ (8004c48 <__NVIC_SetPriority+0x50>)
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	3b04      	subs	r3, #4
 8004c30:	0112      	lsls	r2, r2, #4
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	440b      	add	r3, r1
 8004c36:	761a      	strb	r2, [r3, #24]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	e000e100 	.word	0xe000e100
 8004c48:	e000ed00 	.word	0xe000ed00

08004c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b089      	sub	sp, #36	@ 0x24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f1c3 0307 	rsb	r3, r3, #7
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	bf28      	it	cs
 8004c6a:	2304      	movcs	r3, #4
 8004c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3304      	adds	r3, #4
 8004c72:	2b06      	cmp	r3, #6
 8004c74:	d902      	bls.n	8004c7c <NVIC_EncodePriority+0x30>
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3b03      	subs	r3, #3
 8004c7a:	e000      	b.n	8004c7e <NVIC_EncodePriority+0x32>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c80:	f04f 32ff 	mov.w	r2, #4294967295
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	401a      	ands	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c94:	f04f 31ff 	mov.w	r1, #4294967295
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9e:	43d9      	mvns	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca4:	4313      	orrs	r3, r2
         );
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3724      	adds	r7, #36	@ 0x24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cc4:	d301      	bcc.n	8004cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e00f      	b.n	8004cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cca:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf4 <SysTick_Config+0x40>)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cd2:	210f      	movs	r1, #15
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	f7ff ff8e 	bl	8004bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <SysTick_Config+0x40>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ce2:	4b04      	ldr	r3, [pc, #16]	@ (8004cf4 <SysTick_Config+0x40>)
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	e000e010 	.word	0xe000e010

08004cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ff29 	bl	8004b58 <__NVIC_SetPriorityGrouping>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b086      	sub	sp, #24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	4603      	mov	r3, r0
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d1c:	f7ff ff40 	bl	8004ba0 <__NVIC_GetPriorityGrouping>
 8004d20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	6978      	ldr	r0, [r7, #20]
 8004d28:	f7ff ff90 	bl	8004c4c <NVIC_EncodePriority>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d32:	4611      	mov	r1, r2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff ff5f 	bl	8004bf8 <__NVIC_SetPriority>
}
 8004d3a:	bf00      	nop
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	4603      	mov	r3, r0
 8004d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ff33 	bl	8004bbc <__NVIC_EnableIRQ>
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff ffa4 	bl	8004cb4 <SysTick_Config>
 8004d6c:	4603      	mov	r3, r0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e014      	b.n	8004db2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	791b      	ldrb	r3, [r3, #4]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d105      	bne.n	8004d9e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7fd fa2d 	bl	80021f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	@ 0x28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_DAC_ConfigChannel+0x1c>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e1a1      	b.n	8005120 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	795b      	ldrb	r3, [r3, #5]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_DAC_ConfigChannel+0x32>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e198      	b.n	8005120 <HAL_DAC_ConfigChannel+0x364>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2202      	movs	r2, #2
 8004df8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d17a      	bne.n	8004ef8 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004e02:	f7fe f865 	bl	8002ed0 <HAL_GetTick>
 8004e06:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d13d      	bne.n	8004e8a <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e0e:	e018      	b.n	8004e42 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e10:	f7fe f85e 	bl	8002ed0 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d911      	bls.n	8004e42 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f043 0208 	orr.w	r2, r3, #8
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e16e      	b.n	8005120 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1df      	bne.n	8004e10 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e58:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e5a:	e020      	b.n	8004e9e <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e5c:	f7fe f838 	bl	8002ed0 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d90f      	bls.n	8004e8a <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	da0a      	bge.n	8004e8a <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f043 0208 	orr.w	r2, r3, #8
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2203      	movs	r2, #3
 8004e84:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e14a      	b.n	8005120 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	dbe3      	blt.n	8004e5c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004eae:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	ea02 0103 	and.w	r1, r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	409a      	lsls	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	21ff      	movs	r1, #255	@ 0xff
 8004eda:	fa01 f303 	lsl.w	r3, r1, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	ea02 0103 	and.w	r1, r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	409a      	lsls	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d11d      	bne.n	8004f3c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	221f      	movs	r2, #31
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	43db      	mvns	r3, r3
 8004f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f18:	4013      	ands	r3, r2
 8004f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f30:	4313      	orrs	r3, r2
 8004f32:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f3a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f42:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2207      	movs	r2, #7
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	43db      	mvns	r3, r3
 8004f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f54:	4013      	ands	r3, r2
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d102      	bne.n	8004f66 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8004f60:	2300      	movs	r3, #0
 8004f62:	623b      	str	r3, [r7, #32]
 8004f64:	e00f      	b.n	8004f86 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d102      	bne.n	8004f74 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	623b      	str	r3, [r7, #32]
 8004f72:	e008      	b.n	8004f86 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d102      	bne.n	8004f82 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	623b      	str	r3, [r7, #32]
 8004f80:	e001      	b.n	8004f86 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	6a3a      	ldr	r2, [r7, #32]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa8:	4013      	ands	r3, r2
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	791b      	ldrb	r3, [r3, #4]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d102      	bne.n	8004fba <HAL_DAC_ConfigChannel+0x1fe>
 8004fb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fb8:	e000      	b.n	8004fbc <HAL_DAC_ConfigChannel+0x200>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	795b      	ldrb	r3, [r3, #5]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d102      	bne.n	8004fe6 <HAL_DAC_ConfigChannel+0x22a>
 8004fe0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fe4:	e000      	b.n	8004fe8 <HAL_DAC_ConfigChannel+0x22c>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d114      	bne.n	8005028 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004ffe:	f001 fad7 	bl	80065b0 <HAL_RCC_GetHCLKFreq>
 8005002:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4a48      	ldr	r2, [pc, #288]	@ (8005128 <HAL_DAC_ConfigChannel+0x36c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d904      	bls.n	8005016 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005012:	627b      	str	r3, [r7, #36]	@ 0x24
 8005014:	e00f      	b.n	8005036 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4a44      	ldr	r2, [pc, #272]	@ (800512c <HAL_DAC_ConfigChannel+0x370>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d90a      	bls.n	8005034 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005024:	627b      	str	r3, [r7, #36]	@ 0x24
 8005026:	e006      	b.n	8005036 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502e:	4313      	orrs	r3, r2
 8005030:	627b      	str	r3, [r7, #36]	@ 0x24
 8005032:	e000      	b.n	8005036 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005034:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f003 0310 	and.w	r3, r3, #16
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005044:	4313      	orrs	r3, r2
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800504e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6819      	ldr	r1, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	43da      	mvns	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	400a      	ands	r2, r1
 800506c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005088:	4013      	ands	r3, r2
 800508a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a0:	4313      	orrs	r3, r2
 80050a2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050aa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6819      	ldr	r1, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	22c0      	movs	r2, #192	@ 0xc0
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	43da      	mvns	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	400a      	ands	r2, r1
 80050c6:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	089b      	lsrs	r3, r3, #2
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f003 0310 	and.w	r3, r3, #16
 80050f2:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80050f6:	fa01 f303 	lsl.w	r3, r1, r3
 80050fa:	43db      	mvns	r3, r3
 80050fc:	ea02 0103 	and.w	r1, r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f003 0310 	and.w	r3, r3, #16
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	409a      	lsls	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800511e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3728      	adds	r7, #40	@ 0x28
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	09896800 	.word	0x09896800
 800512c:	04c4b400 	.word	0x04c4b400

08005130 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e08d      	b.n	800525e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	4b47      	ldr	r3, [pc, #284]	@ (8005268 <HAL_DMA_Init+0x138>)
 800514a:	429a      	cmp	r2, r3
 800514c:	d80f      	bhi.n	800516e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	4b45      	ldr	r3, [pc, #276]	@ (800526c <HAL_DMA_Init+0x13c>)
 8005156:	4413      	add	r3, r2
 8005158:	4a45      	ldr	r2, [pc, #276]	@ (8005270 <HAL_DMA_Init+0x140>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	009a      	lsls	r2, r3, #2
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a42      	ldr	r2, [pc, #264]	@ (8005274 <HAL_DMA_Init+0x144>)
 800516a:	641a      	str	r2, [r3, #64]	@ 0x40
 800516c:	e00e      	b.n	800518c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	4b40      	ldr	r3, [pc, #256]	@ (8005278 <HAL_DMA_Init+0x148>)
 8005176:	4413      	add	r3, r2
 8005178:	4a3d      	ldr	r2, [pc, #244]	@ (8005270 <HAL_DMA_Init+0x140>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	091b      	lsrs	r3, r3, #4
 8005180:	009a      	lsls	r2, r3, #2
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a3c      	ldr	r2, [pc, #240]	@ (800527c <HAL_DMA_Init+0x14c>)
 800518a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80051a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80051b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f9b6 	bl	8005550 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051ec:	d102      	bne.n	80051f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005208:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d010      	beq.n	8005234 <HAL_DMA_Init+0x104>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b04      	cmp	r3, #4
 8005218:	d80c      	bhi.n	8005234 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f9d6 	bl	80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005230:	605a      	str	r2, [r3, #4]
 8005232:	e008      	b.n	8005246 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40020407 	.word	0x40020407
 800526c:	bffdfff8 	.word	0xbffdfff8
 8005270:	cccccccd 	.word	0xcccccccd
 8005274:	40020000 	.word	0x40020000
 8005278:	bffdfbf8 	.word	0xbffdfbf8
 800527c:	40020400 	.word	0x40020400

08005280 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_DMA_Start_IT+0x20>
 800529c:	2302      	movs	r3, #2
 800529e:	e066      	b.n	800536e <HAL_DMA_Start_IT+0xee>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d155      	bne.n	8005360 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0201 	bic.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	68b9      	ldr	r1, [r7, #8]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f8fb 	bl	80054d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d008      	beq.n	80052f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 020e 	orr.w	r2, r2, #14
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e00f      	b.n	8005318 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0204 	bic.w	r2, r2, #4
 8005306:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 020a 	orr.w	r2, r2, #10
 8005316:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d007      	beq.n	8005336 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005330:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005334:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533a:	2b00      	cmp	r3, #0
 800533c:	d007      	beq.n	800534e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005348:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800534c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e005      	b.n	800536c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005368:	2302      	movs	r3, #2
 800536a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005392:	f003 031f 	and.w	r3, r3, #31
 8005396:	2204      	movs	r2, #4
 8005398:	409a      	lsls	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4013      	ands	r3, r2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d026      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x7a>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d021      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d107      	bne.n	80053ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0204 	bic.w	r2, r2, #4
 80053c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ce:	f003 021f 	and.w	r2, r3, #31
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d6:	2104      	movs	r1, #4
 80053d8:	fa01 f202 	lsl.w	r2, r1, r2
 80053dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d071      	beq.n	80054ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80053ee:	e06c      	b.n	80054ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f4:	f003 031f 	and.w	r3, r3, #31
 80053f8:	2202      	movs	r2, #2
 80053fa:	409a      	lsls	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d02e      	beq.n	8005462 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d029      	beq.n	8005462 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 020a 	bic.w	r2, r2, #10
 800542a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005438:	f003 021f 	and.w	r2, r3, #31
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005440:	2102      	movs	r1, #2
 8005442:	fa01 f202 	lsl.w	r2, r1, r2
 8005446:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d038      	beq.n	80054ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005460:	e033      	b.n	80054ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005466:	f003 031f 	and.w	r3, r3, #31
 800546a:	2208      	movs	r2, #8
 800546c:	409a      	lsls	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4013      	ands	r3, r2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d02a      	beq.n	80054cc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d025      	beq.n	80054cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 020e 	bic.w	r2, r2, #14
 800548e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005494:	f003 021f 	and.w	r2, r3, #31
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549c:	2101      	movs	r1, #1
 800549e:	fa01 f202 	lsl.w	r2, r1, r2
 80054a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d004      	beq.n	80054cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
}
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d004      	beq.n	80054fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80054fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005502:	f003 021f 	and.w	r2, r3, #31
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550a:	2101      	movs	r1, #1
 800550c:	fa01 f202 	lsl.w	r2, r1, r2
 8005510:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b10      	cmp	r3, #16
 8005520:	d108      	bne.n	8005534 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005532:	e007      	b.n	8005544 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	60da      	str	r2, [r3, #12]
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	4b16      	ldr	r3, [pc, #88]	@ (80055b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005560:	429a      	cmp	r2, r3
 8005562:	d802      	bhi.n	800556a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005564:	4b15      	ldr	r3, [pc, #84]	@ (80055bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	e001      	b.n	800556e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800556a:	4b15      	ldr	r3, [pc, #84]	@ (80055c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800556c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	b2db      	uxtb	r3, r3
 8005578:	3b08      	subs	r3, #8
 800557a:	4a12      	ldr	r2, [pc, #72]	@ (80055c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	091b      	lsrs	r3, r3, #4
 8005582:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005588:	089b      	lsrs	r3, r3, #2
 800558a:	009a      	lsls	r2, r3, #2
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4413      	add	r3, r2
 8005590:	461a      	mov	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a0b      	ldr	r2, [pc, #44]	@ (80055c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800559a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	2201      	movs	r2, #1
 80055a4:	409a      	lsls	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40020407 	.word	0x40020407
 80055bc:	40020800 	.word	0x40020800
 80055c0:	40020820 	.word	0x40020820
 80055c4:	cccccccd 	.word	0xcccccccd
 80055c8:	40020880 	.word	0x40020880

080055cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4b0b      	ldr	r3, [pc, #44]	@ (800560c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	461a      	mov	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a08      	ldr	r2, [pc, #32]	@ (8005610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80055ee:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	2201      	movs	r2, #1
 80055fa:	409a      	lsls	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	1000823f 	.word	0x1000823f
 8005610:	40020940 	.word	0x40020940

08005614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005622:	e15a      	b.n	80058da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	2101      	movs	r1, #1
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	fa01 f303 	lsl.w	r3, r1, r3
 8005630:	4013      	ands	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 814c 	beq.w	80058d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d005      	beq.n	8005654 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005650:	2b02      	cmp	r3, #2
 8005652:	d130      	bne.n	80056b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	2203      	movs	r2, #3
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	43db      	mvns	r3, r3
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4013      	ands	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800568a:	2201      	movs	r2, #1
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	43db      	mvns	r3, r3
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4013      	ands	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	091b      	lsrs	r3, r3, #4
 80056a0:	f003 0201 	and.w	r2, r3, #1
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d017      	beq.n	80056f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	2203      	movs	r2, #3
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43db      	mvns	r3, r3
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4013      	ands	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d123      	bne.n	8005746 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	08da      	lsrs	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3208      	adds	r2, #8
 8005706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800570a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	220f      	movs	r2, #15
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4013      	ands	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	691a      	ldr	r2, [r3, #16]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	08da      	lsrs	r2, r3, #3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3208      	adds	r2, #8
 8005740:	6939      	ldr	r1, [r7, #16]
 8005742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	2203      	movs	r2, #3
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43db      	mvns	r3, r3
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4013      	ands	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f003 0203 	and.w	r2, r3, #3
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 80a6 	beq.w	80058d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005788:	4b5b      	ldr	r3, [pc, #364]	@ (80058f8 <HAL_GPIO_Init+0x2e4>)
 800578a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800578c:	4a5a      	ldr	r2, [pc, #360]	@ (80058f8 <HAL_GPIO_Init+0x2e4>)
 800578e:	f043 0301 	orr.w	r3, r3, #1
 8005792:	6613      	str	r3, [r2, #96]	@ 0x60
 8005794:	4b58      	ldr	r3, [pc, #352]	@ (80058f8 <HAL_GPIO_Init+0x2e4>)
 8005796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057a0:	4a56      	ldr	r2, [pc, #344]	@ (80058fc <HAL_GPIO_Init+0x2e8>)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	089b      	lsrs	r3, r3, #2
 80057a6:	3302      	adds	r3, #2
 80057a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f003 0303 	and.w	r3, r3, #3
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	220f      	movs	r2, #15
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	43db      	mvns	r3, r3
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4013      	ands	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80057ca:	d01f      	beq.n	800580c <HAL_GPIO_Init+0x1f8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a4c      	ldr	r2, [pc, #304]	@ (8005900 <HAL_GPIO_Init+0x2ec>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d019      	beq.n	8005808 <HAL_GPIO_Init+0x1f4>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a4b      	ldr	r2, [pc, #300]	@ (8005904 <HAL_GPIO_Init+0x2f0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d013      	beq.n	8005804 <HAL_GPIO_Init+0x1f0>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a4a      	ldr	r2, [pc, #296]	@ (8005908 <HAL_GPIO_Init+0x2f4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00d      	beq.n	8005800 <HAL_GPIO_Init+0x1ec>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a49      	ldr	r2, [pc, #292]	@ (800590c <HAL_GPIO_Init+0x2f8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d007      	beq.n	80057fc <HAL_GPIO_Init+0x1e8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a48      	ldr	r2, [pc, #288]	@ (8005910 <HAL_GPIO_Init+0x2fc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d101      	bne.n	80057f8 <HAL_GPIO_Init+0x1e4>
 80057f4:	2305      	movs	r3, #5
 80057f6:	e00a      	b.n	800580e <HAL_GPIO_Init+0x1fa>
 80057f8:	2306      	movs	r3, #6
 80057fa:	e008      	b.n	800580e <HAL_GPIO_Init+0x1fa>
 80057fc:	2304      	movs	r3, #4
 80057fe:	e006      	b.n	800580e <HAL_GPIO_Init+0x1fa>
 8005800:	2303      	movs	r3, #3
 8005802:	e004      	b.n	800580e <HAL_GPIO_Init+0x1fa>
 8005804:	2302      	movs	r3, #2
 8005806:	e002      	b.n	800580e <HAL_GPIO_Init+0x1fa>
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <HAL_GPIO_Init+0x1fa>
 800580c:	2300      	movs	r3, #0
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	f002 0203 	and.w	r2, r2, #3
 8005814:	0092      	lsls	r2, r2, #2
 8005816:	4093      	lsls	r3, r2
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800581e:	4937      	ldr	r1, [pc, #220]	@ (80058fc <HAL_GPIO_Init+0x2e8>)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	089b      	lsrs	r3, r3, #2
 8005824:	3302      	adds	r3, #2
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800582c:	4b39      	ldr	r3, [pc, #228]	@ (8005914 <HAL_GPIO_Init+0x300>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	43db      	mvns	r3, r3
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4013      	ands	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005850:	4a30      	ldr	r2, [pc, #192]	@ (8005914 <HAL_GPIO_Init+0x300>)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005856:	4b2f      	ldr	r3, [pc, #188]	@ (8005914 <HAL_GPIO_Init+0x300>)
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	43db      	mvns	r3, r3
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4013      	ands	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800587a:	4a26      	ldr	r2, [pc, #152]	@ (8005914 <HAL_GPIO_Init+0x300>)
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005880:	4b24      	ldr	r3, [pc, #144]	@ (8005914 <HAL_GPIO_Init+0x300>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	43db      	mvns	r3, r3
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4013      	ands	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80058a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005914 <HAL_GPIO_Init+0x300>)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80058aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005914 <HAL_GPIO_Init+0x300>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	43db      	mvns	r3, r3
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4013      	ands	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80058ce:	4a11      	ldr	r2, [pc, #68]	@ (8005914 <HAL_GPIO_Init+0x300>)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	3301      	adds	r3, #1
 80058d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	fa22 f303 	lsr.w	r3, r2, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f47f ae9d 	bne.w	8005624 <HAL_GPIO_Init+0x10>
  }
}
 80058ea:	bf00      	nop
 80058ec:	bf00      	nop
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	40021000 	.word	0x40021000
 80058fc:	40010000 	.word	0x40010000
 8005900:	48000400 	.word	0x48000400
 8005904:	48000800 	.word	0x48000800
 8005908:	48000c00 	.word	0x48000c00
 800590c:	48001000 	.word	0x48001000
 8005910:	48001400 	.word	0x48001400
 8005914:	40010400 	.word	0x40010400

08005918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	807b      	strh	r3, [r7, #2]
 8005924:	4613      	mov	r3, r2
 8005926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005928:	787b      	ldrb	r3, [r7, #1]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800592e:	887a      	ldrh	r2, [r7, #2]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005934:	e002      	b.n	800593c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005936:	887a      	ldrh	r2, [r7, #2]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e0bb      	b.n	8005ad6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b05      	cmp	r3, #5
 8005968:	d101      	bne.n	800596e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e0b3      	b.n	8005ad6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d101      	bne.n	800597e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e0ab      	b.n	8005ad6 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800597e:	4b58      	ldr	r3, [pc, #352]	@ (8005ae0 <HAL_OPAMP_Init+0x198>)
 8005980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005982:	4a57      	ldr	r2, [pc, #348]	@ (8005ae0 <HAL_OPAMP_Init+0x198>)
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	6613      	str	r3, [r2, #96]	@ 0x60
 800598a:	4b55      	ldr	r3, [pc, #340]	@ (8005ae0 <HAL_OPAMP_Init+0x198>)
 800598c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	60bb      	str	r3, [r7, #8]
 8005994:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d103      	bne.n	80059aa <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fc fc62 	bl	8002274 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2b40      	cmp	r3, #64	@ 0x40
 80059b6:	d003      	beq.n	80059c0 <HAL_OPAMP_Init+0x78>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2b60      	cmp	r3, #96	@ 0x60
 80059be:	d133      	bne.n	8005a28 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f023 0110 	bic.w	r1, r3, #16
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	4b41      	ldr	r3, [pc, #260]	@ (8005ae4 <HAL_OPAMP_Init+0x19c>)
 80059de:	4013      	ands	r3, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6851      	ldr	r1, [r2, #4]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6892      	ldr	r2, [r2, #8]
 80059e8:	4311      	orrs	r1, r2
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6912      	ldr	r2, [r2, #16]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	7d09      	ldrb	r1, [r1, #20]
 80059f4:	2901      	cmp	r1, #1
 80059f6:	d102      	bne.n	80059fe <HAL_OPAMP_Init+0xb6>
 80059f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059fc:	e000      	b.n	8005a00 <HAL_OPAMP_Init+0xb8>
 80059fe:	2100      	movs	r1, #0
 8005a00:	4311      	orrs	r1, r2
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a06:	4311      	orrs	r1, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005a0c:	4311      	orrs	r1, r2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a12:	04d2      	lsls	r2, r2, #19
 8005a14:	4311      	orrs	r1, r2
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a1a:	0612      	lsls	r2, r2, #24
 8005a1c:	4311      	orrs	r1, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6812      	ldr	r2, [r2, #0]
 8005a22:	430b      	orrs	r3, r1
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	e035      	b.n	8005a94 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f023 0110 	bic.w	r1, r3, #16
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	4b27      	ldr	r3, [pc, #156]	@ (8005ae4 <HAL_OPAMP_Init+0x19c>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6851      	ldr	r1, [r2, #4]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6892      	ldr	r2, [r2, #8]
 8005a50:	4311      	orrs	r1, r2
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	68d2      	ldr	r2, [r2, #12]
 8005a56:	4311      	orrs	r1, r2
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6912      	ldr	r2, [r2, #16]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	7d09      	ldrb	r1, [r1, #20]
 8005a62:	2901      	cmp	r1, #1
 8005a64:	d102      	bne.n	8005a6c <HAL_OPAMP_Init+0x124>
 8005a66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a6a:	e000      	b.n	8005a6e <HAL_OPAMP_Init+0x126>
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4311      	orrs	r1, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a74:	4311      	orrs	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005a7a:	4311      	orrs	r1, r2
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a80:	04d2      	lsls	r2, r2, #19
 8005a82:	4311      	orrs	r1, r2
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a88:	0612      	lsls	r2, r2, #24
 8005a8a:	4311      	orrs	r1, r2
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	430b      	orrs	r3, r1
 8005a92:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	db10      	blt.n	8005ac0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699a      	ldr	r2, [r3, #24]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d103      	bne.n	8005ad4 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	e0003e11 	.word	0xe0003e11

08005ae8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d141      	bne.n	8005b7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005af6:	4b4b      	ldr	r3, [pc, #300]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b02:	d131      	bne.n	8005b68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b04:	4b47      	ldr	r3, [pc, #284]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b0a:	4a46      	ldr	r2, [pc, #280]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b14:	4b43      	ldr	r3, [pc, #268]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b1c:	4a41      	ldr	r2, [pc, #260]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b24:	4b40      	ldr	r3, [pc, #256]	@ (8005c28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2232      	movs	r2, #50	@ 0x32
 8005b2a:	fb02 f303 	mul.w	r3, r2, r3
 8005b2e:	4a3f      	ldr	r2, [pc, #252]	@ (8005c2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b30:	fba2 2303 	umull	r2, r3, r2, r3
 8005b34:	0c9b      	lsrs	r3, r3, #18
 8005b36:	3301      	adds	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b3a:	e002      	b.n	8005b42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b42:	4b38      	ldr	r3, [pc, #224]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b4e:	d102      	bne.n	8005b56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f2      	bne.n	8005b3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b56:	4b33      	ldr	r3, [pc, #204]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b62:	d158      	bne.n	8005c16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e057      	b.n	8005c18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b68:	4b2e      	ldr	r3, [pc, #184]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005b78:	e04d      	b.n	8005c16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b80:	d141      	bne.n	8005c06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b82:	4b28      	ldr	r3, [pc, #160]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b8e:	d131      	bne.n	8005bf4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b90:	4b24      	ldr	r3, [pc, #144]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b96:	4a23      	ldr	r2, [pc, #140]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ba0:	4b20      	ldr	r3, [pc, #128]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005baa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2232      	movs	r2, #50	@ 0x32
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	4a1c      	ldr	r2, [pc, #112]	@ (8005c2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc0:	0c9b      	lsrs	r3, r3, #18
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bc6:	e002      	b.n	8005bce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bce:	4b15      	ldr	r3, [pc, #84]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bda:	d102      	bne.n	8005be2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f2      	bne.n	8005bc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005be2:	4b10      	ldr	r3, [pc, #64]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bee:	d112      	bne.n	8005c16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e011      	b.n	8005c18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005c04:	e007      	b.n	8005c16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c06:	4b07      	ldr	r3, [pc, #28]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c0e:	4a05      	ldr	r2, [pc, #20]	@ (8005c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	40007000 	.word	0x40007000
 8005c28:	20000000 	.word	0x20000000
 8005c2c:	431bde83 	.word	0x431bde83

08005c30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005c34:	4b05      	ldr	r3, [pc, #20]	@ (8005c4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	4a04      	ldr	r2, [pc, #16]	@ (8005c4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c3e:	6093      	str	r3, [r2, #8]
}
 8005c40:	bf00      	nop
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40007000 	.word	0x40007000

08005c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e2fe      	b.n	8006260 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d075      	beq.n	8005d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c6e:	4b97      	ldr	r3, [pc, #604]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 030c 	and.w	r3, r3, #12
 8005c76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c78:	4b94      	ldr	r3, [pc, #592]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	2b0c      	cmp	r3, #12
 8005c86:	d102      	bne.n	8005c8e <HAL_RCC_OscConfig+0x3e>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d002      	beq.n	8005c94 <HAL_RCC_OscConfig+0x44>
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d10b      	bne.n	8005cac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c94:	4b8d      	ldr	r3, [pc, #564]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d05b      	beq.n	8005d58 <HAL_RCC_OscConfig+0x108>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d157      	bne.n	8005d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e2d9      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cb4:	d106      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x74>
 8005cb6:	4b85      	ldr	r3, [pc, #532]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a84      	ldr	r2, [pc, #528]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	e01d      	b.n	8005d00 <HAL_RCC_OscConfig+0xb0>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ccc:	d10c      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x98>
 8005cce:	4b7f      	ldr	r3, [pc, #508]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	4b7c      	ldr	r3, [pc, #496]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a7b      	ldr	r2, [pc, #492]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	e00b      	b.n	8005d00 <HAL_RCC_OscConfig+0xb0>
 8005ce8:	4b78      	ldr	r3, [pc, #480]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a77      	ldr	r2, [pc, #476]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	4b75      	ldr	r3, [pc, #468]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a74      	ldr	r2, [pc, #464]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d013      	beq.n	8005d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d08:	f7fd f8e2 	bl	8002ed0 <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d10:	f7fd f8de 	bl	8002ed0 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b64      	cmp	r3, #100	@ 0x64
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e29e      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d22:	4b6a      	ldr	r3, [pc, #424]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0f0      	beq.n	8005d10 <HAL_RCC_OscConfig+0xc0>
 8005d2e:	e014      	b.n	8005d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d30:	f7fd f8ce 	bl	8002ed0 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d38:	f7fd f8ca 	bl	8002ed0 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	@ 0x64
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e28a      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d4a:	4b60      	ldr	r3, [pc, #384]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f0      	bne.n	8005d38 <HAL_RCC_OscConfig+0xe8>
 8005d56:	e000      	b.n	8005d5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d075      	beq.n	8005e52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d66:	4b59      	ldr	r3, [pc, #356]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 030c 	and.w	r3, r3, #12
 8005d6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d70:	4b56      	ldr	r3, [pc, #344]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	2b0c      	cmp	r3, #12
 8005d7e:	d102      	bne.n	8005d86 <HAL_RCC_OscConfig+0x136>
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d002      	beq.n	8005d8c <HAL_RCC_OscConfig+0x13c>
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b04      	cmp	r3, #4
 8005d8a:	d11f      	bne.n	8005dcc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d8c:	4b4f      	ldr	r3, [pc, #316]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <HAL_RCC_OscConfig+0x154>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e25d      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da4:	4b49      	ldr	r3, [pc, #292]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	061b      	lsls	r3, r3, #24
 8005db2:	4946      	ldr	r1, [pc, #280]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005db8:	4b45      	ldr	r3, [pc, #276]	@ (8005ed0 <HAL_RCC_OscConfig+0x280>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fd f83b 	bl	8002e38 <HAL_InitTick>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d043      	beq.n	8005e50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e249      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d023      	beq.n	8005e1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de0:	f7fd f876 	bl	8002ed0 <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005de8:	f7fd f872 	bl	8002ed0 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e232      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dfa:	4b34      	ldr	r3, [pc, #208]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0f0      	beq.n	8005de8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e06:	4b31      	ldr	r3, [pc, #196]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	061b      	lsls	r3, r3, #24
 8005e14:	492d      	ldr	r1, [pc, #180]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	604b      	str	r3, [r1, #4]
 8005e1a:	e01a      	b.n	8005e52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a2a      	ldr	r2, [pc, #168]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005e22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e28:	f7fd f852 	bl	8002ed0 <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e30:	f7fd f84e 	bl	8002ed0 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e20e      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e42:	4b22      	ldr	r3, [pc, #136]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f0      	bne.n	8005e30 <HAL_RCC_OscConfig+0x1e0>
 8005e4e:	e000      	b.n	8005e52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d041      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d01c      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e66:	4b19      	ldr	r3, [pc, #100]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e6c:	4a17      	ldr	r2, [pc, #92]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e76:	f7fd f82b 	bl	8002ed0 <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e7c:	e008      	b.n	8005e90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e7e:	f7fd f827 	bl	8002ed0 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e1e7      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e90:	4b0e      	ldr	r3, [pc, #56]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0ef      	beq.n	8005e7e <HAL_RCC_OscConfig+0x22e>
 8005e9e:	e020      	b.n	8005ee2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ea6:	4a09      	ldr	r2, [pc, #36]	@ (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb0:	f7fd f80e 	bl	8002ed0 <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005eb6:	e00d      	b.n	8005ed4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eb8:	f7fd f80a 	bl	8002ed0 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d906      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e1ca      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
 8005eca:	bf00      	nop
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ed4:	4b8c      	ldr	r3, [pc, #560]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1ea      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 80a6 	beq.w	800603c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ef4:	4b84      	ldr	r3, [pc, #528]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <HAL_RCC_OscConfig+0x2b4>
 8005f00:	2301      	movs	r3, #1
 8005f02:	e000      	b.n	8005f06 <HAL_RCC_OscConfig+0x2b6>
 8005f04:	2300      	movs	r3, #0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00d      	beq.n	8005f26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f0a:	4b7f      	ldr	r3, [pc, #508]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f0e:	4a7e      	ldr	r2, [pc, #504]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f16:	4b7c      	ldr	r3, [pc, #496]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005f22:	2301      	movs	r3, #1
 8005f24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f26:	4b79      	ldr	r3, [pc, #484]	@ (800610c <HAL_RCC_OscConfig+0x4bc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d118      	bne.n	8005f64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f32:	4b76      	ldr	r3, [pc, #472]	@ (800610c <HAL_RCC_OscConfig+0x4bc>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a75      	ldr	r2, [pc, #468]	@ (800610c <HAL_RCC_OscConfig+0x4bc>)
 8005f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f3e:	f7fc ffc7 	bl	8002ed0 <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f46:	f7fc ffc3 	bl	8002ed0 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e183      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f58:	4b6c      	ldr	r3, [pc, #432]	@ (800610c <HAL_RCC_OscConfig+0x4bc>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0f0      	beq.n	8005f46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d108      	bne.n	8005f7e <HAL_RCC_OscConfig+0x32e>
 8005f6c:	4b66      	ldr	r3, [pc, #408]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f72:	4a65      	ldr	r2, [pc, #404]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005f74:	f043 0301 	orr.w	r3, r3, #1
 8005f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f7c:	e024      	b.n	8005fc8 <HAL_RCC_OscConfig+0x378>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b05      	cmp	r3, #5
 8005f84:	d110      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x358>
 8005f86:	4b60      	ldr	r3, [pc, #384]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f8c:	4a5e      	ldr	r2, [pc, #376]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005f8e:	f043 0304 	orr.w	r3, r3, #4
 8005f92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f96:	4b5c      	ldr	r3, [pc, #368]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f9c:	4a5a      	ldr	r2, [pc, #360]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fa6:	e00f      	b.n	8005fc8 <HAL_RCC_OscConfig+0x378>
 8005fa8:	4b57      	ldr	r3, [pc, #348]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fae:	4a56      	ldr	r2, [pc, #344]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fb8:	4b53      	ldr	r3, [pc, #332]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fbe:	4a52      	ldr	r2, [pc, #328]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005fc0:	f023 0304 	bic.w	r3, r3, #4
 8005fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d016      	beq.n	8005ffe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd0:	f7fc ff7e 	bl	8002ed0 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fd6:	e00a      	b.n	8005fee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd8:	f7fc ff7a 	bl	8002ed0 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e138      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fee:	4b46      	ldr	r3, [pc, #280]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8005ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0ed      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x388>
 8005ffc:	e015      	b.n	800602a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffe:	f7fc ff67 	bl	8002ed0 <HAL_GetTick>
 8006002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006004:	e00a      	b.n	800601c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006006:	f7fc ff63 	bl	8002ed0 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006014:	4293      	cmp	r3, r2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e121      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800601c:	4b3a      	ldr	r3, [pc, #232]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1ed      	bne.n	8006006 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800602a:	7ffb      	ldrb	r3, [r7, #31]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d105      	bne.n	800603c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006030:	4b35      	ldr	r3, [pc, #212]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8006032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006034:	4a34      	ldr	r2, [pc, #208]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8006036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800603a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0320 	and.w	r3, r3, #32
 8006044:	2b00      	cmp	r3, #0
 8006046:	d03c      	beq.n	80060c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01c      	beq.n	800608a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006050:	4b2d      	ldr	r3, [pc, #180]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8006052:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006056:	4a2c      	ldr	r2, [pc, #176]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8006058:	f043 0301 	orr.w	r3, r3, #1
 800605c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006060:	f7fc ff36 	bl	8002ed0 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006068:	f7fc ff32 	bl	8002ed0 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e0f2      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800607a:	4b23      	ldr	r3, [pc, #140]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 800607c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0ef      	beq.n	8006068 <HAL_RCC_OscConfig+0x418>
 8006088:	e01b      	b.n	80060c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800608a:	4b1f      	ldr	r3, [pc, #124]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 800608c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006090:	4a1d      	ldr	r2, [pc, #116]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800609a:	f7fc ff19 	bl	8002ed0 <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060a2:	f7fc ff15 	bl	8002ed0 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e0d5      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060b4:	4b14      	ldr	r3, [pc, #80]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 80060b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1ef      	bne.n	80060a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 80c9 	beq.w	800625e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 030c 	and.w	r3, r3, #12
 80060d4:	2b0c      	cmp	r3, #12
 80060d6:	f000 8083 	beq.w	80061e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d15e      	bne.n	80061a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e2:	4b09      	ldr	r3, [pc, #36]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a08      	ldr	r2, [pc, #32]	@ (8006108 <HAL_RCC_OscConfig+0x4b8>)
 80060e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ee:	f7fc feef 	bl	8002ed0 <HAL_GetTick>
 80060f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060f4:	e00c      	b.n	8006110 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f6:	f7fc feeb 	bl	8002ed0 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d905      	bls.n	8006110 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e0ab      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
 8006108:	40021000 	.word	0x40021000
 800610c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006110:	4b55      	ldr	r3, [pc, #340]	@ (8006268 <HAL_RCC_OscConfig+0x618>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1ec      	bne.n	80060f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800611c:	4b52      	ldr	r3, [pc, #328]	@ (8006268 <HAL_RCC_OscConfig+0x618>)
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	4b52      	ldr	r3, [pc, #328]	@ (800626c <HAL_RCC_OscConfig+0x61c>)
 8006122:	4013      	ands	r3, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6a11      	ldr	r1, [r2, #32]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800612c:	3a01      	subs	r2, #1
 800612e:	0112      	lsls	r2, r2, #4
 8006130:	4311      	orrs	r1, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006136:	0212      	lsls	r2, r2, #8
 8006138:	4311      	orrs	r1, r2
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800613e:	0852      	lsrs	r2, r2, #1
 8006140:	3a01      	subs	r2, #1
 8006142:	0552      	lsls	r2, r2, #21
 8006144:	4311      	orrs	r1, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800614a:	0852      	lsrs	r2, r2, #1
 800614c:	3a01      	subs	r2, #1
 800614e:	0652      	lsls	r2, r2, #25
 8006150:	4311      	orrs	r1, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006156:	06d2      	lsls	r2, r2, #27
 8006158:	430a      	orrs	r2, r1
 800615a:	4943      	ldr	r1, [pc, #268]	@ (8006268 <HAL_RCC_OscConfig+0x618>)
 800615c:	4313      	orrs	r3, r2
 800615e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006160:	4b41      	ldr	r3, [pc, #260]	@ (8006268 <HAL_RCC_OscConfig+0x618>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a40      	ldr	r2, [pc, #256]	@ (8006268 <HAL_RCC_OscConfig+0x618>)
 8006166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800616a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800616c:	4b3e      	ldr	r3, [pc, #248]	@ (8006268 <HAL_RCC_OscConfig+0x618>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	4a3d      	ldr	r2, [pc, #244]	@ (8006268 <HAL_RCC_OscConfig+0x618>)
 8006172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006176:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006178:	f7fc feaa 	bl	8002ed0 <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006180:	f7fc fea6 	bl	8002ed0 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e066      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006192:	4b35      	ldr	r3, [pc, #212]	@ (8006268 <HAL_RCC_OscConfig+0x618>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <HAL_RCC_OscConfig+0x530>
 800619e:	e05e      	b.n	800625e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a0:	4b31      	ldr	r3, [pc, #196]	@ (8006268 <HAL_RCC_OscConfig+0x618>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a30      	ldr	r2, [pc, #192]	@ (8006268 <HAL_RCC_OscConfig+0x618>)
 80061a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ac:	f7fc fe90 	bl	8002ed0 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b4:	f7fc fe8c 	bl	8002ed0 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e04c      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061c6:	4b28      	ldr	r3, [pc, #160]	@ (8006268 <HAL_RCC_OscConfig+0x618>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80061d2:	4b25      	ldr	r3, [pc, #148]	@ (8006268 <HAL_RCC_OscConfig+0x618>)
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	4924      	ldr	r1, [pc, #144]	@ (8006268 <HAL_RCC_OscConfig+0x618>)
 80061d8:	4b25      	ldr	r3, [pc, #148]	@ (8006270 <HAL_RCC_OscConfig+0x620>)
 80061da:	4013      	ands	r3, r2
 80061dc:	60cb      	str	r3, [r1, #12]
 80061de:	e03e      	b.n	800625e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e039      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80061ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006268 <HAL_RCC_OscConfig+0x618>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f003 0203 	and.w	r2, r3, #3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d12c      	bne.n	800625a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620a:	3b01      	subs	r3, #1
 800620c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800620e:	429a      	cmp	r2, r3
 8006210:	d123      	bne.n	800625a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800621e:	429a      	cmp	r2, r3
 8006220:	d11b      	bne.n	800625a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800622e:	429a      	cmp	r2, r3
 8006230:	d113      	bne.n	800625a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623c:	085b      	lsrs	r3, r3, #1
 800623e:	3b01      	subs	r3, #1
 8006240:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006242:	429a      	cmp	r2, r3
 8006244:	d109      	bne.n	800625a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	3b01      	subs	r3, #1
 8006254:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006256:	429a      	cmp	r2, r3
 8006258:	d001      	beq.n	800625e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3720      	adds	r7, #32
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40021000 	.word	0x40021000
 800626c:	019f800c 	.word	0x019f800c
 8006270:	feeefffc 	.word	0xfeeefffc

08006274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800627e:	2300      	movs	r3, #0
 8006280:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e11e      	b.n	80064ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800628c:	4b91      	ldr	r3, [pc, #580]	@ (80064d4 <HAL_RCC_ClockConfig+0x260>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d910      	bls.n	80062bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800629a:	4b8e      	ldr	r3, [pc, #568]	@ (80064d4 <HAL_RCC_ClockConfig+0x260>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f023 020f 	bic.w	r2, r3, #15
 80062a2:	498c      	ldr	r1, [pc, #560]	@ (80064d4 <HAL_RCC_ClockConfig+0x260>)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062aa:	4b8a      	ldr	r3, [pc, #552]	@ (80064d4 <HAL_RCC_ClockConfig+0x260>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e106      	b.n	80064ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d073      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d129      	bne.n	8006324 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062d0:	4b81      	ldr	r3, [pc, #516]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e0f4      	b.n	80064ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80062e0:	f000 f99e 	bl	8006620 <RCC_GetSysClockFreqFromPLLSource>
 80062e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4a7c      	ldr	r2, [pc, #496]	@ (80064dc <HAL_RCC_ClockConfig+0x268>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d93f      	bls.n	800636e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80062ee:	4b7a      	ldr	r3, [pc, #488]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006302:	2b00      	cmp	r3, #0
 8006304:	d033      	beq.n	800636e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800630a:	2b00      	cmp	r3, #0
 800630c:	d12f      	bne.n	800636e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800630e:	4b72      	ldr	r3, [pc, #456]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006316:	4a70      	ldr	r2, [pc, #448]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 8006318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800631c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800631e:	2380      	movs	r3, #128	@ 0x80
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	e024      	b.n	800636e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d107      	bne.n	800633c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800632c:	4b6a      	ldr	r3, [pc, #424]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d109      	bne.n	800634c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0c6      	b.n	80064ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800633c:	4b66      	ldr	r3, [pc, #408]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e0be      	b.n	80064ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800634c:	f000 f8ce 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 8006350:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	4a61      	ldr	r2, [pc, #388]	@ (80064dc <HAL_RCC_ClockConfig+0x268>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d909      	bls.n	800636e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800635a:	4b5f      	ldr	r3, [pc, #380]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006362:	4a5d      	ldr	r2, [pc, #372]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 8006364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006368:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800636a:	2380      	movs	r3, #128	@ 0x80
 800636c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800636e:	4b5a      	ldr	r3, [pc, #360]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f023 0203 	bic.w	r2, r3, #3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	4957      	ldr	r1, [pc, #348]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800637c:	4313      	orrs	r3, r2
 800637e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006380:	f7fc fda6 	bl	8002ed0 <HAL_GetTick>
 8006384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006386:	e00a      	b.n	800639e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006388:	f7fc fda2 	bl	8002ed0 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006396:	4293      	cmp	r3, r2
 8006398:	d901      	bls.n	800639e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e095      	b.n	80064ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800639e:	4b4e      	ldr	r3, [pc, #312]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 020c 	and.w	r2, r3, #12
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d1eb      	bne.n	8006388 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d023      	beq.n	8006404 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063c8:	4b43      	ldr	r3, [pc, #268]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	4a42      	ldr	r2, [pc, #264]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80063ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80063d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d007      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80063e0:	4b3d      	ldr	r3, [pc, #244]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80063e8:	4a3b      	ldr	r2, [pc, #236]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80063ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80063ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063f0:	4b39      	ldr	r3, [pc, #228]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	4936      	ldr	r1, [pc, #216]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	608b      	str	r3, [r1, #8]
 8006402:	e008      	b.n	8006416 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2b80      	cmp	r3, #128	@ 0x80
 8006408:	d105      	bne.n	8006416 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800640a:	4b33      	ldr	r3, [pc, #204]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	4a32      	ldr	r2, [pc, #200]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 8006410:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006414:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006416:	4b2f      	ldr	r3, [pc, #188]	@ (80064d4 <HAL_RCC_ClockConfig+0x260>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d21d      	bcs.n	8006460 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006424:	4b2b      	ldr	r3, [pc, #172]	@ (80064d4 <HAL_RCC_ClockConfig+0x260>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f023 020f 	bic.w	r2, r3, #15
 800642c:	4929      	ldr	r1, [pc, #164]	@ (80064d4 <HAL_RCC_ClockConfig+0x260>)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	4313      	orrs	r3, r2
 8006432:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006434:	f7fc fd4c 	bl	8002ed0 <HAL_GetTick>
 8006438:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800643a:	e00a      	b.n	8006452 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800643c:	f7fc fd48 	bl	8002ed0 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800644a:	4293      	cmp	r3, r2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e03b      	b.n	80064ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006452:	4b20      	ldr	r3, [pc, #128]	@ (80064d4 <HAL_RCC_ClockConfig+0x260>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d1ed      	bne.n	800643c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	d008      	beq.n	800647e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800646c:	4b1a      	ldr	r3, [pc, #104]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	4917      	ldr	r1, [pc, #92]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800647a:	4313      	orrs	r3, r2
 800647c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800648a:	4b13      	ldr	r3, [pc, #76]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	490f      	ldr	r1, [pc, #60]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800649a:	4313      	orrs	r3, r2
 800649c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800649e:	f000 f825 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 80064a2:	4602      	mov	r2, r0
 80064a4:	4b0c      	ldr	r3, [pc, #48]	@ (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	091b      	lsrs	r3, r3, #4
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	490c      	ldr	r1, [pc, #48]	@ (80064e0 <HAL_RCC_ClockConfig+0x26c>)
 80064b0:	5ccb      	ldrb	r3, [r1, r3]
 80064b2:	f003 031f 	and.w	r3, r3, #31
 80064b6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ba:	4a0a      	ldr	r2, [pc, #40]	@ (80064e4 <HAL_RCC_ClockConfig+0x270>)
 80064bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80064be:	4b0a      	ldr	r3, [pc, #40]	@ (80064e8 <HAL_RCC_ClockConfig+0x274>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fc fcb8 	bl	8002e38 <HAL_InitTick>
 80064c8:	4603      	mov	r3, r0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	40022000 	.word	0x40022000
 80064d8:	40021000 	.word	0x40021000
 80064dc:	04c4b400 	.word	0x04c4b400
 80064e0:	0800a228 	.word	0x0800a228
 80064e4:	20000000 	.word	0x20000000
 80064e8:	20000004 	.word	0x20000004

080064ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80064f2:	4b2c      	ldr	r3, [pc, #176]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d102      	bne.n	8006504 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064fe:	4b2a      	ldr	r3, [pc, #168]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	e047      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006504:	4b27      	ldr	r3, [pc, #156]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 030c 	and.w	r3, r3, #12
 800650c:	2b08      	cmp	r3, #8
 800650e:	d102      	bne.n	8006516 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006510:	4b26      	ldr	r3, [pc, #152]	@ (80065ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	e03e      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006516:	4b23      	ldr	r3, [pc, #140]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 030c 	and.w	r3, r3, #12
 800651e:	2b0c      	cmp	r3, #12
 8006520:	d136      	bne.n	8006590 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006522:	4b20      	ldr	r3, [pc, #128]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f003 0303 	and.w	r3, r3, #3
 800652a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800652c:	4b1d      	ldr	r3, [pc, #116]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	3301      	adds	r3, #1
 8006538:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b03      	cmp	r3, #3
 800653e:	d10c      	bne.n	800655a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006540:	4a1a      	ldr	r2, [pc, #104]	@ (80065ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	fbb2 f3f3 	udiv	r3, r2, r3
 8006548:	4a16      	ldr	r2, [pc, #88]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800654a:	68d2      	ldr	r2, [r2, #12]
 800654c:	0a12      	lsrs	r2, r2, #8
 800654e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006552:	fb02 f303 	mul.w	r3, r2, r3
 8006556:	617b      	str	r3, [r7, #20]
      break;
 8006558:	e00c      	b.n	8006574 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800655a:	4a13      	ldr	r2, [pc, #76]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006562:	4a10      	ldr	r2, [pc, #64]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006564:	68d2      	ldr	r2, [r2, #12]
 8006566:	0a12      	lsrs	r2, r2, #8
 8006568:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800656c:	fb02 f303 	mul.w	r3, r2, r3
 8006570:	617b      	str	r3, [r7, #20]
      break;
 8006572:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006574:	4b0b      	ldr	r3, [pc, #44]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	0e5b      	lsrs	r3, r3, #25
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	3301      	adds	r3, #1
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	fbb2 f3f3 	udiv	r3, r2, r3
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	e001      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006594:	693b      	ldr	r3, [r7, #16]
}
 8006596:	4618      	mov	r0, r3
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40021000 	.word	0x40021000
 80065a8:	00f42400 	.word	0x00f42400
 80065ac:	007a1200 	.word	0x007a1200

080065b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065b4:	4b03      	ldr	r3, [pc, #12]	@ (80065c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80065b6:	681b      	ldr	r3, [r3, #0]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	20000000 	.word	0x20000000

080065c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80065cc:	f7ff fff0 	bl	80065b0 <HAL_RCC_GetHCLKFreq>
 80065d0:	4602      	mov	r2, r0
 80065d2:	4b06      	ldr	r3, [pc, #24]	@ (80065ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	0a1b      	lsrs	r3, r3, #8
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	4904      	ldr	r1, [pc, #16]	@ (80065f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80065de:	5ccb      	ldrb	r3, [r1, r3]
 80065e0:	f003 031f 	and.w	r3, r3, #31
 80065e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40021000 	.word	0x40021000
 80065f0:	0800a238 	.word	0x0800a238

080065f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80065f8:	f7ff ffda 	bl	80065b0 <HAL_RCC_GetHCLKFreq>
 80065fc:	4602      	mov	r2, r0
 80065fe:	4b06      	ldr	r3, [pc, #24]	@ (8006618 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	0adb      	lsrs	r3, r3, #11
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	4904      	ldr	r1, [pc, #16]	@ (800661c <HAL_RCC_GetPCLK2Freq+0x28>)
 800660a:	5ccb      	ldrb	r3, [r1, r3]
 800660c:	f003 031f 	and.w	r3, r3, #31
 8006610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006614:	4618      	mov	r0, r3
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40021000 	.word	0x40021000
 800661c:	0800a238 	.word	0x0800a238

08006620 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006626:	4b1e      	ldr	r3, [pc, #120]	@ (80066a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006630:	4b1b      	ldr	r3, [pc, #108]	@ (80066a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	091b      	lsrs	r3, r3, #4
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	3301      	adds	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b03      	cmp	r3, #3
 8006642:	d10c      	bne.n	800665e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006644:	4a17      	ldr	r2, [pc, #92]	@ (80066a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	fbb2 f3f3 	udiv	r3, r2, r3
 800664c:	4a14      	ldr	r2, [pc, #80]	@ (80066a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800664e:	68d2      	ldr	r2, [r2, #12]
 8006650:	0a12      	lsrs	r2, r2, #8
 8006652:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006656:	fb02 f303 	mul.w	r3, r2, r3
 800665a:	617b      	str	r3, [r7, #20]
    break;
 800665c:	e00c      	b.n	8006678 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800665e:	4a12      	ldr	r2, [pc, #72]	@ (80066a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	fbb2 f3f3 	udiv	r3, r2, r3
 8006666:	4a0e      	ldr	r2, [pc, #56]	@ (80066a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006668:	68d2      	ldr	r2, [r2, #12]
 800666a:	0a12      	lsrs	r2, r2, #8
 800666c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006670:	fb02 f303 	mul.w	r3, r2, r3
 8006674:	617b      	str	r3, [r7, #20]
    break;
 8006676:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006678:	4b09      	ldr	r3, [pc, #36]	@ (80066a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	0e5b      	lsrs	r3, r3, #25
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	3301      	adds	r3, #1
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006690:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006692:	687b      	ldr	r3, [r7, #4]
}
 8006694:	4618      	mov	r0, r3
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	40021000 	.word	0x40021000
 80066a4:	007a1200 	.word	0x007a1200
 80066a8:	00f42400 	.word	0x00f42400

080066ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066b4:	2300      	movs	r3, #0
 80066b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066b8:	2300      	movs	r3, #0
 80066ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8098 	beq.w	80067fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066ca:	2300      	movs	r3, #0
 80066cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ce:	4b43      	ldr	r3, [pc, #268]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10d      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066da:	4b40      	ldr	r3, [pc, #256]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066de:	4a3f      	ldr	r2, [pc, #252]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80066e6:	4b3d      	ldr	r3, [pc, #244]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066f2:	2301      	movs	r3, #1
 80066f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066f6:	4b3a      	ldr	r3, [pc, #232]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a39      	ldr	r2, [pc, #228]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006700:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006702:	f7fc fbe5 	bl	8002ed0 <HAL_GetTick>
 8006706:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006708:	e009      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800670a:	f7fc fbe1 	bl	8002ed0 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d902      	bls.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	74fb      	strb	r3, [r7, #19]
        break;
 800671c:	e005      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800671e:	4b30      	ldr	r3, [pc, #192]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0ef      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800672a:	7cfb      	ldrb	r3, [r7, #19]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d159      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006730:	4b2a      	ldr	r3, [pc, #168]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800673a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01e      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	429a      	cmp	r2, r3
 800674a:	d019      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800674c:	4b23      	ldr	r3, [pc, #140]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006756:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006758:	4b20      	ldr	r3, [pc, #128]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800675a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800675e:	4a1f      	ldr	r2, [pc, #124]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006768:	4b1c      	ldr	r3, [pc, #112]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800676a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800676e:	4a1b      	ldr	r2, [pc, #108]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006778:	4a18      	ldr	r2, [pc, #96]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d016      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678a:	f7fc fba1 	bl	8002ed0 <HAL_GetTick>
 800678e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006790:	e00b      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006792:	f7fc fb9d 	bl	8002ed0 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d902      	bls.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	74fb      	strb	r3, [r7, #19]
            break;
 80067a8:	e006      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067aa:	4b0c      	ldr	r3, [pc, #48]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0ec      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80067b8:	7cfb      	ldrb	r3, [r7, #19]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10b      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067be:	4b07      	ldr	r3, [pc, #28]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067cc:	4903      	ldr	r1, [pc, #12]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80067d4:	e008      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067d6:	7cfb      	ldrb	r3, [r7, #19]
 80067d8:	74bb      	strb	r3, [r7, #18]
 80067da:	e005      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067dc:	40021000 	.word	0x40021000
 80067e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e4:	7cfb      	ldrb	r3, [r7, #19]
 80067e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067e8:	7c7b      	ldrb	r3, [r7, #17]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d105      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067ee:	4ba7      	ldr	r3, [pc, #668]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f2:	4aa6      	ldr	r2, [pc, #664]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006806:	4ba1      	ldr	r3, [pc, #644]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800680c:	f023 0203 	bic.w	r2, r3, #3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	499d      	ldr	r1, [pc, #628]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006828:	4b98      	ldr	r3, [pc, #608]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800682a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800682e:	f023 020c 	bic.w	r2, r3, #12
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	4995      	ldr	r1, [pc, #596]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800684a:	4b90      	ldr	r3, [pc, #576]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800684c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006850:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	498c      	ldr	r1, [pc, #560]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800685a:	4313      	orrs	r3, r2
 800685c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800686c:	4b87      	ldr	r3, [pc, #540]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006872:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	4984      	ldr	r1, [pc, #528]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0310 	and.w	r3, r3, #16
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800688e:	4b7f      	ldr	r3, [pc, #508]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006894:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	497b      	ldr	r1, [pc, #492]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068b0:	4b76      	ldr	r3, [pc, #472]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	4973      	ldr	r1, [pc, #460]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068d2:	4b6e      	ldr	r3, [pc, #440]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	496a      	ldr	r1, [pc, #424]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068f4:	4b65      	ldr	r3, [pc, #404]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	4962      	ldr	r1, [pc, #392]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006904:	4313      	orrs	r3, r2
 8006906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006916:	4b5d      	ldr	r3, [pc, #372]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800691c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006924:	4959      	ldr	r1, [pc, #356]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006926:	4313      	orrs	r3, r2
 8006928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006938:	4b54      	ldr	r3, [pc, #336]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800693a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800693e:	f023 0203 	bic.w	r2, r3, #3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006946:	4951      	ldr	r1, [pc, #324]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006948:	4313      	orrs	r3, r2
 800694a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800695a:	4b4c      	ldr	r3, [pc, #304]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800695c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006960:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006968:	4948      	ldr	r1, [pc, #288]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800696a:	4313      	orrs	r3, r2
 800696c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006978:	2b00      	cmp	r3, #0
 800697a:	d015      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800697c:	4b43      	ldr	r3, [pc, #268]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800697e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006982:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698a:	4940      	ldr	r1, [pc, #256]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800698c:	4313      	orrs	r3, r2
 800698e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006996:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800699a:	d105      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800699c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	4a3a      	ldr	r2, [pc, #232]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069a6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d015      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069b4:	4b35      	ldr	r3, [pc, #212]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069c2:	4932      	ldr	r1, [pc, #200]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069d2:	d105      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069d4:	4b2d      	ldr	r3, [pc, #180]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	4a2c      	ldr	r2, [pc, #176]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069de:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d015      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80069ec:	4b27      	ldr	r3, [pc, #156]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fa:	4924      	ldr	r1, [pc, #144]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a0a:	d105      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	4a1e      	ldr	r2, [pc, #120]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d015      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a24:	4b19      	ldr	r3, [pc, #100]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a32:	4916      	ldr	r1, [pc, #88]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a42:	d105      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a44:	4b11      	ldr	r3, [pc, #68]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	4a10      	ldr	r2, [pc, #64]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d019      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6a:	4908      	ldr	r1, [pc, #32]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a7a:	d109      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a7c:	4b03      	ldr	r3, [pc, #12]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	4a02      	ldr	r2, [pc, #8]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a86:	60d3      	str	r3, [r2, #12]
 8006a88:	e002      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006a8a:	bf00      	nop
 8006a8c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d015      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a9c:	4b29      	ldr	r3, [pc, #164]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aaa:	4926      	ldr	r1, [pc, #152]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aba:	d105      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006abc:	4b21      	ldr	r3, [pc, #132]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	4a20      	ldr	r2, [pc, #128]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ac6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d015      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ada:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ae2:	4918      	ldr	r1, [pc, #96]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006af2:	d105      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006af4:	4b13      	ldr	r3, [pc, #76]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	4a12      	ldr	r2, [pc, #72]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006afe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d015      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b1a:	490a      	ldr	r1, [pc, #40]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b2a:	d105      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b2c:	4b05      	ldr	r3, [pc, #20]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	4a04      	ldr	r2, [pc, #16]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b36:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006b38:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	40021000 	.word	0x40021000

08006b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e09d      	b.n	8006c96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d108      	bne.n	8006b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b6a:	d009      	beq.n	8006b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	61da      	str	r2, [r3, #28]
 8006b72:	e005      	b.n	8006b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fb fbfa 	bl	8002394 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bc0:	d902      	bls.n	8006bc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	e002      	b.n	8006bce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006bcc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006bd6:	d007      	beq.n	8006be8 <HAL_SPI_Init+0xa0>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006be0:	d002      	beq.n	8006be8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c2a:	ea42 0103 	orr.w	r1, r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c32:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	0c1b      	lsrs	r3, r3, #16
 8006c44:	f003 0204 	and.w	r2, r3, #4
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c64:	ea42 0103 	orr.w	r1, r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69da      	ldr	r2, [r3, #28]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e049      	b.n	8006d44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7fb fba9 	bl	800241c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2202      	movs	r2, #2
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4610      	mov	r0, r2
 8006cde:	f000 fd77 	bl	80077d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e049      	b.n	8006df2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f841 	bl	8006dfa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3304      	adds	r3, #4
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	f000 fd20 	bl	80077d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e049      	b.n	8006eb4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d106      	bne.n	8006e3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f841 	bl	8006ebc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f000 fcbf 	bl	80077d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e049      	b.n	8006f76 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d106      	bne.n	8006efc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7fb fc9a 	bl	8002830 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f000 fc5e 	bl	80077d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b086      	sub	sp, #24
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e097      	b.n	80070c2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d106      	bne.n	8006fac <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f88f 	bl	80070ca <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006fc2:	f023 0307 	bic.w	r3, r3, #7
 8006fc6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	f000 fbfc 	bl	80077d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007000:	f023 0303 	bic.w	r3, r3, #3
 8007004:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	021b      	lsls	r3, r3, #8
 8007010:	4313      	orrs	r3, r2
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	4313      	orrs	r3, r2
 8007016:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800701e:	f023 030c 	bic.w	r3, r3, #12
 8007022:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800702a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800702e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	021b      	lsls	r3, r3, #8
 800703a:	4313      	orrs	r3, r2
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	011a      	lsls	r2, r3, #4
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	031b      	lsls	r3, r3, #12
 800704e:	4313      	orrs	r3, r2
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800705c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007064:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	4313      	orrs	r3, r2
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3718      	adds	r7, #24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
	...

080070e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d101      	bne.n	80070fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80070fa:	2302      	movs	r3, #2
 80070fc:	e066      	b.n	80071cc <HAL_TIM_OC_ConfigChannel+0xec>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b14      	cmp	r3, #20
 800710a:	d857      	bhi.n	80071bc <HAL_TIM_OC_ConfigChannel+0xdc>
 800710c:	a201      	add	r2, pc, #4	@ (adr r2, 8007114 <HAL_TIM_OC_ConfigChannel+0x34>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007169 	.word	0x08007169
 8007118:	080071bd 	.word	0x080071bd
 800711c:	080071bd 	.word	0x080071bd
 8007120:	080071bd 	.word	0x080071bd
 8007124:	08007177 	.word	0x08007177
 8007128:	080071bd 	.word	0x080071bd
 800712c:	080071bd 	.word	0x080071bd
 8007130:	080071bd 	.word	0x080071bd
 8007134:	08007185 	.word	0x08007185
 8007138:	080071bd 	.word	0x080071bd
 800713c:	080071bd 	.word	0x080071bd
 8007140:	080071bd 	.word	0x080071bd
 8007144:	08007193 	.word	0x08007193
 8007148:	080071bd 	.word	0x080071bd
 800714c:	080071bd 	.word	0x080071bd
 8007150:	080071bd 	.word	0x080071bd
 8007154:	080071a1 	.word	0x080071a1
 8007158:	080071bd 	.word	0x080071bd
 800715c:	080071bd 	.word	0x080071bd
 8007160:	080071bd 	.word	0x080071bd
 8007164:	080071af 	.word	0x080071af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fbe2 	bl	8007938 <TIM_OC1_SetConfig>
      break;
 8007174:	e025      	b.n	80071c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fc75 	bl	8007a6c <TIM_OC2_SetConfig>
      break;
 8007182:	e01e      	b.n	80071c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68b9      	ldr	r1, [r7, #8]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fd02 	bl	8007b94 <TIM_OC3_SetConfig>
      break;
 8007190:	e017      	b.n	80071c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fd8d 	bl	8007cb8 <TIM_OC4_SetConfig>
      break;
 800719e:	e010      	b.n	80071c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68b9      	ldr	r1, [r7, #8]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fe1a 	bl	8007de0 <TIM_OC5_SetConfig>
      break;
 80071ac:	e009      	b.n	80071c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68b9      	ldr	r1, [r7, #8]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fe7d 	bl	8007eb4 <TIM_OC6_SetConfig>
      break;
 80071ba:	e002      	b.n	80071c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	75fb      	strb	r3, [r7, #23]
      break;
 80071c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d101      	bne.n	80071f2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80071ee:	2302      	movs	r3, #2
 80071f0:	e088      	b.n	8007304 <HAL_TIM_IC_ConfigChannel+0x130>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d11b      	bne.n	8007238 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007210:	f000 ff92 	bl	8008138 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 020c 	bic.w	r2, r2, #12
 8007222:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6999      	ldr	r1, [r3, #24]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	619a      	str	r2, [r3, #24]
 8007236:	e060      	b.n	80072fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b04      	cmp	r3, #4
 800723c:	d11c      	bne.n	8007278 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800724e:	f001 f816 	bl	800827e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699a      	ldr	r2, [r3, #24]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007260:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6999      	ldr	r1, [r3, #24]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	021a      	lsls	r2, r3, #8
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	619a      	str	r2, [r3, #24]
 8007276:	e040      	b.n	80072fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b08      	cmp	r3, #8
 800727c:	d11b      	bne.n	80072b6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800728e:	f001 f863 	bl	8008358 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69da      	ldr	r2, [r3, #28]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 020c 	bic.w	r2, r2, #12
 80072a0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69d9      	ldr	r1, [r3, #28]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	61da      	str	r2, [r3, #28]
 80072b4:	e021      	b.n	80072fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b0c      	cmp	r3, #12
 80072ba:	d11c      	bne.n	80072f6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80072cc:	f001 f880 	bl	80083d0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	69da      	ldr	r2, [r3, #28]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80072de:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	69d9      	ldr	r1, [r3, #28]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	021a      	lsls	r2, r3, #8
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	61da      	str	r2, [r3, #28]
 80072f4:	e001      	b.n	80072fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007322:	2b01      	cmp	r3, #1
 8007324:	d101      	bne.n	800732a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007326:	2302      	movs	r3, #2
 8007328:	e0ff      	b.n	800752a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b14      	cmp	r3, #20
 8007336:	f200 80f0 	bhi.w	800751a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800733a:	a201      	add	r2, pc, #4	@ (adr r2, 8007340 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	08007395 	.word	0x08007395
 8007344:	0800751b 	.word	0x0800751b
 8007348:	0800751b 	.word	0x0800751b
 800734c:	0800751b 	.word	0x0800751b
 8007350:	080073d5 	.word	0x080073d5
 8007354:	0800751b 	.word	0x0800751b
 8007358:	0800751b 	.word	0x0800751b
 800735c:	0800751b 	.word	0x0800751b
 8007360:	08007417 	.word	0x08007417
 8007364:	0800751b 	.word	0x0800751b
 8007368:	0800751b 	.word	0x0800751b
 800736c:	0800751b 	.word	0x0800751b
 8007370:	08007457 	.word	0x08007457
 8007374:	0800751b 	.word	0x0800751b
 8007378:	0800751b 	.word	0x0800751b
 800737c:	0800751b 	.word	0x0800751b
 8007380:	08007499 	.word	0x08007499
 8007384:	0800751b 	.word	0x0800751b
 8007388:	0800751b 	.word	0x0800751b
 800738c:	0800751b 	.word	0x0800751b
 8007390:	080074d9 	.word	0x080074d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 facc 	bl	8007938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 0208 	orr.w	r2, r2, #8
 80073ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	699a      	ldr	r2, [r3, #24]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 0204 	bic.w	r2, r2, #4
 80073be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6999      	ldr	r1, [r3, #24]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	691a      	ldr	r2, [r3, #16]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	619a      	str	r2, [r3, #24]
      break;
 80073d2:	e0a5      	b.n	8007520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68b9      	ldr	r1, [r7, #8]
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 fb46 	bl	8007a6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699a      	ldr	r2, [r3, #24]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	699a      	ldr	r2, [r3, #24]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6999      	ldr	r1, [r3, #24]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	021a      	lsls	r2, r3, #8
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	619a      	str	r2, [r3, #24]
      break;
 8007414:	e084      	b.n	8007520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68b9      	ldr	r1, [r7, #8]
 800741c:	4618      	mov	r0, r3
 800741e:	f000 fbb9 	bl	8007b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69da      	ldr	r2, [r3, #28]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f042 0208 	orr.w	r2, r2, #8
 8007430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	69da      	ldr	r2, [r3, #28]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0204 	bic.w	r2, r2, #4
 8007440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69d9      	ldr	r1, [r3, #28]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	691a      	ldr	r2, [r3, #16]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	61da      	str	r2, [r3, #28]
      break;
 8007454:	e064      	b.n	8007520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fc2b 	bl	8007cb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69da      	ldr	r2, [r3, #28]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	69da      	ldr	r2, [r3, #28]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69d9      	ldr	r1, [r3, #28]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	021a      	lsls	r2, r3, #8
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	61da      	str	r2, [r3, #28]
      break;
 8007496:	e043      	b.n	8007520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fc9e 	bl	8007de0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f042 0208 	orr.w	r2, r2, #8
 80074b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0204 	bic.w	r2, r2, #4
 80074c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	691a      	ldr	r2, [r3, #16]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80074d6:	e023      	b.n	8007520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68b9      	ldr	r1, [r7, #8]
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fce8 	bl	8007eb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007502:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	021a      	lsls	r2, r3, #8
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007518:	e002      	b.n	8007520 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	75fb      	strb	r3, [r7, #23]
      break;
 800751e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007528:	7dfb      	ldrb	r3, [r7, #23]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop

08007534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007548:	2b01      	cmp	r3, #1
 800754a:	d101      	bne.n	8007550 <HAL_TIM_ConfigClockSource+0x1c>
 800754c:	2302      	movs	r3, #2
 800754e:	e0ee      	b.n	800772e <HAL_TIM_ConfigClockSource+0x1fa>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800756e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800757a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a6b      	ldr	r2, [pc, #428]	@ (8007738 <HAL_TIM_ConfigClockSource+0x204>)
 800758a:	4293      	cmp	r3, r2
 800758c:	f000 80b9 	beq.w	8007702 <HAL_TIM_ConfigClockSource+0x1ce>
 8007590:	4a69      	ldr	r2, [pc, #420]	@ (8007738 <HAL_TIM_ConfigClockSource+0x204>)
 8007592:	4293      	cmp	r3, r2
 8007594:	f200 80be 	bhi.w	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 8007598:	4a68      	ldr	r2, [pc, #416]	@ (800773c <HAL_TIM_ConfigClockSource+0x208>)
 800759a:	4293      	cmp	r3, r2
 800759c:	f000 80b1 	beq.w	8007702 <HAL_TIM_ConfigClockSource+0x1ce>
 80075a0:	4a66      	ldr	r2, [pc, #408]	@ (800773c <HAL_TIM_ConfigClockSource+0x208>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	f200 80b6 	bhi.w	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 80075a8:	4a65      	ldr	r2, [pc, #404]	@ (8007740 <HAL_TIM_ConfigClockSource+0x20c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	f000 80a9 	beq.w	8007702 <HAL_TIM_ConfigClockSource+0x1ce>
 80075b0:	4a63      	ldr	r2, [pc, #396]	@ (8007740 <HAL_TIM_ConfigClockSource+0x20c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	f200 80ae 	bhi.w	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 80075b8:	4a62      	ldr	r2, [pc, #392]	@ (8007744 <HAL_TIM_ConfigClockSource+0x210>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	f000 80a1 	beq.w	8007702 <HAL_TIM_ConfigClockSource+0x1ce>
 80075c0:	4a60      	ldr	r2, [pc, #384]	@ (8007744 <HAL_TIM_ConfigClockSource+0x210>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	f200 80a6 	bhi.w	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 80075c8:	4a5f      	ldr	r2, [pc, #380]	@ (8007748 <HAL_TIM_ConfigClockSource+0x214>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	f000 8099 	beq.w	8007702 <HAL_TIM_ConfigClockSource+0x1ce>
 80075d0:	4a5d      	ldr	r2, [pc, #372]	@ (8007748 <HAL_TIM_ConfigClockSource+0x214>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	f200 809e 	bhi.w	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 80075d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80075dc:	f000 8091 	beq.w	8007702 <HAL_TIM_ConfigClockSource+0x1ce>
 80075e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80075e4:	f200 8096 	bhi.w	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 80075e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075ec:	f000 8089 	beq.w	8007702 <HAL_TIM_ConfigClockSource+0x1ce>
 80075f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075f4:	f200 808e 	bhi.w	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 80075f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075fc:	d03e      	beq.n	800767c <HAL_TIM_ConfigClockSource+0x148>
 80075fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007602:	f200 8087 	bhi.w	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 8007606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800760a:	f000 8086 	beq.w	800771a <HAL_TIM_ConfigClockSource+0x1e6>
 800760e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007612:	d87f      	bhi.n	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 8007614:	2b70      	cmp	r3, #112	@ 0x70
 8007616:	d01a      	beq.n	800764e <HAL_TIM_ConfigClockSource+0x11a>
 8007618:	2b70      	cmp	r3, #112	@ 0x70
 800761a:	d87b      	bhi.n	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 800761c:	2b60      	cmp	r3, #96	@ 0x60
 800761e:	d050      	beq.n	80076c2 <HAL_TIM_ConfigClockSource+0x18e>
 8007620:	2b60      	cmp	r3, #96	@ 0x60
 8007622:	d877      	bhi.n	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 8007624:	2b50      	cmp	r3, #80	@ 0x50
 8007626:	d03c      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x16e>
 8007628:	2b50      	cmp	r3, #80	@ 0x50
 800762a:	d873      	bhi.n	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 800762c:	2b40      	cmp	r3, #64	@ 0x40
 800762e:	d058      	beq.n	80076e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007630:	2b40      	cmp	r3, #64	@ 0x40
 8007632:	d86f      	bhi.n	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 8007634:	2b30      	cmp	r3, #48	@ 0x30
 8007636:	d064      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0x1ce>
 8007638:	2b30      	cmp	r3, #48	@ 0x30
 800763a:	d86b      	bhi.n	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 800763c:	2b20      	cmp	r3, #32
 800763e:	d060      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0x1ce>
 8007640:	2b20      	cmp	r3, #32
 8007642:	d867      	bhi.n	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d05c      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0x1ce>
 8007648:	2b10      	cmp	r3, #16
 800764a:	d05a      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0x1ce>
 800764c:	e062      	b.n	8007714 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800765e:	f000 ff11 	bl	8008484 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	609a      	str	r2, [r3, #8]
      break;
 800767a:	e04f      	b.n	800771c <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800768c:	f000 fefa 	bl	8008484 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800769e:	609a      	str	r2, [r3, #8]
      break;
 80076a0:	e03c      	b.n	800771c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ae:	461a      	mov	r2, r3
 80076b0:	f000 fdb6 	bl	8008220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2150      	movs	r1, #80	@ 0x50
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 fec5 	bl	800844a <TIM_ITRx_SetConfig>
      break;
 80076c0:	e02c      	b.n	800771c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076ce:	461a      	mov	r2, r3
 80076d0:	f000 fe12 	bl	80082f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2160      	movs	r1, #96	@ 0x60
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 feb5 	bl	800844a <TIM_ITRx_SetConfig>
      break;
 80076e0:	e01c      	b.n	800771c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ee:	461a      	mov	r2, r3
 80076f0:	f000 fd96 	bl	8008220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2140      	movs	r1, #64	@ 0x40
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fea5 	bl	800844a <TIM_ITRx_SetConfig>
      break;
 8007700:	e00c      	b.n	800771c <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4619      	mov	r1, r3
 800770c:	4610      	mov	r0, r2
 800770e:	f000 fe9c 	bl	800844a <TIM_ITRx_SetConfig>
      break;
 8007712:	e003      	b.n	800771c <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	73fb      	strb	r3, [r7, #15]
      break;
 8007718:	e000      	b.n	800771c <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800771a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	00100070 	.word	0x00100070
 800773c:	00100050 	.word	0x00100050
 8007740:	00100040 	.word	0x00100040
 8007744:	00100030 	.word	0x00100030
 8007748:	00100020 	.word	0x00100020

0800774c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007760:	2302      	movs	r3, #2
 8007762:	e031      	b.n	80077c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fc08 	bl	8007f8c <TIM_SlaveTimer_SetConfig>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d009      	beq.n	8007796 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e018      	b.n	80077c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80077b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a4c      	ldr	r2, [pc, #304]	@ (8007914 <TIM_Base_SetConfig+0x144>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d017      	beq.n	8007818 <TIM_Base_SetConfig+0x48>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ee:	d013      	beq.n	8007818 <TIM_Base_SetConfig+0x48>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a49      	ldr	r2, [pc, #292]	@ (8007918 <TIM_Base_SetConfig+0x148>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00f      	beq.n	8007818 <TIM_Base_SetConfig+0x48>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a48      	ldr	r2, [pc, #288]	@ (800791c <TIM_Base_SetConfig+0x14c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d00b      	beq.n	8007818 <TIM_Base_SetConfig+0x48>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a47      	ldr	r2, [pc, #284]	@ (8007920 <TIM_Base_SetConfig+0x150>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d007      	beq.n	8007818 <TIM_Base_SetConfig+0x48>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a46      	ldr	r2, [pc, #280]	@ (8007924 <TIM_Base_SetConfig+0x154>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d003      	beq.n	8007818 <TIM_Base_SetConfig+0x48>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a45      	ldr	r2, [pc, #276]	@ (8007928 <TIM_Base_SetConfig+0x158>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d108      	bne.n	800782a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800781e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4313      	orrs	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a39      	ldr	r2, [pc, #228]	@ (8007914 <TIM_Base_SetConfig+0x144>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d023      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007838:	d01f      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a36      	ldr	r2, [pc, #216]	@ (8007918 <TIM_Base_SetConfig+0x148>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d01b      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a35      	ldr	r2, [pc, #212]	@ (800791c <TIM_Base_SetConfig+0x14c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d017      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a34      	ldr	r2, [pc, #208]	@ (8007920 <TIM_Base_SetConfig+0x150>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d013      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a33      	ldr	r2, [pc, #204]	@ (8007924 <TIM_Base_SetConfig+0x154>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00f      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a33      	ldr	r2, [pc, #204]	@ (800792c <TIM_Base_SetConfig+0x15c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d00b      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a32      	ldr	r2, [pc, #200]	@ (8007930 <TIM_Base_SetConfig+0x160>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d007      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a31      	ldr	r2, [pc, #196]	@ (8007934 <TIM_Base_SetConfig+0x164>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d003      	beq.n	800787a <TIM_Base_SetConfig+0xaa>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a2c      	ldr	r2, [pc, #176]	@ (8007928 <TIM_Base_SetConfig+0x158>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d108      	bne.n	800788c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	4313      	orrs	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a18      	ldr	r2, [pc, #96]	@ (8007914 <TIM_Base_SetConfig+0x144>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d013      	beq.n	80078e0 <TIM_Base_SetConfig+0x110>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007924 <TIM_Base_SetConfig+0x154>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00f      	beq.n	80078e0 <TIM_Base_SetConfig+0x110>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a1a      	ldr	r2, [pc, #104]	@ (800792c <TIM_Base_SetConfig+0x15c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00b      	beq.n	80078e0 <TIM_Base_SetConfig+0x110>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a19      	ldr	r2, [pc, #100]	@ (8007930 <TIM_Base_SetConfig+0x160>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d007      	beq.n	80078e0 <TIM_Base_SetConfig+0x110>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a18      	ldr	r2, [pc, #96]	@ (8007934 <TIM_Base_SetConfig+0x164>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d003      	beq.n	80078e0 <TIM_Base_SetConfig+0x110>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a13      	ldr	r2, [pc, #76]	@ (8007928 <TIM_Base_SetConfig+0x158>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d103      	bne.n	80078e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	691a      	ldr	r2, [r3, #16]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d105      	bne.n	8007906 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f023 0201 	bic.w	r2, r3, #1
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	611a      	str	r2, [r3, #16]
  }
}
 8007906:	bf00      	nop
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	40012c00 	.word	0x40012c00
 8007918:	40000400 	.word	0x40000400
 800791c:	40000800 	.word	0x40000800
 8007920:	40000c00 	.word	0x40000c00
 8007924:	40013400 	.word	0x40013400
 8007928:	40015000 	.word	0x40015000
 800792c:	40014000 	.word	0x40014000
 8007930:	40014400 	.word	0x40014400
 8007934:	40014800 	.word	0x40014800

08007938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	f023 0201 	bic.w	r2, r3, #1
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800796a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0303 	bic.w	r3, r3, #3
 8007972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f023 0302 	bic.w	r3, r3, #2
 8007984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a30      	ldr	r2, [pc, #192]	@ (8007a54 <TIM_OC1_SetConfig+0x11c>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d013      	beq.n	80079c0 <TIM_OC1_SetConfig+0x88>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a2f      	ldr	r2, [pc, #188]	@ (8007a58 <TIM_OC1_SetConfig+0x120>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d00f      	beq.n	80079c0 <TIM_OC1_SetConfig+0x88>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a2e      	ldr	r2, [pc, #184]	@ (8007a5c <TIM_OC1_SetConfig+0x124>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d00b      	beq.n	80079c0 <TIM_OC1_SetConfig+0x88>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a2d      	ldr	r2, [pc, #180]	@ (8007a60 <TIM_OC1_SetConfig+0x128>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d007      	beq.n	80079c0 <TIM_OC1_SetConfig+0x88>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a2c      	ldr	r2, [pc, #176]	@ (8007a64 <TIM_OC1_SetConfig+0x12c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d003      	beq.n	80079c0 <TIM_OC1_SetConfig+0x88>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a2b      	ldr	r2, [pc, #172]	@ (8007a68 <TIM_OC1_SetConfig+0x130>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d10c      	bne.n	80079da <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f023 0308 	bic.w	r3, r3, #8
 80079c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f023 0304 	bic.w	r3, r3, #4
 80079d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007a54 <TIM_OC1_SetConfig+0x11c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d013      	beq.n	8007a0a <TIM_OC1_SetConfig+0xd2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007a58 <TIM_OC1_SetConfig+0x120>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d00f      	beq.n	8007a0a <TIM_OC1_SetConfig+0xd2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a1b      	ldr	r2, [pc, #108]	@ (8007a5c <TIM_OC1_SetConfig+0x124>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00b      	beq.n	8007a0a <TIM_OC1_SetConfig+0xd2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007a60 <TIM_OC1_SetConfig+0x128>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d007      	beq.n	8007a0a <TIM_OC1_SetConfig+0xd2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a19      	ldr	r2, [pc, #100]	@ (8007a64 <TIM_OC1_SetConfig+0x12c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d003      	beq.n	8007a0a <TIM_OC1_SetConfig+0xd2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a18      	ldr	r2, [pc, #96]	@ (8007a68 <TIM_OC1_SetConfig+0x130>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d111      	bne.n	8007a2e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	621a      	str	r2, [r3, #32]
}
 8007a48:	bf00      	nop
 8007a4a:	371c      	adds	r7, #28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	40012c00 	.word	0x40012c00
 8007a58:	40013400 	.word	0x40013400
 8007a5c:	40014000 	.word	0x40014000
 8007a60:	40014400 	.word	0x40014400
 8007a64:	40014800 	.word	0x40014800
 8007a68:	40015000 	.word	0x40015000

08007a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	f023 0210 	bic.w	r2, r3, #16
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f023 0320 	bic.w	r3, r3, #32
 8007aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a2c      	ldr	r2, [pc, #176]	@ (8007b7c <TIM_OC2_SetConfig+0x110>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d007      	beq.n	8007ae0 <TIM_OC2_SetConfig+0x74>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8007b80 <TIM_OC2_SetConfig+0x114>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d003      	beq.n	8007ae0 <TIM_OC2_SetConfig+0x74>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a2a      	ldr	r2, [pc, #168]	@ (8007b84 <TIM_OC2_SetConfig+0x118>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d10d      	bne.n	8007afc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007afa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a1f      	ldr	r2, [pc, #124]	@ (8007b7c <TIM_OC2_SetConfig+0x110>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d013      	beq.n	8007b2c <TIM_OC2_SetConfig+0xc0>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a1e      	ldr	r2, [pc, #120]	@ (8007b80 <TIM_OC2_SetConfig+0x114>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00f      	beq.n	8007b2c <TIM_OC2_SetConfig+0xc0>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007b88 <TIM_OC2_SetConfig+0x11c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d00b      	beq.n	8007b2c <TIM_OC2_SetConfig+0xc0>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a1d      	ldr	r2, [pc, #116]	@ (8007b8c <TIM_OC2_SetConfig+0x120>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d007      	beq.n	8007b2c <TIM_OC2_SetConfig+0xc0>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8007b90 <TIM_OC2_SetConfig+0x124>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d003      	beq.n	8007b2c <TIM_OC2_SetConfig+0xc0>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a17      	ldr	r2, [pc, #92]	@ (8007b84 <TIM_OC2_SetConfig+0x118>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d113      	bne.n	8007b54 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	621a      	str	r2, [r3, #32]
}
 8007b6e:	bf00      	nop
 8007b70:	371c      	adds	r7, #28
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	40012c00 	.word	0x40012c00
 8007b80:	40013400 	.word	0x40013400
 8007b84:	40015000 	.word	0x40015000
 8007b88:	40014000 	.word	0x40014000
 8007b8c:	40014400 	.word	0x40014400
 8007b90:	40014800 	.word	0x40014800

08007b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 0303 	bic.w	r3, r3, #3
 8007bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8007ca0 <TIM_OC3_SetConfig+0x10c>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d007      	beq.n	8007c06 <TIM_OC3_SetConfig+0x72>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8007ca4 <TIM_OC3_SetConfig+0x110>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d003      	beq.n	8007c06 <TIM_OC3_SetConfig+0x72>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a29      	ldr	r2, [pc, #164]	@ (8007ca8 <TIM_OC3_SetConfig+0x114>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d10d      	bne.n	8007c22 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	021b      	lsls	r3, r3, #8
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a1e      	ldr	r2, [pc, #120]	@ (8007ca0 <TIM_OC3_SetConfig+0x10c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d013      	beq.n	8007c52 <TIM_OC3_SetConfig+0xbe>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ca4 <TIM_OC3_SetConfig+0x110>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d00f      	beq.n	8007c52 <TIM_OC3_SetConfig+0xbe>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a1d      	ldr	r2, [pc, #116]	@ (8007cac <TIM_OC3_SetConfig+0x118>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00b      	beq.n	8007c52 <TIM_OC3_SetConfig+0xbe>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8007cb0 <TIM_OC3_SetConfig+0x11c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d007      	beq.n	8007c52 <TIM_OC3_SetConfig+0xbe>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a1b      	ldr	r2, [pc, #108]	@ (8007cb4 <TIM_OC3_SetConfig+0x120>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d003      	beq.n	8007c52 <TIM_OC3_SetConfig+0xbe>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a16      	ldr	r2, [pc, #88]	@ (8007ca8 <TIM_OC3_SetConfig+0x114>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d113      	bne.n	8007c7a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	011b      	lsls	r3, r3, #4
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	685a      	ldr	r2, [r3, #4]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	621a      	str	r2, [r3, #32]
}
 8007c94:	bf00      	nop
 8007c96:	371c      	adds	r7, #28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	40012c00 	.word	0x40012c00
 8007ca4:	40013400 	.word	0x40013400
 8007ca8:	40015000 	.word	0x40015000
 8007cac:	40014000 	.word	0x40014000
 8007cb0:	40014400 	.word	0x40014400
 8007cb4:	40014800 	.word	0x40014800

08007cb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a1b      	ldr	r3, [r3, #32]
 8007ccc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	021b      	lsls	r3, r3, #8
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	031b      	lsls	r3, r3, #12
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a2c      	ldr	r2, [pc, #176]	@ (8007dc8 <TIM_OC4_SetConfig+0x110>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d007      	beq.n	8007d2c <TIM_OC4_SetConfig+0x74>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8007dcc <TIM_OC4_SetConfig+0x114>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d003      	beq.n	8007d2c <TIM_OC4_SetConfig+0x74>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a2a      	ldr	r2, [pc, #168]	@ (8007dd0 <TIM_OC4_SetConfig+0x118>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d10d      	bne.n	8007d48 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	031b      	lsls	r3, r3, #12
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007dc8 <TIM_OC4_SetConfig+0x110>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d013      	beq.n	8007d78 <TIM_OC4_SetConfig+0xc0>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a1e      	ldr	r2, [pc, #120]	@ (8007dcc <TIM_OC4_SetConfig+0x114>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d00f      	beq.n	8007d78 <TIM_OC4_SetConfig+0xc0>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8007dd4 <TIM_OC4_SetConfig+0x11c>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d00b      	beq.n	8007d78 <TIM_OC4_SetConfig+0xc0>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a1d      	ldr	r2, [pc, #116]	@ (8007dd8 <TIM_OC4_SetConfig+0x120>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d007      	beq.n	8007d78 <TIM_OC4_SetConfig+0xc0>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8007ddc <TIM_OC4_SetConfig+0x124>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d003      	beq.n	8007d78 <TIM_OC4_SetConfig+0xc0>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a17      	ldr	r2, [pc, #92]	@ (8007dd0 <TIM_OC4_SetConfig+0x118>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d113      	bne.n	8007da0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d7e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d86:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	019b      	lsls	r3, r3, #6
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	019b      	lsls	r3, r3, #6
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	621a      	str	r2, [r3, #32]
}
 8007dba:	bf00      	nop
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	40012c00 	.word	0x40012c00
 8007dcc:	40013400 	.word	0x40013400
 8007dd0:	40015000 	.word	0x40015000
 8007dd4:	40014000 	.word	0x40014000
 8007dd8:	40014400 	.word	0x40014400
 8007ddc:	40014800 	.word	0x40014800

08007de0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	041b      	lsls	r3, r3, #16
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a19      	ldr	r2, [pc, #100]	@ (8007e9c <TIM_OC5_SetConfig+0xbc>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d013      	beq.n	8007e62 <TIM_OC5_SetConfig+0x82>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a18      	ldr	r2, [pc, #96]	@ (8007ea0 <TIM_OC5_SetConfig+0xc0>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00f      	beq.n	8007e62 <TIM_OC5_SetConfig+0x82>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a17      	ldr	r2, [pc, #92]	@ (8007ea4 <TIM_OC5_SetConfig+0xc4>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00b      	beq.n	8007e62 <TIM_OC5_SetConfig+0x82>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a16      	ldr	r2, [pc, #88]	@ (8007ea8 <TIM_OC5_SetConfig+0xc8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d007      	beq.n	8007e62 <TIM_OC5_SetConfig+0x82>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a15      	ldr	r2, [pc, #84]	@ (8007eac <TIM_OC5_SetConfig+0xcc>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d003      	beq.n	8007e62 <TIM_OC5_SetConfig+0x82>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a14      	ldr	r2, [pc, #80]	@ (8007eb0 <TIM_OC5_SetConfig+0xd0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d109      	bne.n	8007e76 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	021b      	lsls	r3, r3, #8
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	621a      	str	r2, [r3, #32]
}
 8007e90:	bf00      	nop
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	40012c00 	.word	0x40012c00
 8007ea0:	40013400 	.word	0x40013400
 8007ea4:	40014000 	.word	0x40014000
 8007ea8:	40014400 	.word	0x40014400
 8007eac:	40014800 	.word	0x40014800
 8007eb0:	40015000 	.word	0x40015000

08007eb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	021b      	lsls	r3, r3, #8
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	051b      	lsls	r3, r3, #20
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8007f74 <TIM_OC6_SetConfig+0xc0>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d013      	beq.n	8007f38 <TIM_OC6_SetConfig+0x84>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a19      	ldr	r2, [pc, #100]	@ (8007f78 <TIM_OC6_SetConfig+0xc4>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d00f      	beq.n	8007f38 <TIM_OC6_SetConfig+0x84>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a18      	ldr	r2, [pc, #96]	@ (8007f7c <TIM_OC6_SetConfig+0xc8>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00b      	beq.n	8007f38 <TIM_OC6_SetConfig+0x84>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a17      	ldr	r2, [pc, #92]	@ (8007f80 <TIM_OC6_SetConfig+0xcc>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d007      	beq.n	8007f38 <TIM_OC6_SetConfig+0x84>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a16      	ldr	r2, [pc, #88]	@ (8007f84 <TIM_OC6_SetConfig+0xd0>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d003      	beq.n	8007f38 <TIM_OC6_SetConfig+0x84>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a15      	ldr	r2, [pc, #84]	@ (8007f88 <TIM_OC6_SetConfig+0xd4>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d109      	bne.n	8007f4c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	029b      	lsls	r3, r3, #10
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	621a      	str	r2, [r3, #32]
}
 8007f66:	bf00      	nop
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	40012c00 	.word	0x40012c00
 8007f78:	40013400 	.word	0x40013400
 8007f7c:	40014000 	.word	0x40014000
 8007f80:	40014400 	.word	0x40014400
 8007f84:	40014800 	.word	0x40014800
 8007f88:	40015000 	.word	0x40015000

08007f8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fbe:	f023 0307 	bic.w	r3, r3, #7
 8007fc2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	4a52      	ldr	r2, [pc, #328]	@ (8008124 <TIM_SlaveTimer_SetConfig+0x198>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	f000 809a 	beq.w	8008116 <TIM_SlaveTimer_SetConfig+0x18a>
 8007fe2:	4a50      	ldr	r2, [pc, #320]	@ (8008124 <TIM_SlaveTimer_SetConfig+0x198>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	f200 8093 	bhi.w	8008110 <TIM_SlaveTimer_SetConfig+0x184>
 8007fea:	4a4f      	ldr	r2, [pc, #316]	@ (8008128 <TIM_SlaveTimer_SetConfig+0x19c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	f000 8092 	beq.w	8008116 <TIM_SlaveTimer_SetConfig+0x18a>
 8007ff2:	4a4d      	ldr	r2, [pc, #308]	@ (8008128 <TIM_SlaveTimer_SetConfig+0x19c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	f200 808b 	bhi.w	8008110 <TIM_SlaveTimer_SetConfig+0x184>
 8007ffa:	4a4c      	ldr	r2, [pc, #304]	@ (800812c <TIM_SlaveTimer_SetConfig+0x1a0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	f000 808a 	beq.w	8008116 <TIM_SlaveTimer_SetConfig+0x18a>
 8008002:	4a4a      	ldr	r2, [pc, #296]	@ (800812c <TIM_SlaveTimer_SetConfig+0x1a0>)
 8008004:	4293      	cmp	r3, r2
 8008006:	f200 8083 	bhi.w	8008110 <TIM_SlaveTimer_SetConfig+0x184>
 800800a:	4a49      	ldr	r2, [pc, #292]	@ (8008130 <TIM_SlaveTimer_SetConfig+0x1a4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	f000 8082 	beq.w	8008116 <TIM_SlaveTimer_SetConfig+0x18a>
 8008012:	4a47      	ldr	r2, [pc, #284]	@ (8008130 <TIM_SlaveTimer_SetConfig+0x1a4>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d87b      	bhi.n	8008110 <TIM_SlaveTimer_SetConfig+0x184>
 8008018:	4a46      	ldr	r2, [pc, #280]	@ (8008134 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d07b      	beq.n	8008116 <TIM_SlaveTimer_SetConfig+0x18a>
 800801e:	4a45      	ldr	r2, [pc, #276]	@ (8008134 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d875      	bhi.n	8008110 <TIM_SlaveTimer_SetConfig+0x184>
 8008024:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008028:	d075      	beq.n	8008116 <TIM_SlaveTimer_SetConfig+0x18a>
 800802a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800802e:	d86f      	bhi.n	8008110 <TIM_SlaveTimer_SetConfig+0x184>
 8008030:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008034:	d06f      	beq.n	8008116 <TIM_SlaveTimer_SetConfig+0x18a>
 8008036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800803a:	d869      	bhi.n	8008110 <TIM_SlaveTimer_SetConfig+0x184>
 800803c:	2b70      	cmp	r3, #112	@ 0x70
 800803e:	d01a      	beq.n	8008076 <TIM_SlaveTimer_SetConfig+0xea>
 8008040:	2b70      	cmp	r3, #112	@ 0x70
 8008042:	d865      	bhi.n	8008110 <TIM_SlaveTimer_SetConfig+0x184>
 8008044:	2b60      	cmp	r3, #96	@ 0x60
 8008046:	d059      	beq.n	80080fc <TIM_SlaveTimer_SetConfig+0x170>
 8008048:	2b60      	cmp	r3, #96	@ 0x60
 800804a:	d861      	bhi.n	8008110 <TIM_SlaveTimer_SetConfig+0x184>
 800804c:	2b50      	cmp	r3, #80	@ 0x50
 800804e:	d04b      	beq.n	80080e8 <TIM_SlaveTimer_SetConfig+0x15c>
 8008050:	2b50      	cmp	r3, #80	@ 0x50
 8008052:	d85d      	bhi.n	8008110 <TIM_SlaveTimer_SetConfig+0x184>
 8008054:	2b40      	cmp	r3, #64	@ 0x40
 8008056:	d019      	beq.n	800808c <TIM_SlaveTimer_SetConfig+0x100>
 8008058:	2b40      	cmp	r3, #64	@ 0x40
 800805a:	d859      	bhi.n	8008110 <TIM_SlaveTimer_SetConfig+0x184>
 800805c:	2b30      	cmp	r3, #48	@ 0x30
 800805e:	d05a      	beq.n	8008116 <TIM_SlaveTimer_SetConfig+0x18a>
 8008060:	2b30      	cmp	r3, #48	@ 0x30
 8008062:	d855      	bhi.n	8008110 <TIM_SlaveTimer_SetConfig+0x184>
 8008064:	2b20      	cmp	r3, #32
 8008066:	d056      	beq.n	8008116 <TIM_SlaveTimer_SetConfig+0x18a>
 8008068:	2b20      	cmp	r3, #32
 800806a:	d851      	bhi.n	8008110 <TIM_SlaveTimer_SetConfig+0x184>
 800806c:	2b00      	cmp	r3, #0
 800806e:	d052      	beq.n	8008116 <TIM_SlaveTimer_SetConfig+0x18a>
 8008070:	2b10      	cmp	r3, #16
 8008072:	d050      	beq.n	8008116 <TIM_SlaveTimer_SetConfig+0x18a>
 8008074:	e04c      	b.n	8008110 <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008086:	f000 f9fd 	bl	8008484 <TIM_ETR_SetConfig>
      break;
 800808a:	e045      	b.n	8008118 <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b05      	cmp	r3, #5
 8008092:	d004      	beq.n	800809e <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008098:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800809c:	d101      	bne.n	80080a2 <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e03b      	b.n	800811a <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6a1a      	ldr	r2, [r3, #32]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0201 	bic.w	r2, r2, #1
 80080b8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080c8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	621a      	str	r2, [r3, #32]
      break;
 80080e6:	e017      	b.n	8008118 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080f4:	461a      	mov	r2, r3
 80080f6:	f000 f893 	bl	8008220 <TIM_TI1_ConfigInputStage>
      break;
 80080fa:	e00d      	b.n	8008118 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008108:	461a      	mov	r2, r3
 800810a:	f000 f8f5 	bl	80082f8 <TIM_TI2_ConfigInputStage>
      break;
 800810e:	e003      	b.n	8008118 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	75fb      	strb	r3, [r7, #23]
      break;
 8008114:	e000      	b.n	8008118 <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 8008116:	bf00      	nop
  }

  return status;
 8008118:	7dfb      	ldrb	r3, [r7, #23]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3718      	adds	r7, #24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	00100070 	.word	0x00100070
 8008128:	00100050 	.word	0x00100050
 800812c:	00100040 	.word	0x00100040
 8008130:	00100030 	.word	0x00100030
 8008134:	00100020 	.word	0x00100020

08008138 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	f023 0201 	bic.w	r2, r3, #1
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4a28      	ldr	r2, [pc, #160]	@ (8008204 <TIM_TI1_SetConfig+0xcc>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d01b      	beq.n	800819e <TIM_TI1_SetConfig+0x66>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800816c:	d017      	beq.n	800819e <TIM_TI1_SetConfig+0x66>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	4a25      	ldr	r2, [pc, #148]	@ (8008208 <TIM_TI1_SetConfig+0xd0>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d013      	beq.n	800819e <TIM_TI1_SetConfig+0x66>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4a24      	ldr	r2, [pc, #144]	@ (800820c <TIM_TI1_SetConfig+0xd4>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d00f      	beq.n	800819e <TIM_TI1_SetConfig+0x66>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4a23      	ldr	r2, [pc, #140]	@ (8008210 <TIM_TI1_SetConfig+0xd8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d00b      	beq.n	800819e <TIM_TI1_SetConfig+0x66>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4a22      	ldr	r2, [pc, #136]	@ (8008214 <TIM_TI1_SetConfig+0xdc>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d007      	beq.n	800819e <TIM_TI1_SetConfig+0x66>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	4a21      	ldr	r2, [pc, #132]	@ (8008218 <TIM_TI1_SetConfig+0xe0>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d003      	beq.n	800819e <TIM_TI1_SetConfig+0x66>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4a20      	ldr	r2, [pc, #128]	@ (800821c <TIM_TI1_SetConfig+0xe4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d101      	bne.n	80081a2 <TIM_TI1_SetConfig+0x6a>
 800819e:	2301      	movs	r3, #1
 80081a0:	e000      	b.n	80081a4 <TIM_TI1_SetConfig+0x6c>
 80081a2:	2300      	movs	r3, #0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d008      	beq.n	80081ba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f023 0303 	bic.w	r3, r3, #3
 80081ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	e003      	b.n	80081c2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f043 0301 	orr.w	r3, r3, #1
 80081c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	011b      	lsls	r3, r3, #4
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f023 030a 	bic.w	r3, r3, #10
 80081dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f003 030a 	and.w	r3, r3, #10
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	621a      	str	r2, [r3, #32]
}
 80081f6:	bf00      	nop
 80081f8:	371c      	adds	r7, #28
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	40012c00 	.word	0x40012c00
 8008208:	40000400 	.word	0x40000400
 800820c:	40000800 	.word	0x40000800
 8008210:	40000c00 	.word	0x40000c00
 8008214:	40013400 	.word	0x40013400
 8008218:	40014000 	.word	0x40014000
 800821c:	40015000 	.word	0x40015000

08008220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008220:	b480      	push	{r7}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	f023 0201 	bic.w	r2, r3, #1
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800824a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	4313      	orrs	r3, r2
 8008254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f023 030a 	bic.w	r3, r3, #10
 800825c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	4313      	orrs	r3, r2
 8008264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	621a      	str	r2, [r3, #32]
}
 8008272:	bf00      	nop
 8008274:	371c      	adds	r7, #28
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800827e:	b480      	push	{r7}
 8008280:	b087      	sub	sp, #28
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	607a      	str	r2, [r7, #4]
 800828a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	f023 0210 	bic.w	r2, r3, #16
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	031b      	lsls	r3, r3, #12
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082d0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4313      	orrs	r3, r2
 80082de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	621a      	str	r2, [r3, #32]
}
 80082ec:	bf00      	nop
 80082ee:	371c      	adds	r7, #28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6a1b      	ldr	r3, [r3, #32]
 8008308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	f023 0210 	bic.w	r2, r3, #16
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	031b      	lsls	r3, r3, #12
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	4313      	orrs	r3, r2
 800832c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008334:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	011b      	lsls	r3, r3, #4
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	4313      	orrs	r3, r2
 800833e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	621a      	str	r2, [r3, #32]
}
 800834c:	bf00      	nop
 800834e:	371c      	adds	r7, #28
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6a1b      	ldr	r3, [r3, #32]
 8008370:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f023 0303 	bic.w	r3, r3, #3
 8008384:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4313      	orrs	r3, r2
 800838c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008394:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	011b      	lsls	r3, r3, #4
 800839a:	b2db      	uxtb	r3, r3
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	4313      	orrs	r3, r2
 80083a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80083a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	621a      	str	r2, [r3, #32]
}
 80083c4:	bf00      	nop
 80083c6:	371c      	adds	r7, #28
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
 80083dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6a1b      	ldr	r3, [r3, #32]
 80083e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	021b      	lsls	r3, r3, #8
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	4313      	orrs	r3, r2
 8008406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800840e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	031b      	lsls	r3, r3, #12
 8008414:	b29b      	uxth	r3, r3
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	4313      	orrs	r3, r2
 800841a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008422:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	031b      	lsls	r3, r3, #12
 8008428:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	4313      	orrs	r3, r2
 8008430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	621a      	str	r2, [r3, #32]
}
 800843e:	bf00      	nop
 8008440:	371c      	adds	r7, #28
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800844a:	b480      	push	{r7}
 800844c:	b085      	sub	sp, #20
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008460:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4313      	orrs	r3, r2
 800846c:	f043 0307 	orr.w	r3, r3, #7
 8008470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	609a      	str	r2, [r3, #8]
}
 8008478:	bf00      	nop
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800849e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	021a      	lsls	r2, r3, #8
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	431a      	orrs	r2, r3
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	609a      	str	r2, [r3, #8]
}
 80084b8:	bf00      	nop
 80084ba:	371c      	adds	r7, #28
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08a      	sub	sp, #40	@ 0x28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e0a0      	b.n	800861a <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d106      	bne.n	80084f2 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f898 	bl	8008622 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2202      	movs	r2, #2
 80084f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3304      	adds	r3, #4
 8008502:	4619      	mov	r1, r3
 8008504:	4610      	mov	r0, r2
 8008506:	f7ff f963 	bl	80077d0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6818      	ldr	r0, [r3, #0]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	6819      	ldr	r1, [r3, #0]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	2203      	movs	r2, #3
 8008518:	f7ff fe0e 	bl	8008138 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	699a      	ldr	r2, [r3, #24]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f022 020c 	bic.w	r2, r2, #12
 800852a:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6999      	ldr	r1, [r3, #24]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	430a      	orrs	r2, r1
 800853c:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800854c:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	6812      	ldr	r2, [r2, #0]
 8008558:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800855c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008560:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008570:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	6812      	ldr	r2, [r2, #0]
 800857c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008580:	f023 0307 	bic.w	r3, r3, #7
 8008584:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	689a      	ldr	r2, [r3, #8]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f042 0204 	orr.w	r2, r2, #4
 8008594:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8008596:	2300      	movs	r3, #0
 8008598:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800859a:	2300      	movs	r3, #0
 800859c:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800859e:	2370      	movs	r3, #112	@ 0x70
 80085a0:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80085a2:	2300      	movs	r3, #0
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80085a6:	2300      	movs	r3, #0
 80085a8:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80085aa:	2300      	movs	r3, #0
 80085ac:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f107 020c 	add.w	r2, r7, #12
 80085bc:	4611      	mov	r1, r2
 80085be:	4618      	mov	r0, r3
 80085c0:	f7ff fa54 	bl	8007a6c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6812      	ldr	r2, [r2, #0]
 80085ce:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80085d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d6:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80085e6:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3728      	adds	r7, #40	@ 0x28
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800862a:	bf00      	nop
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008648:	2b01      	cmp	r3, #1
 800864a:	d101      	bne.n	8008650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800864c:	2302      	movs	r3, #2
 800864e:	e074      	b.n	800873a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a34      	ldr	r2, [pc, #208]	@ (8008748 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d009      	beq.n	800868e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a33      	ldr	r2, [pc, #204]	@ (800874c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d004      	beq.n	800868e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a31      	ldr	r2, [pc, #196]	@ (8008750 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d108      	bne.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008694:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4313      	orrs	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80086a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a21      	ldr	r2, [pc, #132]	@ (8008748 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d022      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d0:	d01d      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a1f      	ldr	r2, [pc, #124]	@ (8008754 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d018      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008758 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d013      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a1c      	ldr	r2, [pc, #112]	@ (800875c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00e      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a15      	ldr	r2, [pc, #84]	@ (800874c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d009      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a18      	ldr	r2, [pc, #96]	@ (8008760 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d004      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a11      	ldr	r2, [pc, #68]	@ (8008750 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d10c      	bne.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	4313      	orrs	r3, r2
 800871e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	40012c00 	.word	0x40012c00
 800874c:	40013400 	.word	0x40013400
 8008750:	40015000 	.word	0x40015000
 8008754:	40000400 	.word	0x40000400
 8008758:	40000800 	.word	0x40000800
 800875c:	40000c00 	.word	0x40000c00
 8008760:	40014000 	.word	0x40014000

08008764 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008778:	2b01      	cmp	r3, #1
 800877a:	d101      	bne.n	8008780 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800877c:	2302      	movs	r3, #2
 800877e:	e078      	b.n	8008872 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	041b      	lsls	r3, r3, #16
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	4313      	orrs	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a1c      	ldr	r2, [pc, #112]	@ (8008880 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d009      	beq.n	8008826 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a1b      	ldr	r2, [pc, #108]	@ (8008884 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d004      	beq.n	8008826 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a19      	ldr	r2, [pc, #100]	@ (8008888 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d11c      	bne.n	8008860 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008830:	051b      	lsls	r3, r3, #20
 8008832:	4313      	orrs	r3, r2
 8008834:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884e:	4313      	orrs	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885c:	4313      	orrs	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40012c00 	.word	0x40012c00
 8008884:	40013400 	.word	0x40013400
 8008888:	40015000 	.word	0x40015000

0800888c <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 800888c:	b480      	push	{r7}
 800888e:	b08b      	sub	sp, #44	@ 0x2c
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d101      	bne.n	80088ac <HAL_TIMEx_ConfigBreakInput+0x20>
 80088a8:	2302      	movs	r3, #2
 80088aa:	e10b      	b.n	8008ac4 <HAL_TIMEx_ConfigBreakInput+0x238>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b80      	cmp	r3, #128	@ 0x80
 80088ba:	f000 8096 	beq.w	80089ea <HAL_TIMEx_ConfigBreakInput+0x15e>
 80088be:	2b80      	cmp	r3, #128	@ 0x80
 80088c0:	f200 809c 	bhi.w	80089fc <HAL_TIMEx_ConfigBreakInput+0x170>
 80088c4:	2b20      	cmp	r3, #32
 80088c6:	d849      	bhi.n	800895c <HAL_TIMEx_ConfigBreakInput+0xd0>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 8097 	beq.w	80089fc <HAL_TIMEx_ConfigBreakInput+0x170>
 80088ce:	3b01      	subs	r3, #1
 80088d0:	2b1f      	cmp	r3, #31
 80088d2:	f200 8093 	bhi.w	80089fc <HAL_TIMEx_ConfigBreakInput+0x170>
 80088d6:	a201      	add	r2, pc, #4	@ (adr r2, 80088dc <HAL_TIMEx_ConfigBreakInput+0x50>)
 80088d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088dc:	08008963 	.word	0x08008963
 80088e0:	08008977 	.word	0x08008977
 80088e4:	080089fd 	.word	0x080089fd
 80088e8:	0800898b 	.word	0x0800898b
 80088ec:	080089fd 	.word	0x080089fd
 80088f0:	080089fd 	.word	0x080089fd
 80088f4:	080089fd 	.word	0x080089fd
 80088f8:	0800899f 	.word	0x0800899f
 80088fc:	080089fd 	.word	0x080089fd
 8008900:	080089fd 	.word	0x080089fd
 8008904:	080089fd 	.word	0x080089fd
 8008908:	080089fd 	.word	0x080089fd
 800890c:	080089fd 	.word	0x080089fd
 8008910:	080089fd 	.word	0x080089fd
 8008914:	080089fd 	.word	0x080089fd
 8008918:	080089b3 	.word	0x080089b3
 800891c:	080089fd 	.word	0x080089fd
 8008920:	080089fd 	.word	0x080089fd
 8008924:	080089fd 	.word	0x080089fd
 8008928:	080089fd 	.word	0x080089fd
 800892c:	080089fd 	.word	0x080089fd
 8008930:	080089fd 	.word	0x080089fd
 8008934:	080089fd 	.word	0x080089fd
 8008938:	080089fd 	.word	0x080089fd
 800893c:	080089fd 	.word	0x080089fd
 8008940:	080089fd 	.word	0x080089fd
 8008944:	080089fd 	.word	0x080089fd
 8008948:	080089fd 	.word	0x080089fd
 800894c:	080089fd 	.word	0x080089fd
 8008950:	080089fd 	.word	0x080089fd
 8008954:	080089fd 	.word	0x080089fd
 8008958:	080089c7 	.word	0x080089c7
 800895c:	2b40      	cmp	r3, #64	@ 0x40
 800895e:	d03b      	beq.n	80089d8 <HAL_TIMEx_ConfigBreakInput+0x14c>
 8008960:	e04c      	b.n	80089fc <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8008962:	2301      	movs	r3, #1
 8008964:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008966:	2300      	movs	r3, #0
 8008968:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800896a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800896e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008970:	2309      	movs	r3, #9
 8008972:	617b      	str	r3, [r7, #20]
      break;
 8008974:	e04b      	b.n	8008a0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008976:	2302      	movs	r3, #2
 8008978:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800897a:	2301      	movs	r3, #1
 800897c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800897e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008982:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008984:	230a      	movs	r3, #10
 8008986:	617b      	str	r3, [r7, #20]
      break;
 8008988:	e041      	b.n	8008a0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP2)
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800898a:	2304      	movs	r3, #4
 800898c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800898e:	2302      	movs	r3, #2
 8008990:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008992:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008996:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008998:	230b      	movs	r3, #11
 800899a:	617b      	str	r3, [r7, #20]
      break;
 800899c:	e037      	b.n	8008a0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP2 */
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800899e:	2308      	movs	r3, #8
 80089a0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 80089a2:	2303      	movs	r3, #3
 80089a4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 80089a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089aa:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 80089ac:	230c      	movs	r3, #12
 80089ae:	617b      	str	r3, [r7, #20]
      break;
 80089b0:	e02d      	b.n	8008a0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP4)
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 80089b2:	2310      	movs	r3, #16
 80089b4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 80089b6:	2304      	movs	r3, #4
 80089b8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 80089ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80089be:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 80089c0:	230d      	movs	r3, #13
 80089c2:	617b      	str	r3, [r7, #20]
      break;
 80089c4:	e023      	b.n	8008a0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP4 */
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 80089c6:	2320      	movs	r3, #32
 80089c8:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 80089ca:	2305      	movs	r3, #5
 80089cc:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	617b      	str	r3, [r7, #20]
      break;
 80089d6:	e01a      	b.n	8008a0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 80089d8:	2340      	movs	r3, #64	@ 0x40
 80089da:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 80089dc:	2306      	movs	r3, #6
 80089de:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80089e0:	2300      	movs	r3, #0
 80089e2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	617b      	str	r3, [r7, #20]
      break;
 80089e8:	e011      	b.n	8008a0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 80089ea:	2380      	movs	r3, #128	@ 0x80
 80089ec:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 80089ee:	2307      	movs	r3, #7
 80089f0:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	617b      	str	r3, [r7, #20]
      break;
 80089fa:	e008      	b.n	8008a0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 80089fc:	2300      	movs	r3, #0
 80089fe:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	617b      	str	r3, [r7, #20]
      break;
 8008a0c:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d003      	beq.n	8008a1c <HAL_TIMEx_ConfigBreakInput+0x190>
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d025      	beq.n	8008a66 <HAL_TIMEx_ConfigBreakInput+0x1da>
 8008a1a:	e049      	b.n	8008ab0 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a22:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	43db      	mvns	r3, r3
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	409a      	lsls	r2, r3
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	43db      	mvns	r3, r3
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	4013      	ands	r3, r2
 8008a48:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689a      	ldr	r2, [r3, #8]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	409a      	lsls	r2, r3
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	4013      	ands	r3, r2
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8008a64:	e028      	b.n	8008ab8 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a6c:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	43db      	mvns	r3, r3
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	4013      	ands	r3, r2
 8008a76:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	409a      	lsls	r2, r3
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	4013      	ands	r3, r2
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	43db      	mvns	r3, r3
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	4013      	ands	r3, r2
 8008a92:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	409a      	lsls	r2, r3
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8008aae:	e003      	b.n	8008ab8 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008ab6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	372c      	adds	r7, #44	@ 0x2c
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e042      	b.n	8008b68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d106      	bne.n	8008afa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7fa f837 	bl	8002b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2224      	movs	r2, #36	@ 0x24
 8008afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 0201 	bic.w	r2, r2, #1
 8008b10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d002      	beq.n	8008b20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fbb2 	bl	8009284 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f8b3 	bl	8008c8c <UART_SetConfig>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d101      	bne.n	8008b30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e01b      	b.n	8008b68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689a      	ldr	r2, [r3, #8]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f042 0201 	orr.w	r2, r2, #1
 8008b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fc31 	bl	80093c8 <UART_CheckIdleState>
 8008b66:	4603      	mov	r3, r0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b08a      	sub	sp, #40	@ 0x28
 8008b74:	af02      	add	r7, sp, #8
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	603b      	str	r3, [r7, #0]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b86:	2b20      	cmp	r3, #32
 8008b88:	d17b      	bne.n	8008c82 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <HAL_UART_Transmit+0x26>
 8008b90:	88fb      	ldrh	r3, [r7, #6]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e074      	b.n	8008c84 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2221      	movs	r2, #33	@ 0x21
 8008ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008baa:	f7fa f991 	bl	8002ed0 <HAL_GetTick>
 8008bae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	88fa      	ldrh	r2, [r7, #6]
 8008bb4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	88fa      	ldrh	r2, [r7, #6]
 8008bbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bc8:	d108      	bne.n	8008bdc <HAL_UART_Transmit+0x6c>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d104      	bne.n	8008bdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	61bb      	str	r3, [r7, #24]
 8008bda:	e003      	b.n	8008be4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008be0:	2300      	movs	r3, #0
 8008be2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008be4:	e030      	b.n	8008c48 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2200      	movs	r2, #0
 8008bee:	2180      	movs	r1, #128	@ 0x80
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 fc93 	bl	800951c <UART_WaitOnFlagUntilTimeout>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d005      	beq.n	8008c08 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2220      	movs	r2, #32
 8008c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e03d      	b.n	8008c84 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10b      	bne.n	8008c26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	3302      	adds	r3, #2
 8008c22:	61bb      	str	r3, [r7, #24]
 8008c24:	e007      	b.n	8008c36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	781a      	ldrb	r2, [r3, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	3301      	adds	r3, #1
 8008c34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1c8      	bne.n	8008be6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2140      	movs	r1, #64	@ 0x40
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 fc5c 	bl	800951c <UART_WaitOnFlagUntilTimeout>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d005      	beq.n	8008c76 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e006      	b.n	8008c84 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	e000      	b.n	8008c84 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008c82:	2302      	movs	r3, #2
  }
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3720      	adds	r7, #32
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c90:	b08c      	sub	sp, #48	@ 0x30
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	431a      	orrs	r2, r3
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	4baa      	ldr	r3, [pc, #680]	@ (8008f64 <UART_SetConfig+0x2d8>)
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	6812      	ldr	r2, [r2, #0]
 8008cc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	68da      	ldr	r2, [r3, #12]
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a9f      	ldr	r2, [pc, #636]	@ (8008f68 <UART_SetConfig+0x2dc>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d004      	beq.n	8008cf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	6a1b      	ldr	r3, [r3, #32]
 8008cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008d02:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	6812      	ldr	r2, [r2, #0]
 8008d0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d0c:	430b      	orrs	r3, r1
 8008d0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d16:	f023 010f 	bic.w	r1, r3, #15
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	430a      	orrs	r2, r1
 8008d24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a90      	ldr	r2, [pc, #576]	@ (8008f6c <UART_SetConfig+0x2e0>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d125      	bne.n	8008d7c <UART_SetConfig+0xf0>
 8008d30:	4b8f      	ldr	r3, [pc, #572]	@ (8008f70 <UART_SetConfig+0x2e4>)
 8008d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d36:	f003 0303 	and.w	r3, r3, #3
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d81a      	bhi.n	8008d74 <UART_SetConfig+0xe8>
 8008d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d44 <UART_SetConfig+0xb8>)
 8008d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d44:	08008d55 	.word	0x08008d55
 8008d48:	08008d65 	.word	0x08008d65
 8008d4c:	08008d5d 	.word	0x08008d5d
 8008d50:	08008d6d 	.word	0x08008d6d
 8008d54:	2301      	movs	r3, #1
 8008d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d5a:	e116      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d62:	e112      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008d64:	2304      	movs	r3, #4
 8008d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d6a:	e10e      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008d6c:	2308      	movs	r3, #8
 8008d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d72:	e10a      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008d74:	2310      	movs	r3, #16
 8008d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d7a:	e106      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a7c      	ldr	r2, [pc, #496]	@ (8008f74 <UART_SetConfig+0x2e8>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d138      	bne.n	8008df8 <UART_SetConfig+0x16c>
 8008d86:	4b7a      	ldr	r3, [pc, #488]	@ (8008f70 <UART_SetConfig+0x2e4>)
 8008d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d8c:	f003 030c 	and.w	r3, r3, #12
 8008d90:	2b0c      	cmp	r3, #12
 8008d92:	d82d      	bhi.n	8008df0 <UART_SetConfig+0x164>
 8008d94:	a201      	add	r2, pc, #4	@ (adr r2, 8008d9c <UART_SetConfig+0x110>)
 8008d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9a:	bf00      	nop
 8008d9c:	08008dd1 	.word	0x08008dd1
 8008da0:	08008df1 	.word	0x08008df1
 8008da4:	08008df1 	.word	0x08008df1
 8008da8:	08008df1 	.word	0x08008df1
 8008dac:	08008de1 	.word	0x08008de1
 8008db0:	08008df1 	.word	0x08008df1
 8008db4:	08008df1 	.word	0x08008df1
 8008db8:	08008df1 	.word	0x08008df1
 8008dbc:	08008dd9 	.word	0x08008dd9
 8008dc0:	08008df1 	.word	0x08008df1
 8008dc4:	08008df1 	.word	0x08008df1
 8008dc8:	08008df1 	.word	0x08008df1
 8008dcc:	08008de9 	.word	0x08008de9
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dd6:	e0d8      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008dd8:	2302      	movs	r3, #2
 8008dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dde:	e0d4      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008de0:	2304      	movs	r3, #4
 8008de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008de6:	e0d0      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008de8:	2308      	movs	r3, #8
 8008dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dee:	e0cc      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008df0:	2310      	movs	r3, #16
 8008df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008df6:	e0c8      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a5e      	ldr	r2, [pc, #376]	@ (8008f78 <UART_SetConfig+0x2ec>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d125      	bne.n	8008e4e <UART_SetConfig+0x1c2>
 8008e02:	4b5b      	ldr	r3, [pc, #364]	@ (8008f70 <UART_SetConfig+0x2e4>)
 8008e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008e0c:	2b30      	cmp	r3, #48	@ 0x30
 8008e0e:	d016      	beq.n	8008e3e <UART_SetConfig+0x1b2>
 8008e10:	2b30      	cmp	r3, #48	@ 0x30
 8008e12:	d818      	bhi.n	8008e46 <UART_SetConfig+0x1ba>
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d00a      	beq.n	8008e2e <UART_SetConfig+0x1a2>
 8008e18:	2b20      	cmp	r3, #32
 8008e1a:	d814      	bhi.n	8008e46 <UART_SetConfig+0x1ba>
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <UART_SetConfig+0x19a>
 8008e20:	2b10      	cmp	r3, #16
 8008e22:	d008      	beq.n	8008e36 <UART_SetConfig+0x1aa>
 8008e24:	e00f      	b.n	8008e46 <UART_SetConfig+0x1ba>
 8008e26:	2300      	movs	r3, #0
 8008e28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e2c:	e0ad      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e34:	e0a9      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008e36:	2304      	movs	r3, #4
 8008e38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e3c:	e0a5      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008e3e:	2308      	movs	r3, #8
 8008e40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e44:	e0a1      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008e46:	2310      	movs	r3, #16
 8008e48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e4c:	e09d      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a4a      	ldr	r2, [pc, #296]	@ (8008f7c <UART_SetConfig+0x2f0>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d125      	bne.n	8008ea4 <UART_SetConfig+0x218>
 8008e58:	4b45      	ldr	r3, [pc, #276]	@ (8008f70 <UART_SetConfig+0x2e4>)
 8008e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008e62:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e64:	d016      	beq.n	8008e94 <UART_SetConfig+0x208>
 8008e66:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e68:	d818      	bhi.n	8008e9c <UART_SetConfig+0x210>
 8008e6a:	2b80      	cmp	r3, #128	@ 0x80
 8008e6c:	d00a      	beq.n	8008e84 <UART_SetConfig+0x1f8>
 8008e6e:	2b80      	cmp	r3, #128	@ 0x80
 8008e70:	d814      	bhi.n	8008e9c <UART_SetConfig+0x210>
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <UART_SetConfig+0x1f0>
 8008e76:	2b40      	cmp	r3, #64	@ 0x40
 8008e78:	d008      	beq.n	8008e8c <UART_SetConfig+0x200>
 8008e7a:	e00f      	b.n	8008e9c <UART_SetConfig+0x210>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e82:	e082      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008e84:	2302      	movs	r3, #2
 8008e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e8a:	e07e      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008e8c:	2304      	movs	r3, #4
 8008e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e92:	e07a      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008e94:	2308      	movs	r3, #8
 8008e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e9a:	e076      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008e9c:	2310      	movs	r3, #16
 8008e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ea2:	e072      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a35      	ldr	r2, [pc, #212]	@ (8008f80 <UART_SetConfig+0x2f4>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d12a      	bne.n	8008f04 <UART_SetConfig+0x278>
 8008eae:	4b30      	ldr	r3, [pc, #192]	@ (8008f70 <UART_SetConfig+0x2e4>)
 8008eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ebc:	d01a      	beq.n	8008ef4 <UART_SetConfig+0x268>
 8008ebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ec2:	d81b      	bhi.n	8008efc <UART_SetConfig+0x270>
 8008ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ec8:	d00c      	beq.n	8008ee4 <UART_SetConfig+0x258>
 8008eca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ece:	d815      	bhi.n	8008efc <UART_SetConfig+0x270>
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d003      	beq.n	8008edc <UART_SetConfig+0x250>
 8008ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ed8:	d008      	beq.n	8008eec <UART_SetConfig+0x260>
 8008eda:	e00f      	b.n	8008efc <UART_SetConfig+0x270>
 8008edc:	2300      	movs	r3, #0
 8008ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ee2:	e052      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eea:	e04e      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008eec:	2304      	movs	r3, #4
 8008eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ef2:	e04a      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008ef4:	2308      	movs	r3, #8
 8008ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008efa:	e046      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008efc:	2310      	movs	r3, #16
 8008efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f02:	e042      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a17      	ldr	r2, [pc, #92]	@ (8008f68 <UART_SetConfig+0x2dc>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d13a      	bne.n	8008f84 <UART_SetConfig+0x2f8>
 8008f0e:	4b18      	ldr	r3, [pc, #96]	@ (8008f70 <UART_SetConfig+0x2e4>)
 8008f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f1c:	d01a      	beq.n	8008f54 <UART_SetConfig+0x2c8>
 8008f1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f22:	d81b      	bhi.n	8008f5c <UART_SetConfig+0x2d0>
 8008f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f28:	d00c      	beq.n	8008f44 <UART_SetConfig+0x2b8>
 8008f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f2e:	d815      	bhi.n	8008f5c <UART_SetConfig+0x2d0>
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d003      	beq.n	8008f3c <UART_SetConfig+0x2b0>
 8008f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f38:	d008      	beq.n	8008f4c <UART_SetConfig+0x2c0>
 8008f3a:	e00f      	b.n	8008f5c <UART_SetConfig+0x2d0>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f42:	e022      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008f44:	2302      	movs	r3, #2
 8008f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f4a:	e01e      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008f4c:	2304      	movs	r3, #4
 8008f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f52:	e01a      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008f54:	2308      	movs	r3, #8
 8008f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f5a:	e016      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008f5c:	2310      	movs	r3, #16
 8008f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f62:	e012      	b.n	8008f8a <UART_SetConfig+0x2fe>
 8008f64:	cfff69f3 	.word	0xcfff69f3
 8008f68:	40008000 	.word	0x40008000
 8008f6c:	40013800 	.word	0x40013800
 8008f70:	40021000 	.word	0x40021000
 8008f74:	40004400 	.word	0x40004400
 8008f78:	40004800 	.word	0x40004800
 8008f7c:	40004c00 	.word	0x40004c00
 8008f80:	40005000 	.word	0x40005000
 8008f84:	2310      	movs	r3, #16
 8008f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4aae      	ldr	r2, [pc, #696]	@ (8009248 <UART_SetConfig+0x5bc>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	f040 8097 	bne.w	80090c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f9a:	2b08      	cmp	r3, #8
 8008f9c:	d823      	bhi.n	8008fe6 <UART_SetConfig+0x35a>
 8008f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa4 <UART_SetConfig+0x318>)
 8008fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa4:	08008fc9 	.word	0x08008fc9
 8008fa8:	08008fe7 	.word	0x08008fe7
 8008fac:	08008fd1 	.word	0x08008fd1
 8008fb0:	08008fe7 	.word	0x08008fe7
 8008fb4:	08008fd7 	.word	0x08008fd7
 8008fb8:	08008fe7 	.word	0x08008fe7
 8008fbc:	08008fe7 	.word	0x08008fe7
 8008fc0:	08008fe7 	.word	0x08008fe7
 8008fc4:	08008fdf 	.word	0x08008fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fc8:	f7fd fafe 	bl	80065c8 <HAL_RCC_GetPCLK1Freq>
 8008fcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fce:	e010      	b.n	8008ff2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fd0:	4b9e      	ldr	r3, [pc, #632]	@ (800924c <UART_SetConfig+0x5c0>)
 8008fd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fd4:	e00d      	b.n	8008ff2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fd6:	f7fd fa89 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 8008fda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fdc:	e009      	b.n	8008ff2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fe2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fe4:	e005      	b.n	8008ff2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ff0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 8130 	beq.w	800925a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffe:	4a94      	ldr	r2, [pc, #592]	@ (8009250 <UART_SetConfig+0x5c4>)
 8009000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009004:	461a      	mov	r2, r3
 8009006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009008:	fbb3 f3f2 	udiv	r3, r3, r2
 800900c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	4613      	mov	r3, r2
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	4413      	add	r3, r2
 8009018:	69ba      	ldr	r2, [r7, #24]
 800901a:	429a      	cmp	r2, r3
 800901c:	d305      	bcc.n	800902a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	429a      	cmp	r2, r3
 8009028:	d903      	bls.n	8009032 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009030:	e113      	b.n	800925a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009034:	2200      	movs	r2, #0
 8009036:	60bb      	str	r3, [r7, #8]
 8009038:	60fa      	str	r2, [r7, #12]
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903e:	4a84      	ldr	r2, [pc, #528]	@ (8009250 <UART_SetConfig+0x5c4>)
 8009040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009044:	b29b      	uxth	r3, r3
 8009046:	2200      	movs	r2, #0
 8009048:	603b      	str	r3, [r7, #0]
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009050:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009054:	f7f7 f93c 	bl	80002d0 <__aeabi_uldivmod>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	4610      	mov	r0, r2
 800905e:	4619      	mov	r1, r3
 8009060:	f04f 0200 	mov.w	r2, #0
 8009064:	f04f 0300 	mov.w	r3, #0
 8009068:	020b      	lsls	r3, r1, #8
 800906a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800906e:	0202      	lsls	r2, r0, #8
 8009070:	6979      	ldr	r1, [r7, #20]
 8009072:	6849      	ldr	r1, [r1, #4]
 8009074:	0849      	lsrs	r1, r1, #1
 8009076:	2000      	movs	r0, #0
 8009078:	460c      	mov	r4, r1
 800907a:	4605      	mov	r5, r0
 800907c:	eb12 0804 	adds.w	r8, r2, r4
 8009080:	eb43 0905 	adc.w	r9, r3, r5
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	469a      	mov	sl, r3
 800908c:	4693      	mov	fp, r2
 800908e:	4652      	mov	r2, sl
 8009090:	465b      	mov	r3, fp
 8009092:	4640      	mov	r0, r8
 8009094:	4649      	mov	r1, r9
 8009096:	f7f7 f91b 	bl	80002d0 <__aeabi_uldivmod>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4613      	mov	r3, r2
 80090a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090a8:	d308      	bcc.n	80090bc <UART_SetConfig+0x430>
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090b0:	d204      	bcs.n	80090bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6a3a      	ldr	r2, [r7, #32]
 80090b8:	60da      	str	r2, [r3, #12]
 80090ba:	e0ce      	b.n	800925a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090c2:	e0ca      	b.n	800925a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	69db      	ldr	r3, [r3, #28]
 80090c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090cc:	d166      	bne.n	800919c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80090ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090d2:	2b08      	cmp	r3, #8
 80090d4:	d827      	bhi.n	8009126 <UART_SetConfig+0x49a>
 80090d6:	a201      	add	r2, pc, #4	@ (adr r2, 80090dc <UART_SetConfig+0x450>)
 80090d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090dc:	08009101 	.word	0x08009101
 80090e0:	08009109 	.word	0x08009109
 80090e4:	08009111 	.word	0x08009111
 80090e8:	08009127 	.word	0x08009127
 80090ec:	08009117 	.word	0x08009117
 80090f0:	08009127 	.word	0x08009127
 80090f4:	08009127 	.word	0x08009127
 80090f8:	08009127 	.word	0x08009127
 80090fc:	0800911f 	.word	0x0800911f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009100:	f7fd fa62 	bl	80065c8 <HAL_RCC_GetPCLK1Freq>
 8009104:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009106:	e014      	b.n	8009132 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009108:	f7fd fa74 	bl	80065f4 <HAL_RCC_GetPCLK2Freq>
 800910c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800910e:	e010      	b.n	8009132 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009110:	4b4e      	ldr	r3, [pc, #312]	@ (800924c <UART_SetConfig+0x5c0>)
 8009112:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009114:	e00d      	b.n	8009132 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009116:	f7fd f9e9 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 800911a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800911c:	e009      	b.n	8009132 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800911e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009124:	e005      	b.n	8009132 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009126:	2300      	movs	r3, #0
 8009128:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009130:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 8090 	beq.w	800925a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913e:	4a44      	ldr	r2, [pc, #272]	@ (8009250 <UART_SetConfig+0x5c4>)
 8009140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009144:	461a      	mov	r2, r3
 8009146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009148:	fbb3 f3f2 	udiv	r3, r3, r2
 800914c:	005a      	lsls	r2, r3, #1
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	085b      	lsrs	r3, r3, #1
 8009154:	441a      	add	r2, r3
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	fbb2 f3f3 	udiv	r3, r2, r3
 800915e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009160:	6a3b      	ldr	r3, [r7, #32]
 8009162:	2b0f      	cmp	r3, #15
 8009164:	d916      	bls.n	8009194 <UART_SetConfig+0x508>
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800916c:	d212      	bcs.n	8009194 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	b29b      	uxth	r3, r3
 8009172:	f023 030f 	bic.w	r3, r3, #15
 8009176:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	085b      	lsrs	r3, r3, #1
 800917c:	b29b      	uxth	r3, r3
 800917e:	f003 0307 	and.w	r3, r3, #7
 8009182:	b29a      	uxth	r2, r3
 8009184:	8bfb      	ldrh	r3, [r7, #30]
 8009186:	4313      	orrs	r3, r2
 8009188:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	8bfa      	ldrh	r2, [r7, #30]
 8009190:	60da      	str	r2, [r3, #12]
 8009192:	e062      	b.n	800925a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800919a:	e05e      	b.n	800925a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800919c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80091a0:	2b08      	cmp	r3, #8
 80091a2:	d828      	bhi.n	80091f6 <UART_SetConfig+0x56a>
 80091a4:	a201      	add	r2, pc, #4	@ (adr r2, 80091ac <UART_SetConfig+0x520>)
 80091a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091aa:	bf00      	nop
 80091ac:	080091d1 	.word	0x080091d1
 80091b0:	080091d9 	.word	0x080091d9
 80091b4:	080091e1 	.word	0x080091e1
 80091b8:	080091f7 	.word	0x080091f7
 80091bc:	080091e7 	.word	0x080091e7
 80091c0:	080091f7 	.word	0x080091f7
 80091c4:	080091f7 	.word	0x080091f7
 80091c8:	080091f7 	.word	0x080091f7
 80091cc:	080091ef 	.word	0x080091ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091d0:	f7fd f9fa 	bl	80065c8 <HAL_RCC_GetPCLK1Freq>
 80091d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091d6:	e014      	b.n	8009202 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091d8:	f7fd fa0c 	bl	80065f4 <HAL_RCC_GetPCLK2Freq>
 80091dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091de:	e010      	b.n	8009202 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091e0:	4b1a      	ldr	r3, [pc, #104]	@ (800924c <UART_SetConfig+0x5c0>)
 80091e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091e4:	e00d      	b.n	8009202 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091e6:	f7fd f981 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 80091ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091ec:	e009      	b.n	8009202 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091f4:	e005      	b.n	8009202 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009200:	bf00      	nop
    }

    if (pclk != 0U)
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	2b00      	cmp	r3, #0
 8009206:	d028      	beq.n	800925a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920c:	4a10      	ldr	r2, [pc, #64]	@ (8009250 <UART_SetConfig+0x5c4>)
 800920e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009212:	461a      	mov	r2, r3
 8009214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009216:	fbb3 f2f2 	udiv	r2, r3, r2
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	085b      	lsrs	r3, r3, #1
 8009220:	441a      	add	r2, r3
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	fbb2 f3f3 	udiv	r3, r2, r3
 800922a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	2b0f      	cmp	r3, #15
 8009230:	d910      	bls.n	8009254 <UART_SetConfig+0x5c8>
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009238:	d20c      	bcs.n	8009254 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	b29a      	uxth	r2, r3
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	60da      	str	r2, [r3, #12]
 8009244:	e009      	b.n	800925a <UART_SetConfig+0x5ce>
 8009246:	bf00      	nop
 8009248:	40008000 	.word	0x40008000
 800924c:	00f42400 	.word	0x00f42400
 8009250:	0800a240 	.word	0x0800a240
      }
      else
      {
        ret = HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2201      	movs	r2, #1
 800925e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2201      	movs	r2, #1
 8009266:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2200      	movs	r2, #0
 800926e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	2200      	movs	r2, #0
 8009274:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009276:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800927a:	4618      	mov	r0, r3
 800927c:	3730      	adds	r7, #48	@ 0x30
 800927e:	46bd      	mov	sp, r7
 8009280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009290:	f003 0308 	and.w	r3, r3, #8
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00a      	beq.n	80092ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	430a      	orrs	r2, r1
 80092ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00a      	beq.n	80092d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d4:	f003 0302 	and.w	r3, r3, #2
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00a      	beq.n	80092f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f6:	f003 0304 	and.w	r3, r3, #4
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009318:	f003 0310 	and.w	r3, r3, #16
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00a      	beq.n	8009336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933a:	f003 0320 	and.w	r3, r3, #32
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00a      	beq.n	8009358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	430a      	orrs	r2, r1
 8009356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009360:	2b00      	cmp	r3, #0
 8009362:	d01a      	beq.n	800939a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800937e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009382:	d10a      	bne.n	800939a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	430a      	orrs	r2, r1
 8009398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800939e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	605a      	str	r2, [r3, #4]
  }
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b098      	sub	sp, #96	@ 0x60
 80093cc:	af02      	add	r7, sp, #8
 80093ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093d8:	f7f9 fd7a 	bl	8002ed0 <HAL_GetTick>
 80093dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0308 	and.w	r3, r3, #8
 80093e8:	2b08      	cmp	r3, #8
 80093ea:	d12f      	bne.n	800944c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093f4:	2200      	movs	r2, #0
 80093f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f88e 	bl	800951c <UART_WaitOnFlagUntilTimeout>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d022      	beq.n	800944c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940e:	e853 3f00 	ldrex	r3, [r3]
 8009412:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800941a:	653b      	str	r3, [r7, #80]	@ 0x50
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	461a      	mov	r2, r3
 8009422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009424:	647b      	str	r3, [r7, #68]	@ 0x44
 8009426:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009428:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800942a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800942c:	e841 2300 	strex	r3, r2, [r1]
 8009430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1e6      	bne.n	8009406 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2220      	movs	r2, #32
 800943c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e063      	b.n	8009514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 0304 	and.w	r3, r3, #4
 8009456:	2b04      	cmp	r3, #4
 8009458:	d149      	bne.n	80094ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800945a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009462:	2200      	movs	r2, #0
 8009464:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f857 	bl	800951c <UART_WaitOnFlagUntilTimeout>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d03c      	beq.n	80094ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947c:	e853 3f00 	ldrex	r3, [r3]
 8009480:	623b      	str	r3, [r7, #32]
   return(result);
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009492:	633b      	str	r3, [r7, #48]	@ 0x30
 8009494:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e6      	bne.n	8009474 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3308      	adds	r3, #8
 80094ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f023 0301 	bic.w	r3, r3, #1
 80094bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3308      	adds	r3, #8
 80094c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094c6:	61fa      	str	r2, [r7, #28]
 80094c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	69b9      	ldr	r1, [r7, #24]
 80094cc:	69fa      	ldr	r2, [r7, #28]
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	617b      	str	r3, [r7, #20]
   return(result);
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e5      	bne.n	80094a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2220      	movs	r2, #32
 80094de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e012      	b.n	8009514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3758      	adds	r7, #88	@ 0x58
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	603b      	str	r3, [r7, #0]
 8009528:	4613      	mov	r3, r2
 800952a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800952c:	e04f      	b.n	80095ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009534:	d04b      	beq.n	80095ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009536:	f7f9 fccb 	bl	8002ed0 <HAL_GetTick>
 800953a:	4602      	mov	r2, r0
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	429a      	cmp	r2, r3
 8009544:	d302      	bcc.n	800954c <UART_WaitOnFlagUntilTimeout+0x30>
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	e04e      	b.n	80095ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0304 	and.w	r3, r3, #4
 800955a:	2b00      	cmp	r3, #0
 800955c:	d037      	beq.n	80095ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b80      	cmp	r3, #128	@ 0x80
 8009562:	d034      	beq.n	80095ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	2b40      	cmp	r3, #64	@ 0x40
 8009568:	d031      	beq.n	80095ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	69db      	ldr	r3, [r3, #28]
 8009570:	f003 0308 	and.w	r3, r3, #8
 8009574:	2b08      	cmp	r3, #8
 8009576:	d110      	bne.n	800959a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2208      	movs	r2, #8
 800957e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 f838 	bl	80095f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2208      	movs	r2, #8
 800958a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e029      	b.n	80095ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	69db      	ldr	r3, [r3, #28]
 80095a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095a8:	d111      	bne.n	80095ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 f81e 	bl	80095f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2220      	movs	r2, #32
 80095be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e00f      	b.n	80095ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	69da      	ldr	r2, [r3, #28]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	4013      	ands	r3, r2
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	429a      	cmp	r2, r3
 80095dc:	bf0c      	ite	eq
 80095de:	2301      	moveq	r3, #1
 80095e0:	2300      	movne	r3, #0
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	461a      	mov	r2, r3
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d0a0      	beq.n	800952e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b095      	sub	sp, #84	@ 0x54
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009606:	e853 3f00 	ldrex	r3, [r3]
 800960a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800960c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	461a      	mov	r2, r3
 800961a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800961c:	643b      	str	r3, [r7, #64]	@ 0x40
 800961e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009620:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009622:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009624:	e841 2300 	strex	r3, r2, [r1]
 8009628:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800962a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1e6      	bne.n	80095fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3308      	adds	r3, #8
 8009636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009638:	6a3b      	ldr	r3, [r7, #32]
 800963a:	e853 3f00 	ldrex	r3, [r3]
 800963e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009646:	f023 0301 	bic.w	r3, r3, #1
 800964a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3308      	adds	r3, #8
 8009652:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009654:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009656:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800965a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800965c:	e841 2300 	strex	r3, r2, [r1]
 8009660:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1e3      	bne.n	8009630 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800966c:	2b01      	cmp	r3, #1
 800966e:	d118      	bne.n	80096a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	e853 3f00 	ldrex	r3, [r3]
 800967c:	60bb      	str	r3, [r7, #8]
   return(result);
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	f023 0310 	bic.w	r3, r3, #16
 8009684:	647b      	str	r3, [r7, #68]	@ 0x44
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	461a      	mov	r2, r3
 800968c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800968e:	61bb      	str	r3, [r7, #24]
 8009690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009692:	6979      	ldr	r1, [r7, #20]
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	e841 2300 	strex	r3, r2, [r1]
 800969a:	613b      	str	r3, [r7, #16]
   return(result);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e6      	bne.n	8009670 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80096b6:	bf00      	nop
 80096b8:	3754      	adds	r7, #84	@ 0x54
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80096c2:	b480      	push	{r7}
 80096c4:	b085      	sub	sp, #20
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d101      	bne.n	80096d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80096d4:	2302      	movs	r3, #2
 80096d6:	e027      	b.n	8009728 <HAL_UARTEx_DisableFifoMode+0x66>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2224      	movs	r2, #36	@ 0x24
 80096e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0201 	bic.w	r2, r2, #1
 80096fe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009706:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2220      	movs	r2, #32
 800971a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009744:	2b01      	cmp	r3, #1
 8009746:	d101      	bne.n	800974c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009748:	2302      	movs	r3, #2
 800974a:	e02d      	b.n	80097a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2224      	movs	r2, #36	@ 0x24
 8009758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f022 0201 	bic.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	430a      	orrs	r2, r1
 8009786:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f84f 	bl	800982c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2220      	movs	r2, #32
 800979a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d101      	bne.n	80097c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097c4:	2302      	movs	r3, #2
 80097c6:	e02d      	b.n	8009824 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2224      	movs	r2, #36	@ 0x24
 80097d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 0201 	bic.w	r2, r2, #1
 80097ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	683a      	ldr	r2, [r7, #0]
 8009800:	430a      	orrs	r2, r1
 8009802:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f811 	bl	800982c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2220      	movs	r2, #32
 8009816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009838:	2b00      	cmp	r3, #0
 800983a:	d108      	bne.n	800984e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800984c:	e031      	b.n	80098b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800984e:	2308      	movs	r3, #8
 8009850:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009852:	2308      	movs	r3, #8
 8009854:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	0e5b      	lsrs	r3, r3, #25
 800985e:	b2db      	uxtb	r3, r3
 8009860:	f003 0307 	and.w	r3, r3, #7
 8009864:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	0f5b      	lsrs	r3, r3, #29
 800986e:	b2db      	uxtb	r3, r3
 8009870:	f003 0307 	and.w	r3, r3, #7
 8009874:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009876:	7bbb      	ldrb	r3, [r7, #14]
 8009878:	7b3a      	ldrb	r2, [r7, #12]
 800987a:	4911      	ldr	r1, [pc, #68]	@ (80098c0 <UARTEx_SetNbDataToProcess+0x94>)
 800987c:	5c8a      	ldrb	r2, [r1, r2]
 800987e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009882:	7b3a      	ldrb	r2, [r7, #12]
 8009884:	490f      	ldr	r1, [pc, #60]	@ (80098c4 <UARTEx_SetNbDataToProcess+0x98>)
 8009886:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009888:	fb93 f3f2 	sdiv	r3, r3, r2
 800988c:	b29a      	uxth	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	7b7a      	ldrb	r2, [r7, #13]
 8009898:	4909      	ldr	r1, [pc, #36]	@ (80098c0 <UARTEx_SetNbDataToProcess+0x94>)
 800989a:	5c8a      	ldrb	r2, [r1, r2]
 800989c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098a0:	7b7a      	ldrb	r2, [r7, #13]
 80098a2:	4908      	ldr	r1, [pc, #32]	@ (80098c4 <UARTEx_SetNbDataToProcess+0x98>)
 80098a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80098b2:	bf00      	nop
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	0800a258 	.word	0x0800a258
 80098c4:	0800a260 	.word	0x0800a260

080098c8 <siprintf>:
 80098c8:	b40e      	push	{r1, r2, r3}
 80098ca:	b510      	push	{r4, lr}
 80098cc:	b09d      	sub	sp, #116	@ 0x74
 80098ce:	ab1f      	add	r3, sp, #124	@ 0x7c
 80098d0:	9002      	str	r0, [sp, #8]
 80098d2:	9006      	str	r0, [sp, #24]
 80098d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80098d8:	480a      	ldr	r0, [pc, #40]	@ (8009904 <siprintf+0x3c>)
 80098da:	9107      	str	r1, [sp, #28]
 80098dc:	9104      	str	r1, [sp, #16]
 80098de:	490a      	ldr	r1, [pc, #40]	@ (8009908 <siprintf+0x40>)
 80098e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e4:	9105      	str	r1, [sp, #20]
 80098e6:	2400      	movs	r4, #0
 80098e8:	a902      	add	r1, sp, #8
 80098ea:	6800      	ldr	r0, [r0, #0]
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80098f0:	f000 f994 	bl	8009c1c <_svfiprintf_r>
 80098f4:	9b02      	ldr	r3, [sp, #8]
 80098f6:	701c      	strb	r4, [r3, #0]
 80098f8:	b01d      	add	sp, #116	@ 0x74
 80098fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098fe:	b003      	add	sp, #12
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	2000000c 	.word	0x2000000c
 8009908:	ffff0208 	.word	0xffff0208

0800990c <memset>:
 800990c:	4402      	add	r2, r0
 800990e:	4603      	mov	r3, r0
 8009910:	4293      	cmp	r3, r2
 8009912:	d100      	bne.n	8009916 <memset+0xa>
 8009914:	4770      	bx	lr
 8009916:	f803 1b01 	strb.w	r1, [r3], #1
 800991a:	e7f9      	b.n	8009910 <memset+0x4>

0800991c <__errno>:
 800991c:	4b01      	ldr	r3, [pc, #4]	@ (8009924 <__errno+0x8>)
 800991e:	6818      	ldr	r0, [r3, #0]
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	2000000c 	.word	0x2000000c

08009928 <__libc_init_array>:
 8009928:	b570      	push	{r4, r5, r6, lr}
 800992a:	4d0d      	ldr	r5, [pc, #52]	@ (8009960 <__libc_init_array+0x38>)
 800992c:	4c0d      	ldr	r4, [pc, #52]	@ (8009964 <__libc_init_array+0x3c>)
 800992e:	1b64      	subs	r4, r4, r5
 8009930:	10a4      	asrs	r4, r4, #2
 8009932:	2600      	movs	r6, #0
 8009934:	42a6      	cmp	r6, r4
 8009936:	d109      	bne.n	800994c <__libc_init_array+0x24>
 8009938:	4d0b      	ldr	r5, [pc, #44]	@ (8009968 <__libc_init_array+0x40>)
 800993a:	4c0c      	ldr	r4, [pc, #48]	@ (800996c <__libc_init_array+0x44>)
 800993c:	f000 fc64 	bl	800a208 <_init>
 8009940:	1b64      	subs	r4, r4, r5
 8009942:	10a4      	asrs	r4, r4, #2
 8009944:	2600      	movs	r6, #0
 8009946:	42a6      	cmp	r6, r4
 8009948:	d105      	bne.n	8009956 <__libc_init_array+0x2e>
 800994a:	bd70      	pop	{r4, r5, r6, pc}
 800994c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009950:	4798      	blx	r3
 8009952:	3601      	adds	r6, #1
 8009954:	e7ee      	b.n	8009934 <__libc_init_array+0xc>
 8009956:	f855 3b04 	ldr.w	r3, [r5], #4
 800995a:	4798      	blx	r3
 800995c:	3601      	adds	r6, #1
 800995e:	e7f2      	b.n	8009946 <__libc_init_array+0x1e>
 8009960:	0800a2a4 	.word	0x0800a2a4
 8009964:	0800a2a4 	.word	0x0800a2a4
 8009968:	0800a2a4 	.word	0x0800a2a4
 800996c:	0800a2a8 	.word	0x0800a2a8

08009970 <__retarget_lock_acquire_recursive>:
 8009970:	4770      	bx	lr

08009972 <__retarget_lock_release_recursive>:
 8009972:	4770      	bx	lr

08009974 <_free_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4605      	mov	r5, r0
 8009978:	2900      	cmp	r1, #0
 800997a:	d041      	beq.n	8009a00 <_free_r+0x8c>
 800997c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009980:	1f0c      	subs	r4, r1, #4
 8009982:	2b00      	cmp	r3, #0
 8009984:	bfb8      	it	lt
 8009986:	18e4      	addlt	r4, r4, r3
 8009988:	f000 f8e0 	bl	8009b4c <__malloc_lock>
 800998c:	4a1d      	ldr	r2, [pc, #116]	@ (8009a04 <_free_r+0x90>)
 800998e:	6813      	ldr	r3, [r2, #0]
 8009990:	b933      	cbnz	r3, 80099a0 <_free_r+0x2c>
 8009992:	6063      	str	r3, [r4, #4]
 8009994:	6014      	str	r4, [r2, #0]
 8009996:	4628      	mov	r0, r5
 8009998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800999c:	f000 b8dc 	b.w	8009b58 <__malloc_unlock>
 80099a0:	42a3      	cmp	r3, r4
 80099a2:	d908      	bls.n	80099b6 <_free_r+0x42>
 80099a4:	6820      	ldr	r0, [r4, #0]
 80099a6:	1821      	adds	r1, r4, r0
 80099a8:	428b      	cmp	r3, r1
 80099aa:	bf01      	itttt	eq
 80099ac:	6819      	ldreq	r1, [r3, #0]
 80099ae:	685b      	ldreq	r3, [r3, #4]
 80099b0:	1809      	addeq	r1, r1, r0
 80099b2:	6021      	streq	r1, [r4, #0]
 80099b4:	e7ed      	b.n	8009992 <_free_r+0x1e>
 80099b6:	461a      	mov	r2, r3
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	b10b      	cbz	r3, 80099c0 <_free_r+0x4c>
 80099bc:	42a3      	cmp	r3, r4
 80099be:	d9fa      	bls.n	80099b6 <_free_r+0x42>
 80099c0:	6811      	ldr	r1, [r2, #0]
 80099c2:	1850      	adds	r0, r2, r1
 80099c4:	42a0      	cmp	r0, r4
 80099c6:	d10b      	bne.n	80099e0 <_free_r+0x6c>
 80099c8:	6820      	ldr	r0, [r4, #0]
 80099ca:	4401      	add	r1, r0
 80099cc:	1850      	adds	r0, r2, r1
 80099ce:	4283      	cmp	r3, r0
 80099d0:	6011      	str	r1, [r2, #0]
 80099d2:	d1e0      	bne.n	8009996 <_free_r+0x22>
 80099d4:	6818      	ldr	r0, [r3, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	6053      	str	r3, [r2, #4]
 80099da:	4408      	add	r0, r1
 80099dc:	6010      	str	r0, [r2, #0]
 80099de:	e7da      	b.n	8009996 <_free_r+0x22>
 80099e0:	d902      	bls.n	80099e8 <_free_r+0x74>
 80099e2:	230c      	movs	r3, #12
 80099e4:	602b      	str	r3, [r5, #0]
 80099e6:	e7d6      	b.n	8009996 <_free_r+0x22>
 80099e8:	6820      	ldr	r0, [r4, #0]
 80099ea:	1821      	adds	r1, r4, r0
 80099ec:	428b      	cmp	r3, r1
 80099ee:	bf04      	itt	eq
 80099f0:	6819      	ldreq	r1, [r3, #0]
 80099f2:	685b      	ldreq	r3, [r3, #4]
 80099f4:	6063      	str	r3, [r4, #4]
 80099f6:	bf04      	itt	eq
 80099f8:	1809      	addeq	r1, r1, r0
 80099fa:	6021      	streq	r1, [r4, #0]
 80099fc:	6054      	str	r4, [r2, #4]
 80099fe:	e7ca      	b.n	8009996 <_free_r+0x22>
 8009a00:	bd38      	pop	{r3, r4, r5, pc}
 8009a02:	bf00      	nop
 8009a04:	20008980 	.word	0x20008980

08009a08 <sbrk_aligned>:
 8009a08:	b570      	push	{r4, r5, r6, lr}
 8009a0a:	4e0f      	ldr	r6, [pc, #60]	@ (8009a48 <sbrk_aligned+0x40>)
 8009a0c:	460c      	mov	r4, r1
 8009a0e:	6831      	ldr	r1, [r6, #0]
 8009a10:	4605      	mov	r5, r0
 8009a12:	b911      	cbnz	r1, 8009a1a <sbrk_aligned+0x12>
 8009a14:	f000 fba4 	bl	800a160 <_sbrk_r>
 8009a18:	6030      	str	r0, [r6, #0]
 8009a1a:	4621      	mov	r1, r4
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	f000 fb9f 	bl	800a160 <_sbrk_r>
 8009a22:	1c43      	adds	r3, r0, #1
 8009a24:	d103      	bne.n	8009a2e <sbrk_aligned+0x26>
 8009a26:	f04f 34ff 	mov.w	r4, #4294967295
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	bd70      	pop	{r4, r5, r6, pc}
 8009a2e:	1cc4      	adds	r4, r0, #3
 8009a30:	f024 0403 	bic.w	r4, r4, #3
 8009a34:	42a0      	cmp	r0, r4
 8009a36:	d0f8      	beq.n	8009a2a <sbrk_aligned+0x22>
 8009a38:	1a21      	subs	r1, r4, r0
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f000 fb90 	bl	800a160 <_sbrk_r>
 8009a40:	3001      	adds	r0, #1
 8009a42:	d1f2      	bne.n	8009a2a <sbrk_aligned+0x22>
 8009a44:	e7ef      	b.n	8009a26 <sbrk_aligned+0x1e>
 8009a46:	bf00      	nop
 8009a48:	2000897c 	.word	0x2000897c

08009a4c <_malloc_r>:
 8009a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a50:	1ccd      	adds	r5, r1, #3
 8009a52:	f025 0503 	bic.w	r5, r5, #3
 8009a56:	3508      	adds	r5, #8
 8009a58:	2d0c      	cmp	r5, #12
 8009a5a:	bf38      	it	cc
 8009a5c:	250c      	movcc	r5, #12
 8009a5e:	2d00      	cmp	r5, #0
 8009a60:	4606      	mov	r6, r0
 8009a62:	db01      	blt.n	8009a68 <_malloc_r+0x1c>
 8009a64:	42a9      	cmp	r1, r5
 8009a66:	d904      	bls.n	8009a72 <_malloc_r+0x26>
 8009a68:	230c      	movs	r3, #12
 8009a6a:	6033      	str	r3, [r6, #0]
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b48 <_malloc_r+0xfc>
 8009a76:	f000 f869 	bl	8009b4c <__malloc_lock>
 8009a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a7e:	461c      	mov	r4, r3
 8009a80:	bb44      	cbnz	r4, 8009ad4 <_malloc_r+0x88>
 8009a82:	4629      	mov	r1, r5
 8009a84:	4630      	mov	r0, r6
 8009a86:	f7ff ffbf 	bl	8009a08 <sbrk_aligned>
 8009a8a:	1c43      	adds	r3, r0, #1
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	d158      	bne.n	8009b42 <_malloc_r+0xf6>
 8009a90:	f8d8 4000 	ldr.w	r4, [r8]
 8009a94:	4627      	mov	r7, r4
 8009a96:	2f00      	cmp	r7, #0
 8009a98:	d143      	bne.n	8009b22 <_malloc_r+0xd6>
 8009a9a:	2c00      	cmp	r4, #0
 8009a9c:	d04b      	beq.n	8009b36 <_malloc_r+0xea>
 8009a9e:	6823      	ldr	r3, [r4, #0]
 8009aa0:	4639      	mov	r1, r7
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	eb04 0903 	add.w	r9, r4, r3
 8009aa8:	f000 fb5a 	bl	800a160 <_sbrk_r>
 8009aac:	4581      	cmp	r9, r0
 8009aae:	d142      	bne.n	8009b36 <_malloc_r+0xea>
 8009ab0:	6821      	ldr	r1, [r4, #0]
 8009ab2:	1a6d      	subs	r5, r5, r1
 8009ab4:	4629      	mov	r1, r5
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f7ff ffa6 	bl	8009a08 <sbrk_aligned>
 8009abc:	3001      	adds	r0, #1
 8009abe:	d03a      	beq.n	8009b36 <_malloc_r+0xea>
 8009ac0:	6823      	ldr	r3, [r4, #0]
 8009ac2:	442b      	add	r3, r5
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	bb62      	cbnz	r2, 8009b28 <_malloc_r+0xdc>
 8009ace:	f8c8 7000 	str.w	r7, [r8]
 8009ad2:	e00f      	b.n	8009af4 <_malloc_r+0xa8>
 8009ad4:	6822      	ldr	r2, [r4, #0]
 8009ad6:	1b52      	subs	r2, r2, r5
 8009ad8:	d420      	bmi.n	8009b1c <_malloc_r+0xd0>
 8009ada:	2a0b      	cmp	r2, #11
 8009adc:	d917      	bls.n	8009b0e <_malloc_r+0xc2>
 8009ade:	1961      	adds	r1, r4, r5
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	6025      	str	r5, [r4, #0]
 8009ae4:	bf18      	it	ne
 8009ae6:	6059      	strne	r1, [r3, #4]
 8009ae8:	6863      	ldr	r3, [r4, #4]
 8009aea:	bf08      	it	eq
 8009aec:	f8c8 1000 	streq.w	r1, [r8]
 8009af0:	5162      	str	r2, [r4, r5]
 8009af2:	604b      	str	r3, [r1, #4]
 8009af4:	4630      	mov	r0, r6
 8009af6:	f000 f82f 	bl	8009b58 <__malloc_unlock>
 8009afa:	f104 000b 	add.w	r0, r4, #11
 8009afe:	1d23      	adds	r3, r4, #4
 8009b00:	f020 0007 	bic.w	r0, r0, #7
 8009b04:	1ac2      	subs	r2, r0, r3
 8009b06:	bf1c      	itt	ne
 8009b08:	1a1b      	subne	r3, r3, r0
 8009b0a:	50a3      	strne	r3, [r4, r2]
 8009b0c:	e7af      	b.n	8009a6e <_malloc_r+0x22>
 8009b0e:	6862      	ldr	r2, [r4, #4]
 8009b10:	42a3      	cmp	r3, r4
 8009b12:	bf0c      	ite	eq
 8009b14:	f8c8 2000 	streq.w	r2, [r8]
 8009b18:	605a      	strne	r2, [r3, #4]
 8009b1a:	e7eb      	b.n	8009af4 <_malloc_r+0xa8>
 8009b1c:	4623      	mov	r3, r4
 8009b1e:	6864      	ldr	r4, [r4, #4]
 8009b20:	e7ae      	b.n	8009a80 <_malloc_r+0x34>
 8009b22:	463c      	mov	r4, r7
 8009b24:	687f      	ldr	r7, [r7, #4]
 8009b26:	e7b6      	b.n	8009a96 <_malloc_r+0x4a>
 8009b28:	461a      	mov	r2, r3
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	42a3      	cmp	r3, r4
 8009b2e:	d1fb      	bne.n	8009b28 <_malloc_r+0xdc>
 8009b30:	2300      	movs	r3, #0
 8009b32:	6053      	str	r3, [r2, #4]
 8009b34:	e7de      	b.n	8009af4 <_malloc_r+0xa8>
 8009b36:	230c      	movs	r3, #12
 8009b38:	6033      	str	r3, [r6, #0]
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f000 f80c 	bl	8009b58 <__malloc_unlock>
 8009b40:	e794      	b.n	8009a6c <_malloc_r+0x20>
 8009b42:	6005      	str	r5, [r0, #0]
 8009b44:	e7d6      	b.n	8009af4 <_malloc_r+0xa8>
 8009b46:	bf00      	nop
 8009b48:	20008980 	.word	0x20008980

08009b4c <__malloc_lock>:
 8009b4c:	4801      	ldr	r0, [pc, #4]	@ (8009b54 <__malloc_lock+0x8>)
 8009b4e:	f7ff bf0f 	b.w	8009970 <__retarget_lock_acquire_recursive>
 8009b52:	bf00      	nop
 8009b54:	20008978 	.word	0x20008978

08009b58 <__malloc_unlock>:
 8009b58:	4801      	ldr	r0, [pc, #4]	@ (8009b60 <__malloc_unlock+0x8>)
 8009b5a:	f7ff bf0a 	b.w	8009972 <__retarget_lock_release_recursive>
 8009b5e:	bf00      	nop
 8009b60:	20008978 	.word	0x20008978

08009b64 <__ssputs_r>:
 8009b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b68:	688e      	ldr	r6, [r1, #8]
 8009b6a:	461f      	mov	r7, r3
 8009b6c:	42be      	cmp	r6, r7
 8009b6e:	680b      	ldr	r3, [r1, #0]
 8009b70:	4682      	mov	sl, r0
 8009b72:	460c      	mov	r4, r1
 8009b74:	4690      	mov	r8, r2
 8009b76:	d82d      	bhi.n	8009bd4 <__ssputs_r+0x70>
 8009b78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b80:	d026      	beq.n	8009bd0 <__ssputs_r+0x6c>
 8009b82:	6965      	ldr	r5, [r4, #20]
 8009b84:	6909      	ldr	r1, [r1, #16]
 8009b86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b8a:	eba3 0901 	sub.w	r9, r3, r1
 8009b8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b92:	1c7b      	adds	r3, r7, #1
 8009b94:	444b      	add	r3, r9
 8009b96:	106d      	asrs	r5, r5, #1
 8009b98:	429d      	cmp	r5, r3
 8009b9a:	bf38      	it	cc
 8009b9c:	461d      	movcc	r5, r3
 8009b9e:	0553      	lsls	r3, r2, #21
 8009ba0:	d527      	bpl.n	8009bf2 <__ssputs_r+0x8e>
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	f7ff ff52 	bl	8009a4c <_malloc_r>
 8009ba8:	4606      	mov	r6, r0
 8009baa:	b360      	cbz	r0, 8009c06 <__ssputs_r+0xa2>
 8009bac:	6921      	ldr	r1, [r4, #16]
 8009bae:	464a      	mov	r2, r9
 8009bb0:	f000 fae6 	bl	800a180 <memcpy>
 8009bb4:	89a3      	ldrh	r3, [r4, #12]
 8009bb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bbe:	81a3      	strh	r3, [r4, #12]
 8009bc0:	6126      	str	r6, [r4, #16]
 8009bc2:	6165      	str	r5, [r4, #20]
 8009bc4:	444e      	add	r6, r9
 8009bc6:	eba5 0509 	sub.w	r5, r5, r9
 8009bca:	6026      	str	r6, [r4, #0]
 8009bcc:	60a5      	str	r5, [r4, #8]
 8009bce:	463e      	mov	r6, r7
 8009bd0:	42be      	cmp	r6, r7
 8009bd2:	d900      	bls.n	8009bd6 <__ssputs_r+0x72>
 8009bd4:	463e      	mov	r6, r7
 8009bd6:	6820      	ldr	r0, [r4, #0]
 8009bd8:	4632      	mov	r2, r6
 8009bda:	4641      	mov	r1, r8
 8009bdc:	f000 faa6 	bl	800a12c <memmove>
 8009be0:	68a3      	ldr	r3, [r4, #8]
 8009be2:	1b9b      	subs	r3, r3, r6
 8009be4:	60a3      	str	r3, [r4, #8]
 8009be6:	6823      	ldr	r3, [r4, #0]
 8009be8:	4433      	add	r3, r6
 8009bea:	6023      	str	r3, [r4, #0]
 8009bec:	2000      	movs	r0, #0
 8009bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf2:	462a      	mov	r2, r5
 8009bf4:	f000 fad2 	bl	800a19c <_realloc_r>
 8009bf8:	4606      	mov	r6, r0
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d1e0      	bne.n	8009bc0 <__ssputs_r+0x5c>
 8009bfe:	6921      	ldr	r1, [r4, #16]
 8009c00:	4650      	mov	r0, sl
 8009c02:	f7ff feb7 	bl	8009974 <_free_r>
 8009c06:	230c      	movs	r3, #12
 8009c08:	f8ca 3000 	str.w	r3, [sl]
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c12:	81a3      	strh	r3, [r4, #12]
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295
 8009c18:	e7e9      	b.n	8009bee <__ssputs_r+0x8a>
	...

08009c1c <_svfiprintf_r>:
 8009c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c20:	4698      	mov	r8, r3
 8009c22:	898b      	ldrh	r3, [r1, #12]
 8009c24:	061b      	lsls	r3, r3, #24
 8009c26:	b09d      	sub	sp, #116	@ 0x74
 8009c28:	4607      	mov	r7, r0
 8009c2a:	460d      	mov	r5, r1
 8009c2c:	4614      	mov	r4, r2
 8009c2e:	d510      	bpl.n	8009c52 <_svfiprintf_r+0x36>
 8009c30:	690b      	ldr	r3, [r1, #16]
 8009c32:	b973      	cbnz	r3, 8009c52 <_svfiprintf_r+0x36>
 8009c34:	2140      	movs	r1, #64	@ 0x40
 8009c36:	f7ff ff09 	bl	8009a4c <_malloc_r>
 8009c3a:	6028      	str	r0, [r5, #0]
 8009c3c:	6128      	str	r0, [r5, #16]
 8009c3e:	b930      	cbnz	r0, 8009c4e <_svfiprintf_r+0x32>
 8009c40:	230c      	movs	r3, #12
 8009c42:	603b      	str	r3, [r7, #0]
 8009c44:	f04f 30ff 	mov.w	r0, #4294967295
 8009c48:	b01d      	add	sp, #116	@ 0x74
 8009c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4e:	2340      	movs	r3, #64	@ 0x40
 8009c50:	616b      	str	r3, [r5, #20]
 8009c52:	2300      	movs	r3, #0
 8009c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c56:	2320      	movs	r3, #32
 8009c58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c60:	2330      	movs	r3, #48	@ 0x30
 8009c62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009e00 <_svfiprintf_r+0x1e4>
 8009c66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c6a:	f04f 0901 	mov.w	r9, #1
 8009c6e:	4623      	mov	r3, r4
 8009c70:	469a      	mov	sl, r3
 8009c72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c76:	b10a      	cbz	r2, 8009c7c <_svfiprintf_r+0x60>
 8009c78:	2a25      	cmp	r2, #37	@ 0x25
 8009c7a:	d1f9      	bne.n	8009c70 <_svfiprintf_r+0x54>
 8009c7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009c80:	d00b      	beq.n	8009c9a <_svfiprintf_r+0x7e>
 8009c82:	465b      	mov	r3, fp
 8009c84:	4622      	mov	r2, r4
 8009c86:	4629      	mov	r1, r5
 8009c88:	4638      	mov	r0, r7
 8009c8a:	f7ff ff6b 	bl	8009b64 <__ssputs_r>
 8009c8e:	3001      	adds	r0, #1
 8009c90:	f000 80a7 	beq.w	8009de2 <_svfiprintf_r+0x1c6>
 8009c94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c96:	445a      	add	r2, fp
 8009c98:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f000 809f 	beq.w	8009de2 <_svfiprintf_r+0x1c6>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8009caa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cae:	f10a 0a01 	add.w	sl, sl, #1
 8009cb2:	9304      	str	r3, [sp, #16]
 8009cb4:	9307      	str	r3, [sp, #28]
 8009cb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cba:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cbc:	4654      	mov	r4, sl
 8009cbe:	2205      	movs	r2, #5
 8009cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cc4:	484e      	ldr	r0, [pc, #312]	@ (8009e00 <_svfiprintf_r+0x1e4>)
 8009cc6:	f7f6 fab3 	bl	8000230 <memchr>
 8009cca:	9a04      	ldr	r2, [sp, #16]
 8009ccc:	b9d8      	cbnz	r0, 8009d06 <_svfiprintf_r+0xea>
 8009cce:	06d0      	lsls	r0, r2, #27
 8009cd0:	bf44      	itt	mi
 8009cd2:	2320      	movmi	r3, #32
 8009cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cd8:	0711      	lsls	r1, r2, #28
 8009cda:	bf44      	itt	mi
 8009cdc:	232b      	movmi	r3, #43	@ 0x2b
 8009cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ce6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ce8:	d015      	beq.n	8009d16 <_svfiprintf_r+0xfa>
 8009cea:	9a07      	ldr	r2, [sp, #28]
 8009cec:	4654      	mov	r4, sl
 8009cee:	2000      	movs	r0, #0
 8009cf0:	f04f 0c0a 	mov.w	ip, #10
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cfa:	3b30      	subs	r3, #48	@ 0x30
 8009cfc:	2b09      	cmp	r3, #9
 8009cfe:	d94b      	bls.n	8009d98 <_svfiprintf_r+0x17c>
 8009d00:	b1b0      	cbz	r0, 8009d30 <_svfiprintf_r+0x114>
 8009d02:	9207      	str	r2, [sp, #28]
 8009d04:	e014      	b.n	8009d30 <_svfiprintf_r+0x114>
 8009d06:	eba0 0308 	sub.w	r3, r0, r8
 8009d0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	9304      	str	r3, [sp, #16]
 8009d12:	46a2      	mov	sl, r4
 8009d14:	e7d2      	b.n	8009cbc <_svfiprintf_r+0xa0>
 8009d16:	9b03      	ldr	r3, [sp, #12]
 8009d18:	1d19      	adds	r1, r3, #4
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	9103      	str	r1, [sp, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	bfbb      	ittet	lt
 8009d22:	425b      	neglt	r3, r3
 8009d24:	f042 0202 	orrlt.w	r2, r2, #2
 8009d28:	9307      	strge	r3, [sp, #28]
 8009d2a:	9307      	strlt	r3, [sp, #28]
 8009d2c:	bfb8      	it	lt
 8009d2e:	9204      	strlt	r2, [sp, #16]
 8009d30:	7823      	ldrb	r3, [r4, #0]
 8009d32:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d34:	d10a      	bne.n	8009d4c <_svfiprintf_r+0x130>
 8009d36:	7863      	ldrb	r3, [r4, #1]
 8009d38:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d3a:	d132      	bne.n	8009da2 <_svfiprintf_r+0x186>
 8009d3c:	9b03      	ldr	r3, [sp, #12]
 8009d3e:	1d1a      	adds	r2, r3, #4
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	9203      	str	r2, [sp, #12]
 8009d44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d48:	3402      	adds	r4, #2
 8009d4a:	9305      	str	r3, [sp, #20]
 8009d4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009e10 <_svfiprintf_r+0x1f4>
 8009d50:	7821      	ldrb	r1, [r4, #0]
 8009d52:	2203      	movs	r2, #3
 8009d54:	4650      	mov	r0, sl
 8009d56:	f7f6 fa6b 	bl	8000230 <memchr>
 8009d5a:	b138      	cbz	r0, 8009d6c <_svfiprintf_r+0x150>
 8009d5c:	9b04      	ldr	r3, [sp, #16]
 8009d5e:	eba0 000a 	sub.w	r0, r0, sl
 8009d62:	2240      	movs	r2, #64	@ 0x40
 8009d64:	4082      	lsls	r2, r0
 8009d66:	4313      	orrs	r3, r2
 8009d68:	3401      	adds	r4, #1
 8009d6a:	9304      	str	r3, [sp, #16]
 8009d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d70:	4824      	ldr	r0, [pc, #144]	@ (8009e04 <_svfiprintf_r+0x1e8>)
 8009d72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d76:	2206      	movs	r2, #6
 8009d78:	f7f6 fa5a 	bl	8000230 <memchr>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d036      	beq.n	8009dee <_svfiprintf_r+0x1d2>
 8009d80:	4b21      	ldr	r3, [pc, #132]	@ (8009e08 <_svfiprintf_r+0x1ec>)
 8009d82:	bb1b      	cbnz	r3, 8009dcc <_svfiprintf_r+0x1b0>
 8009d84:	9b03      	ldr	r3, [sp, #12]
 8009d86:	3307      	adds	r3, #7
 8009d88:	f023 0307 	bic.w	r3, r3, #7
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	9303      	str	r3, [sp, #12]
 8009d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d92:	4433      	add	r3, r6
 8009d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d96:	e76a      	b.n	8009c6e <_svfiprintf_r+0x52>
 8009d98:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	2001      	movs	r0, #1
 8009da0:	e7a8      	b.n	8009cf4 <_svfiprintf_r+0xd8>
 8009da2:	2300      	movs	r3, #0
 8009da4:	3401      	adds	r4, #1
 8009da6:	9305      	str	r3, [sp, #20]
 8009da8:	4619      	mov	r1, r3
 8009daa:	f04f 0c0a 	mov.w	ip, #10
 8009dae:	4620      	mov	r0, r4
 8009db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009db4:	3a30      	subs	r2, #48	@ 0x30
 8009db6:	2a09      	cmp	r2, #9
 8009db8:	d903      	bls.n	8009dc2 <_svfiprintf_r+0x1a6>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0c6      	beq.n	8009d4c <_svfiprintf_r+0x130>
 8009dbe:	9105      	str	r1, [sp, #20]
 8009dc0:	e7c4      	b.n	8009d4c <_svfiprintf_r+0x130>
 8009dc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e7f0      	b.n	8009dae <_svfiprintf_r+0x192>
 8009dcc:	ab03      	add	r3, sp, #12
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	462a      	mov	r2, r5
 8009dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8009e0c <_svfiprintf_r+0x1f0>)
 8009dd4:	a904      	add	r1, sp, #16
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	f3af 8000 	nop.w
 8009ddc:	1c42      	adds	r2, r0, #1
 8009dde:	4606      	mov	r6, r0
 8009de0:	d1d6      	bne.n	8009d90 <_svfiprintf_r+0x174>
 8009de2:	89ab      	ldrh	r3, [r5, #12]
 8009de4:	065b      	lsls	r3, r3, #25
 8009de6:	f53f af2d 	bmi.w	8009c44 <_svfiprintf_r+0x28>
 8009dea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dec:	e72c      	b.n	8009c48 <_svfiprintf_r+0x2c>
 8009dee:	ab03      	add	r3, sp, #12
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	462a      	mov	r2, r5
 8009df4:	4b05      	ldr	r3, [pc, #20]	@ (8009e0c <_svfiprintf_r+0x1f0>)
 8009df6:	a904      	add	r1, sp, #16
 8009df8:	4638      	mov	r0, r7
 8009dfa:	f000 f879 	bl	8009ef0 <_printf_i>
 8009dfe:	e7ed      	b.n	8009ddc <_svfiprintf_r+0x1c0>
 8009e00:	0800a268 	.word	0x0800a268
 8009e04:	0800a272 	.word	0x0800a272
 8009e08:	00000000 	.word	0x00000000
 8009e0c:	08009b65 	.word	0x08009b65
 8009e10:	0800a26e 	.word	0x0800a26e

08009e14 <_printf_common>:
 8009e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e18:	4616      	mov	r6, r2
 8009e1a:	4698      	mov	r8, r3
 8009e1c:	688a      	ldr	r2, [r1, #8]
 8009e1e:	690b      	ldr	r3, [r1, #16]
 8009e20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e24:	4293      	cmp	r3, r2
 8009e26:	bfb8      	it	lt
 8009e28:	4613      	movlt	r3, r2
 8009e2a:	6033      	str	r3, [r6, #0]
 8009e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e30:	4607      	mov	r7, r0
 8009e32:	460c      	mov	r4, r1
 8009e34:	b10a      	cbz	r2, 8009e3a <_printf_common+0x26>
 8009e36:	3301      	adds	r3, #1
 8009e38:	6033      	str	r3, [r6, #0]
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	0699      	lsls	r1, r3, #26
 8009e3e:	bf42      	ittt	mi
 8009e40:	6833      	ldrmi	r3, [r6, #0]
 8009e42:	3302      	addmi	r3, #2
 8009e44:	6033      	strmi	r3, [r6, #0]
 8009e46:	6825      	ldr	r5, [r4, #0]
 8009e48:	f015 0506 	ands.w	r5, r5, #6
 8009e4c:	d106      	bne.n	8009e5c <_printf_common+0x48>
 8009e4e:	f104 0a19 	add.w	sl, r4, #25
 8009e52:	68e3      	ldr	r3, [r4, #12]
 8009e54:	6832      	ldr	r2, [r6, #0]
 8009e56:	1a9b      	subs	r3, r3, r2
 8009e58:	42ab      	cmp	r3, r5
 8009e5a:	dc26      	bgt.n	8009eaa <_printf_common+0x96>
 8009e5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e60:	6822      	ldr	r2, [r4, #0]
 8009e62:	3b00      	subs	r3, #0
 8009e64:	bf18      	it	ne
 8009e66:	2301      	movne	r3, #1
 8009e68:	0692      	lsls	r2, r2, #26
 8009e6a:	d42b      	bmi.n	8009ec4 <_printf_common+0xb0>
 8009e6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e70:	4641      	mov	r1, r8
 8009e72:	4638      	mov	r0, r7
 8009e74:	47c8      	blx	r9
 8009e76:	3001      	adds	r0, #1
 8009e78:	d01e      	beq.n	8009eb8 <_printf_common+0xa4>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	6922      	ldr	r2, [r4, #16]
 8009e7e:	f003 0306 	and.w	r3, r3, #6
 8009e82:	2b04      	cmp	r3, #4
 8009e84:	bf02      	ittt	eq
 8009e86:	68e5      	ldreq	r5, [r4, #12]
 8009e88:	6833      	ldreq	r3, [r6, #0]
 8009e8a:	1aed      	subeq	r5, r5, r3
 8009e8c:	68a3      	ldr	r3, [r4, #8]
 8009e8e:	bf0c      	ite	eq
 8009e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e94:	2500      	movne	r5, #0
 8009e96:	4293      	cmp	r3, r2
 8009e98:	bfc4      	itt	gt
 8009e9a:	1a9b      	subgt	r3, r3, r2
 8009e9c:	18ed      	addgt	r5, r5, r3
 8009e9e:	2600      	movs	r6, #0
 8009ea0:	341a      	adds	r4, #26
 8009ea2:	42b5      	cmp	r5, r6
 8009ea4:	d11a      	bne.n	8009edc <_printf_common+0xc8>
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	e008      	b.n	8009ebc <_printf_common+0xa8>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	4652      	mov	r2, sl
 8009eae:	4641      	mov	r1, r8
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	47c8      	blx	r9
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	d103      	bne.n	8009ec0 <_printf_common+0xac>
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec0:	3501      	adds	r5, #1
 8009ec2:	e7c6      	b.n	8009e52 <_printf_common+0x3e>
 8009ec4:	18e1      	adds	r1, r4, r3
 8009ec6:	1c5a      	adds	r2, r3, #1
 8009ec8:	2030      	movs	r0, #48	@ 0x30
 8009eca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ece:	4422      	add	r2, r4
 8009ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ed4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ed8:	3302      	adds	r3, #2
 8009eda:	e7c7      	b.n	8009e6c <_printf_common+0x58>
 8009edc:	2301      	movs	r3, #1
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4641      	mov	r1, r8
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	47c8      	blx	r9
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d0e6      	beq.n	8009eb8 <_printf_common+0xa4>
 8009eea:	3601      	adds	r6, #1
 8009eec:	e7d9      	b.n	8009ea2 <_printf_common+0x8e>
	...

08009ef0 <_printf_i>:
 8009ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef4:	7e0f      	ldrb	r7, [r1, #24]
 8009ef6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ef8:	2f78      	cmp	r7, #120	@ 0x78
 8009efa:	4691      	mov	r9, r2
 8009efc:	4680      	mov	r8, r0
 8009efe:	460c      	mov	r4, r1
 8009f00:	469a      	mov	sl, r3
 8009f02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f06:	d807      	bhi.n	8009f18 <_printf_i+0x28>
 8009f08:	2f62      	cmp	r7, #98	@ 0x62
 8009f0a:	d80a      	bhi.n	8009f22 <_printf_i+0x32>
 8009f0c:	2f00      	cmp	r7, #0
 8009f0e:	f000 80d1 	beq.w	800a0b4 <_printf_i+0x1c4>
 8009f12:	2f58      	cmp	r7, #88	@ 0x58
 8009f14:	f000 80b8 	beq.w	800a088 <_printf_i+0x198>
 8009f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f20:	e03a      	b.n	8009f98 <_printf_i+0xa8>
 8009f22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f26:	2b15      	cmp	r3, #21
 8009f28:	d8f6      	bhi.n	8009f18 <_printf_i+0x28>
 8009f2a:	a101      	add	r1, pc, #4	@ (adr r1, 8009f30 <_printf_i+0x40>)
 8009f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f30:	08009f89 	.word	0x08009f89
 8009f34:	08009f9d 	.word	0x08009f9d
 8009f38:	08009f19 	.word	0x08009f19
 8009f3c:	08009f19 	.word	0x08009f19
 8009f40:	08009f19 	.word	0x08009f19
 8009f44:	08009f19 	.word	0x08009f19
 8009f48:	08009f9d 	.word	0x08009f9d
 8009f4c:	08009f19 	.word	0x08009f19
 8009f50:	08009f19 	.word	0x08009f19
 8009f54:	08009f19 	.word	0x08009f19
 8009f58:	08009f19 	.word	0x08009f19
 8009f5c:	0800a09b 	.word	0x0800a09b
 8009f60:	08009fc7 	.word	0x08009fc7
 8009f64:	0800a055 	.word	0x0800a055
 8009f68:	08009f19 	.word	0x08009f19
 8009f6c:	08009f19 	.word	0x08009f19
 8009f70:	0800a0bd 	.word	0x0800a0bd
 8009f74:	08009f19 	.word	0x08009f19
 8009f78:	08009fc7 	.word	0x08009fc7
 8009f7c:	08009f19 	.word	0x08009f19
 8009f80:	08009f19 	.word	0x08009f19
 8009f84:	0800a05d 	.word	0x0800a05d
 8009f88:	6833      	ldr	r3, [r6, #0]
 8009f8a:	1d1a      	adds	r2, r3, #4
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6032      	str	r2, [r6, #0]
 8009f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e09c      	b.n	800a0d6 <_printf_i+0x1e6>
 8009f9c:	6833      	ldr	r3, [r6, #0]
 8009f9e:	6820      	ldr	r0, [r4, #0]
 8009fa0:	1d19      	adds	r1, r3, #4
 8009fa2:	6031      	str	r1, [r6, #0]
 8009fa4:	0606      	lsls	r6, r0, #24
 8009fa6:	d501      	bpl.n	8009fac <_printf_i+0xbc>
 8009fa8:	681d      	ldr	r5, [r3, #0]
 8009faa:	e003      	b.n	8009fb4 <_printf_i+0xc4>
 8009fac:	0645      	lsls	r5, r0, #25
 8009fae:	d5fb      	bpl.n	8009fa8 <_printf_i+0xb8>
 8009fb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009fb4:	2d00      	cmp	r5, #0
 8009fb6:	da03      	bge.n	8009fc0 <_printf_i+0xd0>
 8009fb8:	232d      	movs	r3, #45	@ 0x2d
 8009fba:	426d      	negs	r5, r5
 8009fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fc0:	4858      	ldr	r0, [pc, #352]	@ (800a124 <_printf_i+0x234>)
 8009fc2:	230a      	movs	r3, #10
 8009fc4:	e011      	b.n	8009fea <_printf_i+0xfa>
 8009fc6:	6821      	ldr	r1, [r4, #0]
 8009fc8:	6833      	ldr	r3, [r6, #0]
 8009fca:	0608      	lsls	r0, r1, #24
 8009fcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009fd0:	d402      	bmi.n	8009fd8 <_printf_i+0xe8>
 8009fd2:	0649      	lsls	r1, r1, #25
 8009fd4:	bf48      	it	mi
 8009fd6:	b2ad      	uxthmi	r5, r5
 8009fd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009fda:	4852      	ldr	r0, [pc, #328]	@ (800a124 <_printf_i+0x234>)
 8009fdc:	6033      	str	r3, [r6, #0]
 8009fde:	bf14      	ite	ne
 8009fe0:	230a      	movne	r3, #10
 8009fe2:	2308      	moveq	r3, #8
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009fea:	6866      	ldr	r6, [r4, #4]
 8009fec:	60a6      	str	r6, [r4, #8]
 8009fee:	2e00      	cmp	r6, #0
 8009ff0:	db05      	blt.n	8009ffe <_printf_i+0x10e>
 8009ff2:	6821      	ldr	r1, [r4, #0]
 8009ff4:	432e      	orrs	r6, r5
 8009ff6:	f021 0104 	bic.w	r1, r1, #4
 8009ffa:	6021      	str	r1, [r4, #0]
 8009ffc:	d04b      	beq.n	800a096 <_printf_i+0x1a6>
 8009ffe:	4616      	mov	r6, r2
 800a000:	fbb5 f1f3 	udiv	r1, r5, r3
 800a004:	fb03 5711 	mls	r7, r3, r1, r5
 800a008:	5dc7      	ldrb	r7, [r0, r7]
 800a00a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a00e:	462f      	mov	r7, r5
 800a010:	42bb      	cmp	r3, r7
 800a012:	460d      	mov	r5, r1
 800a014:	d9f4      	bls.n	800a000 <_printf_i+0x110>
 800a016:	2b08      	cmp	r3, #8
 800a018:	d10b      	bne.n	800a032 <_printf_i+0x142>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	07df      	lsls	r7, r3, #31
 800a01e:	d508      	bpl.n	800a032 <_printf_i+0x142>
 800a020:	6923      	ldr	r3, [r4, #16]
 800a022:	6861      	ldr	r1, [r4, #4]
 800a024:	4299      	cmp	r1, r3
 800a026:	bfde      	ittt	le
 800a028:	2330      	movle	r3, #48	@ 0x30
 800a02a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a02e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a032:	1b92      	subs	r2, r2, r6
 800a034:	6122      	str	r2, [r4, #16]
 800a036:	f8cd a000 	str.w	sl, [sp]
 800a03a:	464b      	mov	r3, r9
 800a03c:	aa03      	add	r2, sp, #12
 800a03e:	4621      	mov	r1, r4
 800a040:	4640      	mov	r0, r8
 800a042:	f7ff fee7 	bl	8009e14 <_printf_common>
 800a046:	3001      	adds	r0, #1
 800a048:	d14a      	bne.n	800a0e0 <_printf_i+0x1f0>
 800a04a:	f04f 30ff 	mov.w	r0, #4294967295
 800a04e:	b004      	add	sp, #16
 800a050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	f043 0320 	orr.w	r3, r3, #32
 800a05a:	6023      	str	r3, [r4, #0]
 800a05c:	4832      	ldr	r0, [pc, #200]	@ (800a128 <_printf_i+0x238>)
 800a05e:	2778      	movs	r7, #120	@ 0x78
 800a060:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	6831      	ldr	r1, [r6, #0]
 800a068:	061f      	lsls	r7, r3, #24
 800a06a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a06e:	d402      	bmi.n	800a076 <_printf_i+0x186>
 800a070:	065f      	lsls	r7, r3, #25
 800a072:	bf48      	it	mi
 800a074:	b2ad      	uxthmi	r5, r5
 800a076:	6031      	str	r1, [r6, #0]
 800a078:	07d9      	lsls	r1, r3, #31
 800a07a:	bf44      	itt	mi
 800a07c:	f043 0320 	orrmi.w	r3, r3, #32
 800a080:	6023      	strmi	r3, [r4, #0]
 800a082:	b11d      	cbz	r5, 800a08c <_printf_i+0x19c>
 800a084:	2310      	movs	r3, #16
 800a086:	e7ad      	b.n	8009fe4 <_printf_i+0xf4>
 800a088:	4826      	ldr	r0, [pc, #152]	@ (800a124 <_printf_i+0x234>)
 800a08a:	e7e9      	b.n	800a060 <_printf_i+0x170>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	f023 0320 	bic.w	r3, r3, #32
 800a092:	6023      	str	r3, [r4, #0]
 800a094:	e7f6      	b.n	800a084 <_printf_i+0x194>
 800a096:	4616      	mov	r6, r2
 800a098:	e7bd      	b.n	800a016 <_printf_i+0x126>
 800a09a:	6833      	ldr	r3, [r6, #0]
 800a09c:	6825      	ldr	r5, [r4, #0]
 800a09e:	6961      	ldr	r1, [r4, #20]
 800a0a0:	1d18      	adds	r0, r3, #4
 800a0a2:	6030      	str	r0, [r6, #0]
 800a0a4:	062e      	lsls	r6, r5, #24
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	d501      	bpl.n	800a0ae <_printf_i+0x1be>
 800a0aa:	6019      	str	r1, [r3, #0]
 800a0ac:	e002      	b.n	800a0b4 <_printf_i+0x1c4>
 800a0ae:	0668      	lsls	r0, r5, #25
 800a0b0:	d5fb      	bpl.n	800a0aa <_printf_i+0x1ba>
 800a0b2:	8019      	strh	r1, [r3, #0]
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	6123      	str	r3, [r4, #16]
 800a0b8:	4616      	mov	r6, r2
 800a0ba:	e7bc      	b.n	800a036 <_printf_i+0x146>
 800a0bc:	6833      	ldr	r3, [r6, #0]
 800a0be:	1d1a      	adds	r2, r3, #4
 800a0c0:	6032      	str	r2, [r6, #0]
 800a0c2:	681e      	ldr	r6, [r3, #0]
 800a0c4:	6862      	ldr	r2, [r4, #4]
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f7f6 f8b1 	bl	8000230 <memchr>
 800a0ce:	b108      	cbz	r0, 800a0d4 <_printf_i+0x1e4>
 800a0d0:	1b80      	subs	r0, r0, r6
 800a0d2:	6060      	str	r0, [r4, #4]
 800a0d4:	6863      	ldr	r3, [r4, #4]
 800a0d6:	6123      	str	r3, [r4, #16]
 800a0d8:	2300      	movs	r3, #0
 800a0da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0de:	e7aa      	b.n	800a036 <_printf_i+0x146>
 800a0e0:	6923      	ldr	r3, [r4, #16]
 800a0e2:	4632      	mov	r2, r6
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	4640      	mov	r0, r8
 800a0e8:	47d0      	blx	sl
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	d0ad      	beq.n	800a04a <_printf_i+0x15a>
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	079b      	lsls	r3, r3, #30
 800a0f2:	d413      	bmi.n	800a11c <_printf_i+0x22c>
 800a0f4:	68e0      	ldr	r0, [r4, #12]
 800a0f6:	9b03      	ldr	r3, [sp, #12]
 800a0f8:	4298      	cmp	r0, r3
 800a0fa:	bfb8      	it	lt
 800a0fc:	4618      	movlt	r0, r3
 800a0fe:	e7a6      	b.n	800a04e <_printf_i+0x15e>
 800a100:	2301      	movs	r3, #1
 800a102:	4632      	mov	r2, r6
 800a104:	4649      	mov	r1, r9
 800a106:	4640      	mov	r0, r8
 800a108:	47d0      	blx	sl
 800a10a:	3001      	adds	r0, #1
 800a10c:	d09d      	beq.n	800a04a <_printf_i+0x15a>
 800a10e:	3501      	adds	r5, #1
 800a110:	68e3      	ldr	r3, [r4, #12]
 800a112:	9903      	ldr	r1, [sp, #12]
 800a114:	1a5b      	subs	r3, r3, r1
 800a116:	42ab      	cmp	r3, r5
 800a118:	dcf2      	bgt.n	800a100 <_printf_i+0x210>
 800a11a:	e7eb      	b.n	800a0f4 <_printf_i+0x204>
 800a11c:	2500      	movs	r5, #0
 800a11e:	f104 0619 	add.w	r6, r4, #25
 800a122:	e7f5      	b.n	800a110 <_printf_i+0x220>
 800a124:	0800a279 	.word	0x0800a279
 800a128:	0800a28a 	.word	0x0800a28a

0800a12c <memmove>:
 800a12c:	4288      	cmp	r0, r1
 800a12e:	b510      	push	{r4, lr}
 800a130:	eb01 0402 	add.w	r4, r1, r2
 800a134:	d902      	bls.n	800a13c <memmove+0x10>
 800a136:	4284      	cmp	r4, r0
 800a138:	4623      	mov	r3, r4
 800a13a:	d807      	bhi.n	800a14c <memmove+0x20>
 800a13c:	1e43      	subs	r3, r0, #1
 800a13e:	42a1      	cmp	r1, r4
 800a140:	d008      	beq.n	800a154 <memmove+0x28>
 800a142:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a14a:	e7f8      	b.n	800a13e <memmove+0x12>
 800a14c:	4402      	add	r2, r0
 800a14e:	4601      	mov	r1, r0
 800a150:	428a      	cmp	r2, r1
 800a152:	d100      	bne.n	800a156 <memmove+0x2a>
 800a154:	bd10      	pop	{r4, pc}
 800a156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a15a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a15e:	e7f7      	b.n	800a150 <memmove+0x24>

0800a160 <_sbrk_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4d06      	ldr	r5, [pc, #24]	@ (800a17c <_sbrk_r+0x1c>)
 800a164:	2300      	movs	r3, #0
 800a166:	4604      	mov	r4, r0
 800a168:	4608      	mov	r0, r1
 800a16a:	602b      	str	r3, [r5, #0]
 800a16c:	f7f8 fdda 	bl	8002d24 <_sbrk>
 800a170:	1c43      	adds	r3, r0, #1
 800a172:	d102      	bne.n	800a17a <_sbrk_r+0x1a>
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	b103      	cbz	r3, 800a17a <_sbrk_r+0x1a>
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	bd38      	pop	{r3, r4, r5, pc}
 800a17c:	20008974 	.word	0x20008974

0800a180 <memcpy>:
 800a180:	440a      	add	r2, r1
 800a182:	4291      	cmp	r1, r2
 800a184:	f100 33ff 	add.w	r3, r0, #4294967295
 800a188:	d100      	bne.n	800a18c <memcpy+0xc>
 800a18a:	4770      	bx	lr
 800a18c:	b510      	push	{r4, lr}
 800a18e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a192:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a196:	4291      	cmp	r1, r2
 800a198:	d1f9      	bne.n	800a18e <memcpy+0xe>
 800a19a:	bd10      	pop	{r4, pc}

0800a19c <_realloc_r>:
 800a19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a0:	4607      	mov	r7, r0
 800a1a2:	4614      	mov	r4, r2
 800a1a4:	460d      	mov	r5, r1
 800a1a6:	b921      	cbnz	r1, 800a1b2 <_realloc_r+0x16>
 800a1a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	f7ff bc4d 	b.w	8009a4c <_malloc_r>
 800a1b2:	b92a      	cbnz	r2, 800a1c0 <_realloc_r+0x24>
 800a1b4:	f7ff fbde 	bl	8009974 <_free_r>
 800a1b8:	4625      	mov	r5, r4
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c0:	f000 f81a 	bl	800a1f8 <_malloc_usable_size_r>
 800a1c4:	4284      	cmp	r4, r0
 800a1c6:	4606      	mov	r6, r0
 800a1c8:	d802      	bhi.n	800a1d0 <_realloc_r+0x34>
 800a1ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1ce:	d8f4      	bhi.n	800a1ba <_realloc_r+0x1e>
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	f7ff fc3a 	bl	8009a4c <_malloc_r>
 800a1d8:	4680      	mov	r8, r0
 800a1da:	b908      	cbnz	r0, 800a1e0 <_realloc_r+0x44>
 800a1dc:	4645      	mov	r5, r8
 800a1de:	e7ec      	b.n	800a1ba <_realloc_r+0x1e>
 800a1e0:	42b4      	cmp	r4, r6
 800a1e2:	4622      	mov	r2, r4
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	bf28      	it	cs
 800a1e8:	4632      	movcs	r2, r6
 800a1ea:	f7ff ffc9 	bl	800a180 <memcpy>
 800a1ee:	4629      	mov	r1, r5
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	f7ff fbbf 	bl	8009974 <_free_r>
 800a1f6:	e7f1      	b.n	800a1dc <_realloc_r+0x40>

0800a1f8 <_malloc_usable_size_r>:
 800a1f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1fc:	1f18      	subs	r0, r3, #4
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	bfbc      	itt	lt
 800a202:	580b      	ldrlt	r3, [r1, r0]
 800a204:	18c0      	addlt	r0, r0, r3
 800a206:	4770      	bx	lr

0800a208 <_init>:
 800a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20a:	bf00      	nop
 800a20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20e:	bc08      	pop	{r3}
 800a210:	469e      	mov	lr, r3
 800a212:	4770      	bx	lr

0800a214 <_fini>:
 800a214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a216:	bf00      	nop
 800a218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a21a:	bc08      	pop	{r3}
 800a21c:	469e      	mov	lr, r3
 800a21e:	4770      	bx	lr
