
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d0c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08009eec  08009eec  0000aeec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f68  08009f68  0000b05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009f68  08009f68  0000af68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f70  08009f70  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f70  08009f70  0000af70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f74  08009f74  0000af74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08009f78  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  2000005c  08009fd4  0000b05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  08009fd4  0000b804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001badb  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f3  00000000  00000000  00026b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  00029c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001301  00000000  00000000  0002b4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024391  00000000  00000000  0002c7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5b5  00000000  00000000  00050b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6a21  00000000  00000000  0006d0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163b18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ee4  00000000  00000000  00163b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0016aa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009ed4 	.word	0x08009ed4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08009ed4 	.word	0x08009ed4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */

uint8_t convCompleted = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]

	convCompleted = 1;
 8000604:	4b04      	ldr	r3, [pc, #16]	@ (8000618 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200006ac 	.word	0x200006ac

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f002 fa54 	bl	8002ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f879 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f001 f93f 	bl	80018ac <MX_GPIO_Init>
  MX_DMA_Init();
 800062e:	f001 f913 	bl	8001858 <MX_DMA_Init>
  MX_ADC2_Init();
 8000632:	f000 f8b3 	bl	800079c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000636:	f000 f947 	bl	80008c8 <MX_ADC3_Init>
  MX_ADC4_Init();
 800063a:	f000 f9bd 	bl	80009b8 <MX_ADC4_Init>
  MX_DAC1_Init();
 800063e:	f000 fa21 	bl	8000a84 <MX_DAC1_Init>
  MX_OPAMP3_Init();
 8000642:	f000 fa63 	bl	8000b0c <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 8000646:	f000 fa89 	bl	8000b5c <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 800064a:	f000 faaf 	bl	8000bac <MX_OPAMP5_Init>
  MX_SPI1_Init();
 800064e:	f000 fad5 	bl	8000bfc <MX_SPI1_Init>
  MX_TIM1_Init();
 8000652:	f000 fb0b 	bl	8000c6c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000656:	f000 fbe3 	bl	8000e20 <MX_TIM2_Init>
  MX_TIM3_Init();
 800065a:	f000 fc59 	bl	8000f10 <MX_TIM3_Init>
  MX_TIM4_Init();
 800065e:	f000 fcbf 	bl	8000fe0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000662:	f000 fd25 	bl	80010b0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000666:	f000 fd9b 	bl	80011a0 <MX_TIM8_Init>
  MX_TIM16_Init();
 800066a:	f000 fe95 	bl	8001398 <MX_TIM16_Init>
  MX_TIM17_Init();
 800066e:	f000 ff25 	bl	80014bc <MX_TIM17_Init>
  MX_TIM20_Init();
 8000672:	f000 ffb5 	bl	80015e0 <MX_TIM20_Init>
  MX_USART1_UART_Init();
 8000676:	f001 f8a3 	bl	80017c0 <MX_USART1_UART_Init>
	  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
	  }
	  HAL_Delay(500);
	  */
	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adc, 4);
 800067a:	2204      	movs	r2, #4
 800067c:	491d      	ldr	r1, [pc, #116]	@ (80006f4 <main+0xd8>)
 800067e:	481e      	ldr	r0, [pc, #120]	@ (80006f8 <main+0xdc>)
 8000680:	f002 feb4 	bl	80033ec <HAL_ADC_Start_DMA>
	  while(!convCompleted);
 8000684:	bf00      	nop
 8000686:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <main+0xe0>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0fb      	beq.n	8000686 <main+0x6a>
	  for (uint8_t i = 0; i < hadc2.Init.NbrOfConversion; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	e012      	b.n	80006ba <main+0x9e>
	  	  {
			  val1 = (uint16_t) adc[0];
 8000694:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <main+0xd8>)
 8000696:	881a      	ldrh	r2, [r3, #0]
 8000698:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <main+0xe4>)
 800069a:	801a      	strh	r2, [r3, #0]
			  val2 = (uint16_t) adc[1];
 800069c:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <main+0xd8>)
 800069e:	885a      	ldrh	r2, [r3, #2]
 80006a0:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <main+0xe8>)
 80006a2:	801a      	strh	r2, [r3, #0]
			  val3 = (uint16_t) adc[2];
 80006a4:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <main+0xd8>)
 80006a6:	889a      	ldrh	r2, [r3, #4]
 80006a8:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <main+0xec>)
 80006aa:	801a      	strh	r2, [r3, #0]
			  val4 = (uint16_t) adc[3];
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <main+0xd8>)
 80006ae:	88da      	ldrh	r2, [r3, #6]
 80006b0:	4b16      	ldr	r3, [pc, #88]	@ (800070c <main+0xf0>)
 80006b2:	801a      	strh	r2, [r3, #0]
	  for (uint8_t i = 0; i < hadc2.Init.NbrOfConversion; i++)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	3301      	adds	r3, #1
 80006b8:	71fb      	strb	r3, [r7, #7]
 80006ba:	79fa      	ldrb	r2, [r7, #7]
 80006bc:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <main+0xdc>)
 80006be:	6a1b      	ldr	r3, [r3, #32]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d3e7      	bcc.n	8000694 <main+0x78>
		  }
	  sprintf(msg, "%hu \r\n", /*val1, val2, val3,*/ val4);
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <main+0xf0>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4911      	ldr	r1, [pc, #68]	@ (8000710 <main+0xf4>)
 80006cc:	4811      	ldr	r0, [pc, #68]	@ (8000714 <main+0xf8>)
 80006ce:	f008 ff61 	bl	8009594 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80006d2:	4810      	ldr	r0, [pc, #64]	@ (8000714 <main+0xf8>)
 80006d4:	f7ff fda4 	bl	8000220 <strlen>
 80006d8:	4603      	mov	r3, r0
 80006da:	b29a      	uxth	r2, r3
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	490c      	ldr	r1, [pc, #48]	@ (8000714 <main+0xf8>)
 80006e2:	480d      	ldr	r0, [pc, #52]	@ (8000718 <main+0xfc>)
 80006e4:	f008 f8aa 	bl	800883c <HAL_UART_Transmit>
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  */
	  HAL_Delay(500);
 80006e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ec:	f002 fa60 	bl	8002bb0 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adc, 4);
 80006f0:	e7c3      	b.n	800067a <main+0x5e>
 80006f2:	bf00      	nop
 80006f4:	20000688 	.word	0x20000688
 80006f8:	20000078 	.word	0x20000078
 80006fc:	200006ac 	.word	0x200006ac
 8000700:	20000690 	.word	0x20000690
 8000704:	20000692 	.word	0x20000692
 8000708:	20000694 	.word	0x20000694
 800070c:	20000696 	.word	0x20000696
 8000710:	08009eec 	.word	0x08009eec
 8000714:	20000698 	.word	0x20000698
 8000718:	200005f4 	.word	0x200005f4

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	@ 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0318 	add.w	r3, r7, #24
 8000726:	2238      	movs	r2, #56	@ 0x38
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f008 ff54 	bl	80095d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000742:	f005 f837 	bl	80057b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000746:	2302      	movs	r3, #2
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2340      	movs	r3, #64	@ 0x40
 8000752:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000754:	2300      	movs	r3, #0
 8000756:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	4618      	mov	r0, r3
 800075e:	f005 f8dd 	bl	800591c <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000768:	f001 f9c2 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000770:	2301      	movs	r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f005 fbdb 	bl	8005f40 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000790:	f001 f9ae 	bl	8001af0 <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3750      	adds	r7, #80	@ 0x50
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	2220      	movs	r2, #32
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f008 ff15 	bl	80095d8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007ae:	4b40      	ldr	r3, [pc, #256]	@ (80008b0 <MX_ADC2_Init+0x114>)
 80007b0:	4a40      	ldr	r2, [pc, #256]	@ (80008b4 <MX_ADC2_Init+0x118>)
 80007b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007b4:	4b3e      	ldr	r3, [pc, #248]	@ (80008b0 <MX_ADC2_Init+0x114>)
 80007b6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007bc:	4b3c      	ldr	r3, [pc, #240]	@ (80008b0 <MX_ADC2_Init+0x114>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c2:	4b3b      	ldr	r3, [pc, #236]	@ (80008b0 <MX_ADC2_Init+0x114>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80007c8:	4b39      	ldr	r3, [pc, #228]	@ (80008b0 <MX_ADC2_Init+0x114>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007ce:	4b38      	ldr	r3, [pc, #224]	@ (80008b0 <MX_ADC2_Init+0x114>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d4:	4b36      	ldr	r3, [pc, #216]	@ (80008b0 <MX_ADC2_Init+0x114>)
 80007d6:	2204      	movs	r2, #4
 80007d8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007da:	4b35      	ldr	r3, [pc, #212]	@ (80008b0 <MX_ADC2_Init+0x114>)
 80007dc:	2200      	movs	r2, #0
 80007de:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007e0:	4b33      	ldr	r3, [pc, #204]	@ (80008b0 <MX_ADC2_Init+0x114>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 80007e6:	4b32      	ldr	r3, [pc, #200]	@ (80008b0 <MX_ADC2_Init+0x114>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007ec:	4b30      	ldr	r3, [pc, #192]	@ (80008b0 <MX_ADC2_Init+0x114>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b2e      	ldr	r3, [pc, #184]	@ (80008b0 <MX_ADC2_Init+0x114>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fa:	4b2d      	ldr	r3, [pc, #180]	@ (80008b0 <MX_ADC2_Init+0x114>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000800:	4b2b      	ldr	r3, [pc, #172]	@ (80008b0 <MX_ADC2_Init+0x114>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000808:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <MX_ADC2_Init+0x114>)
 800080a:	2200      	movs	r2, #0
 800080c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800080e:	4b28      	ldr	r3, [pc, #160]	@ (80008b0 <MX_ADC2_Init+0x114>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000816:	4826      	ldr	r0, [pc, #152]	@ (80008b0 <MX_ADC2_Init+0x114>)
 8000818:	f002 fc2c 	bl	8003074 <HAL_ADC_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000822:	f001 f965 	bl	8001af0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000826:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <MX_ADC2_Init+0x11c>)
 8000828:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800082a:	2306      	movs	r3, #6
 800082c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800082e:	2307      	movs	r3, #7
 8000830:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000832:	237f      	movs	r3, #127	@ 0x7f
 8000834:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000836:	2304      	movs	r3, #4
 8000838:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	4619      	mov	r1, r3
 8000842:	481b      	ldr	r0, [pc, #108]	@ (80008b0 <MX_ADC2_Init+0x114>)
 8000844:	f003 f924 	bl	8003a90 <HAL_ADC_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800084e:	f001 f94f 	bl	8001af0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_ADC2_Init+0x120>)
 8000854:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000856:	230c      	movs	r3, #12
 8000858:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	4619      	mov	r1, r3
 800085e:	4814      	ldr	r0, [pc, #80]	@ (80008b0 <MX_ADC2_Init+0x114>)
 8000860:	f003 f916 	bl	8003a90 <HAL_ADC_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800086a:	f001 f941 	bl	8001af0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_ADC2_Init+0x124>)
 8000870:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000872:	2312      	movs	r3, #18
 8000874:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <MX_ADC2_Init+0x114>)
 800087c:	f003 f908 	bl	8003a90 <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8000886:	f001 f933 	bl	8001af0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_ADC2_Init+0x128>)
 800088c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800088e:	2318      	movs	r3, #24
 8000890:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000892:	463b      	mov	r3, r7
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <MX_ADC2_Init+0x114>)
 8000898:	f003 f8fa 	bl	8003a90 <HAL_ADC_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 80008a2:	f001 f925 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	3720      	adds	r7, #32
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000078 	.word	0x20000078
 80008b4:	50000100 	.word	0x50000100
 80008b8:	10c00010 	.word	0x10c00010
 80008bc:	25b00200 	.word	0x25b00200
 80008c0:	19200040 	.word	0x19200040
 80008c4:	21800100 	.word	0x21800100

080008c8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	@ 0x30
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2220      	movs	r2, #32
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f008 fe79 	bl	80095d8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80008e6:	4b31      	ldr	r3, [pc, #196]	@ (80009ac <MX_ADC3_Init+0xe4>)
 80008e8:	4a31      	ldr	r2, [pc, #196]	@ (80009b0 <MX_ADC3_Init+0xe8>)
 80008ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008ec:	4b2f      	ldr	r3, [pc, #188]	@ (80009ac <MX_ADC3_Init+0xe4>)
 80008ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008f2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008f4:	4b2d      	ldr	r3, [pc, #180]	@ (80009ac <MX_ADC3_Init+0xe4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008fa:	4b2c      	ldr	r3, [pc, #176]	@ (80009ac <MX_ADC3_Init+0xe4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000900:	4b2a      	ldr	r3, [pc, #168]	@ (80009ac <MX_ADC3_Init+0xe4>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000906:	4b29      	ldr	r3, [pc, #164]	@ (80009ac <MX_ADC3_Init+0xe4>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090c:	4b27      	ldr	r3, [pc, #156]	@ (80009ac <MX_ADC3_Init+0xe4>)
 800090e:	2204      	movs	r2, #4
 8000910:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000912:	4b26      	ldr	r3, [pc, #152]	@ (80009ac <MX_ADC3_Init+0xe4>)
 8000914:	2200      	movs	r2, #0
 8000916:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000918:	4b24      	ldr	r3, [pc, #144]	@ (80009ac <MX_ADC3_Init+0xe4>)
 800091a:	2200      	movs	r2, #0
 800091c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800091e:	4b23      	ldr	r3, [pc, #140]	@ (80009ac <MX_ADC3_Init+0xe4>)
 8000920:	2201      	movs	r2, #1
 8000922:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000924:	4b21      	ldr	r3, [pc, #132]	@ (80009ac <MX_ADC3_Init+0xe4>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800092c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <MX_ADC3_Init+0xe4>)
 800092e:	2200      	movs	r2, #0
 8000930:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000932:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <MX_ADC3_Init+0xe4>)
 8000934:	2200      	movs	r2, #0
 8000936:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000938:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <MX_ADC3_Init+0xe4>)
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000940:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <MX_ADC3_Init+0xe4>)
 8000942:	2200      	movs	r2, #0
 8000944:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <MX_ADC3_Init+0xe4>)
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800094e:	4817      	ldr	r0, [pc, #92]	@ (80009ac <MX_ADC3_Init+0xe4>)
 8000950:	f002 fb90 	bl	8003074 <HAL_ADC_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800095a:	f001 f8c9 	bl	8001af0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	4810      	ldr	r0, [pc, #64]	@ (80009ac <MX_ADC3_Init+0xe4>)
 800096a:	f003 fe53 	bl	8004614 <HAL_ADCEx_MultiModeConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000974:	f001 f8bc 	bl	8001af0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_ADC3_Init+0xec>)
 800097a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097c:	2306      	movs	r3, #6
 800097e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000984:	237f      	movs	r3, #127	@ 0x7f
 8000986:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000988:	2304      	movs	r3, #4
 800098a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_ADC3_Init+0xe4>)
 8000996:	f003 f87b 	bl	8003a90 <HAL_ADC_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80009a0:	f001 f8a6 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	3730      	adds	r7, #48	@ 0x30
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000e4 	.word	0x200000e4
 80009b0:	50000400 	.word	0x50000400
 80009b4:	43210000 	.word	0x43210000

080009b8 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009be:	463b      	mov	r3, r7
 80009c0:	2220      	movs	r2, #32
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f008 fe07 	bl	80095d8 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80009ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 80009cc:	4a2b      	ldr	r2, [pc, #172]	@ (8000a7c <MX_ADC4_Init+0xc4>)
 80009ce:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009d0:	4b29      	ldr	r3, [pc, #164]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 80009d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009d6:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80009d8:	4b27      	ldr	r3, [pc, #156]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009de:	4b26      	ldr	r3, [pc, #152]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80009e4:	4b24      	ldr	r3, [pc, #144]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ea:	4b23      	ldr	r3, [pc, #140]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f0:	4b21      	ldr	r3, [pc, #132]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 80009f2:	2204      	movs	r2, #4
 80009f4:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80009f6:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a10:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000a32:	4811      	ldr	r0, [pc, #68]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 8000a34:	f002 fb1e 	bl	8003074 <HAL_ADC_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8000a3e:	f001 f857 	bl	8001af0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_ADC4_Init+0xc8>)
 8000a44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a46:	2306      	movs	r3, #6
 8000a48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a4e:	237f      	movs	r3, #127	@ 0x7f
 8000a50:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a52:	2304      	movs	r3, #4
 8000a54:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <MX_ADC4_Init+0xc0>)
 8000a60:	f003 f816 	bl	8003a90 <HAL_ADC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000a6a:	f001 f841 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000150 	.word	0x20000150
 8000a7c:	50000500 	.word	0x50000500
 8000a80:	43210000 	.word	0x43210000

08000a84 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	@ 0x30
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2230      	movs	r2, #48	@ 0x30
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f008 fda1 	bl	80095d8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <MX_DAC1_Init+0x80>)
 8000a98:	4a1b      	ldr	r2, [pc, #108]	@ (8000b08 <MX_DAC1_Init+0x84>)
 8000a9a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a9c:	4819      	ldr	r0, [pc, #100]	@ (8000b04 <MX_DAC1_Init+0x80>)
 8000a9e:	f003 ffd0 	bl	8004a42 <HAL_DAC_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000aa8:	f001 f822 	bl	8001af0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000aac:	2302      	movs	r3, #2
 8000aae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480b      	ldr	r0, [pc, #44]	@ (8000b04 <MX_DAC1_Init+0x80>)
 8000ad8:	f003 ffd6 	bl	8004a88 <HAL_DAC_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000ae2:	f001 f805 	bl	8001af0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2210      	movs	r2, #16
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <MX_DAC1_Init+0x80>)
 8000aee:	f003 ffcb 	bl	8004a88 <HAL_DAC_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000af8:	f000 fffa 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	@ 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000021c 	.word	0x2000021c
 8000b08:	50000800 	.word	0x50000800

08000b0c <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000b10:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <MX_OPAMP3_Init+0x48>)
 8000b12:	4a11      	ldr	r2, [pc, #68]	@ (8000b58 <MX_OPAMP3_Init+0x4c>)
 8000b14:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <MX_OPAMP3_Init+0x48>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_STANDALONE_MODE;
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <MX_OPAMP3_Init+0x48>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hopamp3.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_OPAMP3_Init+0x48>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <MX_OPAMP3_Init+0x48>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_OPAMP3_Init+0x48>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <MX_OPAMP3_Init+0x48>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_OPAMP3_Init+0x48>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <MX_OPAMP3_Init+0x48>)
 8000b42:	f004 fd67 	bl	8005614 <HAL_OPAMP_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_OPAMP3_Init+0x44>
  {
    Error_Handler();
 8000b4c:	f000 ffd0 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000230 	.word	0x20000230
 8000b58:	40010308 	.word	0x40010308

08000b5c <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8000b60:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <MX_OPAMP4_Init+0x48>)
 8000b62:	4a11      	ldr	r2, [pc, #68]	@ (8000ba8 <MX_OPAMP4_Init+0x4c>)
 8000b64:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <MX_OPAMP4_Init+0x48>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_STANDALONE_MODE;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <MX_OPAMP4_Init+0x48>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hopamp4.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_OPAMP4_Init+0x48>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <MX_OPAMP4_Init+0x48>)
 8000b7a:	2208      	movs	r2, #8
 8000b7c:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_OPAMP4_Init+0x48>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <MX_OPAMP4_Init+0x48>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_OPAMP4_Init+0x48>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MX_OPAMP4_Init+0x48>)
 8000b92:	f004 fd3f 	bl	8005614 <HAL_OPAMP_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_OPAMP4_Init+0x44>
  {
    Error_Handler();
 8000b9c:	f000 ffa8 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	2000026c 	.word	0x2000026c
 8000ba8:	4001030c 	.word	0x4001030c

08000bac <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_OPAMP5_Init+0x48>)
 8000bb2:	4a11      	ldr	r2, [pc, #68]	@ (8000bf8 <MX_OPAMP5_Init+0x4c>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <MX_OPAMP5_Init+0x48>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_STANDALONE_MODE;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <MX_OPAMP5_Init+0x48>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hopamp5.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_OPAMP5_Init+0x48>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_OPAMP5_Init+0x48>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_OPAMP5_Init+0x48>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <MX_OPAMP5_Init+0x48>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_OPAMP5_Init+0x48>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <MX_OPAMP5_Init+0x48>)
 8000be2:	f004 fd17 	bl	8005614 <HAL_OPAMP_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_OPAMP5_Init+0x44>
  {
    Error_Handler();
 8000bec:	f000 ff80 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200002a8 	.word	0x200002a8
 8000bf8:	40010310 	.word	0x40010310

08000bfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c00:	4b18      	ldr	r3, [pc, #96]	@ (8000c64 <MX_SPI1_Init+0x68>)
 8000c02:	4a19      	ldr	r2, [pc, #100]	@ (8000c68 <MX_SPI1_Init+0x6c>)
 8000c04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000c06:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <MX_SPI1_Init+0x68>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <MX_SPI1_Init+0x68>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c12:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <MX_SPI1_Init+0x68>)
 8000c14:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1a:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <MX_SPI1_Init+0x68>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c20:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <MX_SPI1_Init+0x68>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <MX_SPI1_Init+0x68>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <MX_SPI1_Init+0x68>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <MX_SPI1_Init+0x68>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <MX_SPI1_Init+0x68>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_SPI1_Init+0x68>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c44:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <MX_SPI1_Init+0x68>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <MX_SPI1_Init+0x68>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <MX_SPI1_Init+0x68>)
 8000c52:	f005 fddf 	bl	8006814 <HAL_SPI_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000c5c:	f000 ff48 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200002e4 	.word	0x200002e4
 8000c68:	40013000 	.word	0x40013000

08000c6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b0a0      	sub	sp, #128	@ 0x80
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c72:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c82:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000c8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2234      	movs	r2, #52	@ 0x34
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f008 fc8f 	bl	80095d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cba:	4b57      	ldr	r3, [pc, #348]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000cbc:	4a57      	ldr	r2, [pc, #348]	@ (8000e1c <MX_TIM1_Init+0x1b0>)
 8000cbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cc0:	4b55      	ldr	r3, [pc, #340]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc6:	4b54      	ldr	r3, [pc, #336]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ccc:	4b52      	ldr	r3, [pc, #328]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000cce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd4:	4b50      	ldr	r3, [pc, #320]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cda:	4b4f      	ldr	r3, [pc, #316]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ce6:	484c      	ldr	r0, [pc, #304]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000ce8:	f005 fe3f 	bl	800696a <HAL_TIM_Base_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000cf2:	f000 fefd 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cf6:	4848      	ldr	r0, [pc, #288]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000cf8:	f005 feef 	bl	8006ada <HAL_TIM_PWM_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000d02:	f000 fef5 	bl	8001af0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000d06:	2306      	movs	r3, #6
 8000d08:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000d0e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d12:	4619      	mov	r1, r3
 8000d14:	4840      	ldr	r0, [pc, #256]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000d16:	f006 fb7f 	bl	8007418 <HAL_TIM_SlaveConfigSynchro>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000d20:	f000 fee6 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	667b      	str	r3, [r7, #100]	@ 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d30:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d34:	4619      	mov	r1, r3
 8000d36:	4838      	ldr	r0, [pc, #224]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000d38:	f007 fae4 	bl	8008304 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000d42:	f000 fed5 	bl	8001af0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000d46:	2301      	movs	r3, #1
 8000d48:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000d52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d56:	461a      	mov	r2, r3
 8000d58:	2101      	movs	r1, #1
 8000d5a:	482f      	ldr	r0, [pc, #188]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000d5c:	f007 fbfc 	bl	8008558 <HAL_TIMEx_ConfigBreakInput>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000d66:	f000 fec3 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000d6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d6e:	461a      	mov	r2, r3
 8000d70:	2102      	movs	r1, #2
 8000d72:	4829      	ldr	r0, [pc, #164]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000d74:	f007 fbf0 	bl	8008558 <HAL_TIMEx_ConfigBreakInput>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000d7e:	f000 feb7 	bl	8001af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d82:	2360      	movs	r3, #96	@ 0x60
 8000d84:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000da2:	2208      	movs	r2, #8
 8000da4:	4619      	mov	r1, r3
 8000da6:	481c      	ldr	r0, [pc, #112]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000da8:	f006 f916 	bl	8006fd8 <HAL_TIM_PWM_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000db2:	f000 fe9d 	bl	8001af0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000db6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000dbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000dca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000dde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000de4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4807      	ldr	r0, [pc, #28]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000dfc:	f007 fb18 	bl	8008430 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 8000e06:	f000 fe73 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e0a:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <MX_TIM1_Init+0x1ac>)
 8000e0c:	f001 fc0a 	bl	8002624 <HAL_TIM_MspPostInit>

}
 8000e10:	bf00      	nop
 8000e12:	3780      	adds	r7, #128	@ 0x80
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000348 	.word	0x20000348
 8000e1c:	40012c00 	.word	0x40012c00

08000e20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b090      	sub	sp, #64	@ 0x40
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2224      	movs	r2, #36	@ 0x24
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f008 fbd2 	bl	80095d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f0c <MX_TIM2_Init+0xec>)
 8000e4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e54:	4b2d      	ldr	r3, [pc, #180]	@ (8000f0c <MX_TIM2_Init+0xec>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f0c <MX_TIM2_Init+0xec>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e60:	4b2a      	ldr	r3, [pc, #168]	@ (8000f0c <MX_TIM2_Init+0xec>)
 8000e62:	f04f 32ff 	mov.w	r2, #4294967295
 8000e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b28      	ldr	r3, [pc, #160]	@ (8000f0c <MX_TIM2_Init+0xec>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b27      	ldr	r3, [pc, #156]	@ (8000f0c <MX_TIM2_Init+0xec>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e74:	4825      	ldr	r0, [pc, #148]	@ (8000f0c <MX_TIM2_Init+0xec>)
 8000e76:	f005 fe91 	bl	8006b9c <HAL_TIM_IC_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000e80:	f000 fe36 	bl	8001af0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Filter = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Filter = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <MX_TIM2_Init+0xec>)
 8000eb0:	f005 fecb 	bl	8006c4a <HAL_TIM_Encoder_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000eba:	f000 fe19 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480f      	ldr	r0, [pc, #60]	@ (8000f0c <MX_TIM2_Init+0xec>)
 8000ece:	f007 fa19 	bl	8008304 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000ed8:	f000 fe0a 	bl	8001af0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000edc:	2300      	movs	r3, #0
 8000ede:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	2208      	movs	r2, #8
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	@ (8000f0c <MX_TIM2_Init+0xec>)
 8000ef4:	f005 ffd4 	bl	8006ea0 <HAL_TIM_IC_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000efe:	f000 fdf7 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	3740      	adds	r7, #64	@ 0x40
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000394 	.word	0x20000394

08000f10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	@ 0x30
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f3c:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <MX_TIM3_Init+0xc8>)
 8000f3e:	4a27      	ldr	r2, [pc, #156]	@ (8000fdc <MX_TIM3_Init+0xcc>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f42:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <MX_TIM3_Init+0xc8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b23      	ldr	r3, [pc, #140]	@ (8000fd8 <MX_TIM3_Init+0xc8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f4e:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <MX_TIM3_Init+0xc8>)
 8000f50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <MX_TIM3_Init+0xc8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <MX_TIM3_Init+0xc8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f62:	481d      	ldr	r0, [pc, #116]	@ (8000fd8 <MX_TIM3_Init+0xc8>)
 8000f64:	f005 fd01 	bl	800696a <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000f6e:	f000 fdbf 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f76:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4816      	ldr	r0, [pc, #88]	@ (8000fd8 <MX_TIM3_Init+0xc8>)
 8000f80:	f006 f93e 	bl	8007200 <HAL_TIM_ConfigClockSource>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000f8a:	f000 fdb1 	bl	8001af0 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <MX_TIM3_Init+0xc8>)
 8000fa6:	f007 f8f3 	bl	8008190 <HAL_TIMEx_HallSensor_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8000fb0:	f000 fd9e 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000fb4:	2350      	movs	r3, #80	@ 0x50
 8000fb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <MX_TIM3_Init+0xc8>)
 8000fc2:	f007 f99f 	bl	8008304 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000fcc:	f000 fd90 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3730      	adds	r7, #48	@ 0x30
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200003e0 	.word	0x200003e0
 8000fdc:	40000400 	.word	0x40000400

08000fe0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	@ 0x30
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800100c:	4b26      	ldr	r3, [pc, #152]	@ (80010a8 <MX_TIM4_Init+0xc8>)
 800100e:	4a27      	ldr	r2, [pc, #156]	@ (80010ac <MX_TIM4_Init+0xcc>)
 8001010:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001012:	4b25      	ldr	r3, [pc, #148]	@ (80010a8 <MX_TIM4_Init+0xc8>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <MX_TIM4_Init+0xc8>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800101e:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <MX_TIM4_Init+0xc8>)
 8001020:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001024:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	4b20      	ldr	r3, [pc, #128]	@ (80010a8 <MX_TIM4_Init+0xc8>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102c:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <MX_TIM4_Init+0xc8>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001032:	481d      	ldr	r0, [pc, #116]	@ (80010a8 <MX_TIM4_Init+0xc8>)
 8001034:	f005 fc99 	bl	800696a <HAL_TIM_Base_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800103e:	f000 fd57 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001046:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	4619      	mov	r1, r3
 800104e:	4816      	ldr	r0, [pc, #88]	@ (80010a8 <MX_TIM4_Init+0xc8>)
 8001050:	f006 f8d6 	bl	8007200 <HAL_TIM_ConfigClockSource>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800105a:	f000 fd49 	bl	8001af0 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	4619      	mov	r1, r3
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <MX_TIM4_Init+0xc8>)
 8001076:	f007 f88b 	bl	8008190 <HAL_TIMEx_HallSensor_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 8001080:	f000 fd36 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001084:	2350      	movs	r3, #80	@ 0x50
 8001086:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <MX_TIM4_Init+0xc8>)
 8001092:	f007 f937 	bl	8008304 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 800109c:	f000 fd28 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3730      	adds	r7, #48	@ 0x30
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000042c 	.word	0x2000042c
 80010ac:	40000800 	.word	0x40000800

080010b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b090      	sub	sp, #64	@ 0x40
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	2224      	movs	r2, #36	@ 0x24
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f008 fa8a 	bl	80095d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010d0:	463b      	mov	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001198 <MX_TIM5_Init+0xe8>)
 80010de:	4a2f      	ldr	r2, [pc, #188]	@ (800119c <MX_TIM5_Init+0xec>)
 80010e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001198 <MX_TIM5_Init+0xe8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001198 <MX_TIM5_Init+0xe8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80010ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001198 <MX_TIM5_Init+0xe8>)
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f6:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <MX_TIM5_Init+0xe8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fc:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <MX_TIM5_Init+0xe8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001102:	4825      	ldr	r0, [pc, #148]	@ (8001198 <MX_TIM5_Init+0xe8>)
 8001104:	f005 fd4a 	bl	8006b9c <HAL_TIM_IC_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 800110e:	f000 fcef 	bl	8001af0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001112:	2301      	movs	r3, #1
 8001114:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800111a:	2301      	movs	r3, #1
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Filter = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001126:	2300      	movs	r3, #0
 8001128:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800112a:	2301      	movs	r3, #1
 800112c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Filter = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	4816      	ldr	r0, [pc, #88]	@ (8001198 <MX_TIM5_Init+0xe8>)
 800113e:	f005 fd84 	bl	8006c4a <HAL_TIM_Encoder_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001148:	f000 fcd2 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4619      	mov	r1, r3
 800115a:	480f      	ldr	r0, [pc, #60]	@ (8001198 <MX_TIM5_Init+0xe8>)
 800115c:	f007 f8d2 	bl	8008304 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM5_Init+0xba>
  {
    Error_Handler();
 8001166:	f000 fcc3 	bl	8001af0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800116e:	2301      	movs	r3, #1
 8001170:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	2208      	movs	r2, #8
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_TIM5_Init+0xe8>)
 8001182:	f005 fe8d 	bl	8006ea0 <HAL_TIM_IC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM5_Init+0xe0>
  {
    Error_Handler();
 800118c:	f000 fcb0 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3740      	adds	r7, #64	@ 0x40
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000478 	.word	0x20000478
 800119c:	40000c00 	.word	0x40000c00

080011a0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b0a0      	sub	sp, #128	@ 0x80
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011a6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80011c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]
 80011de:	615a      	str	r2, [r3, #20]
 80011e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2234      	movs	r2, #52	@ 0x34
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f008 f9f5 	bl	80095d8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011ee:	4b68      	ldr	r3, [pc, #416]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 80011f0:	4a68      	ldr	r2, [pc, #416]	@ (8001394 <MX_TIM8_Init+0x1f4>)
 80011f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80011f4:	4b66      	ldr	r3, [pc, #408]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b65      	ldr	r3, [pc, #404]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001200:	4b63      	ldr	r3, [pc, #396]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 8001202:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001206:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b61      	ldr	r3, [pc, #388]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800120e:	4b60      	ldr	r3, [pc, #384]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800121a:	485d      	ldr	r0, [pc, #372]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 800121c:	f005 fba5 	bl	800696a <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001226:	f000 fc63 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800122a:	4859      	ldr	r0, [pc, #356]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 800122c:	f005 fc55 	bl	8006ada <HAL_TIM_PWM_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001236:	f000 fc5b 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800123a:	4855      	ldr	r0, [pc, #340]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 800123c:	f005 fbec 	bl	8006a18 <HAL_TIM_OC_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001246:	f000 fc53 	bl	8001af0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800124a:	2306      	movs	r3, #6
 800124c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800124e:	2310      	movs	r3, #16
 8001250:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001252:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001256:	4619      	mov	r1, r3
 8001258:	484d      	ldr	r0, [pc, #308]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 800125a:	f006 f8dd 	bl	8007418 <HAL_TIM_SlaveConfigSynchro>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001264:	f000 fc44 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	667b      	str	r3, [r7, #100]	@ 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001274:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001278:	4619      	mov	r1, r3
 800127a:	4845      	ldr	r0, [pc, #276]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 800127c:	f007 f842 	bl	8008304 <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM8_Init+0xea>
  {
    Error_Handler();
 8001286:	f000 fc33 	bl	8001af0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 800128a:	2301      	movs	r3, #1
 800128c:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800128e:	2301      	movs	r3, #1
 8001290:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001292:	2300      	movs	r3, #0
 8001294:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001296:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800129a:	461a      	mov	r2, r3
 800129c:	2101      	movs	r1, #1
 800129e:	483c      	ldr	r0, [pc, #240]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 80012a0:	f007 f95a 	bl	8008558 <HAL_TIMEx_ConfigBreakInput>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80012aa:	f000 fc21 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80012ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012b2:	461a      	mov	r2, r3
 80012b4:	2102      	movs	r1, #2
 80012b6:	4836      	ldr	r0, [pc, #216]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 80012b8:	f007 f94e 	bl	8008558 <HAL_TIMEx_ConfigBreakInput>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 80012c2:	f000 fc15 	bl	8001af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c6:	2360      	movs	r3, #96	@ 0x60
 80012c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ce:	2300      	movs	r3, #0
 80012d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012d2:	2300      	movs	r3, #0
 80012d4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012e6:	2200      	movs	r2, #0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4829      	ldr	r0, [pc, #164]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 80012ec:	f005 fe74 	bl	8006fd8 <HAL_TIM_PWM_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 80012f6:	f000 fbfb 	bl	8001af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012fa:	2300      	movs	r3, #0
 80012fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001302:	2204      	movs	r2, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4822      	ldr	r0, [pc, #136]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 8001308:	f005 fd50 	bl	8006dac <HAL_TIM_OC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM8_Init+0x176>
  {
    Error_Handler();
 8001312:	f000 fbed 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001316:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800131a:	2208      	movs	r2, #8
 800131c:	4619      	mov	r1, r3
 800131e:	481c      	ldr	r0, [pc, #112]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 8001320:	f005 fd44 	bl	8006dac <HAL_TIM_OC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM8_Init+0x18e>
  {
    Error_Handler();
 800132a:	f000 fbe1 	bl	8001af0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800132e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001332:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001338:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001342:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001346:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001348:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800134c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001356:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800135c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001360:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001366:	2300      	movs	r3, #0
 8001368:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4807      	ldr	r0, [pc, #28]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 8001374:	f007 f85c 	bl	8008430 <HAL_TIMEx_ConfigBreakDeadTime>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM8_Init+0x1e2>
  {
    Error_Handler();
 800137e:	f000 fbb7 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001382:	4803      	ldr	r0, [pc, #12]	@ (8001390 <MX_TIM8_Init+0x1f0>)
 8001384:	f001 f94e 	bl	8002624 <HAL_TIM_MspPostInit>

}
 8001388:	bf00      	nop
 800138a:	3780      	adds	r7, #128	@ 0x80
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200004c4 	.word	0x200004c4
 8001394:	40013400 	.word	0x40013400

08001398 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b098      	sub	sp, #96	@ 0x60
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800139e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
 80013ba:	615a      	str	r2, [r3, #20]
 80013bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2234      	movs	r2, #52	@ 0x34
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f008 f907 	bl	80095d8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80013ca:	4b3a      	ldr	r3, [pc, #232]	@ (80014b4 <MX_TIM16_Init+0x11c>)
 80013cc:	4a3a      	ldr	r2, [pc, #232]	@ (80014b8 <MX_TIM16_Init+0x120>)
 80013ce:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80013d0:	4b38      	ldr	r3, [pc, #224]	@ (80014b4 <MX_TIM16_Init+0x11c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <MX_TIM16_Init+0x11c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80013dc:	4b35      	ldr	r3, [pc, #212]	@ (80014b4 <MX_TIM16_Init+0x11c>)
 80013de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013e2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e4:	4b33      	ldr	r3, [pc, #204]	@ (80014b4 <MX_TIM16_Init+0x11c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80013ea:	4b32      	ldr	r3, [pc, #200]	@ (80014b4 <MX_TIM16_Init+0x11c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f0:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <MX_TIM16_Init+0x11c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80013f6:	482f      	ldr	r0, [pc, #188]	@ (80014b4 <MX_TIM16_Init+0x11c>)
 80013f8:	f005 fab7 	bl	800696a <HAL_TIM_Base_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001402:	f000 fb75 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001406:	482b      	ldr	r0, [pc, #172]	@ (80014b4 <MX_TIM16_Init+0x11c>)
 8001408:	f005 fb06 	bl	8006a18 <HAL_TIM_OC_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM16_Init+0x7e>
  {
    Error_Handler();
 8001412:	f000 fb6d 	bl	8001af0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001416:	2301      	movs	r3, #1
 8001418:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800141a:	2301      	movs	r3, #1
 800141c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800141e:	2300      	movs	r3, #0
 8001420:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim16, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001422:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001426:	461a      	mov	r2, r3
 8001428:	2101      	movs	r1, #1
 800142a:	4822      	ldr	r0, [pc, #136]	@ (80014b4 <MX_TIM16_Init+0x11c>)
 800142c:	f007 f894 	bl	8008558 <HAL_TIMEx_ConfigBreakInput>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM16_Init+0xa2>
  {
    Error_Handler();
 8001436:	f000 fb5b 	bl	8001af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800143a:	2300      	movs	r3, #0
 800143c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001442:	2300      	movs	r3, #0
 8001444:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001446:	2300      	movs	r3, #0
 8001448:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001456:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800145a:	2200      	movs	r2, #0
 800145c:	4619      	mov	r1, r3
 800145e:	4815      	ldr	r0, [pc, #84]	@ (80014b4 <MX_TIM16_Init+0x11c>)
 8001460:	f005 fca4 	bl	8006dac <HAL_TIM_OC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM16_Init+0xd6>
  {
    Error_Handler();
 800146a:	f000 fb41 	bl	8001af0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800147e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001482:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001488:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	4619      	mov	r1, r3
 8001496:	4807      	ldr	r0, [pc, #28]	@ (80014b4 <MX_TIM16_Init+0x11c>)
 8001498:	f006 ffca 	bl	8008430 <HAL_TIMEx_ConfigBreakDeadTime>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM16_Init+0x10e>
  {
    Error_Handler();
 80014a2:	f000 fb25 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80014a6:	4803      	ldr	r0, [pc, #12]	@ (80014b4 <MX_TIM16_Init+0x11c>)
 80014a8:	f001 f8bc 	bl	8002624 <HAL_TIM_MspPostInit>

}
 80014ac:	bf00      	nop
 80014ae:	3760      	adds	r7, #96	@ 0x60
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000510 	.word	0x20000510
 80014b8:	40014400 	.word	0x40014400

080014bc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b098      	sub	sp, #96	@ 0x60
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80014c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2234      	movs	r2, #52	@ 0x34
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f008 f875 	bl	80095d8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80014ee:	4b3a      	ldr	r3, [pc, #232]	@ (80015d8 <MX_TIM17_Init+0x11c>)
 80014f0:	4a3a      	ldr	r2, [pc, #232]	@ (80015dc <MX_TIM17_Init+0x120>)
 80014f2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80014f4:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <MX_TIM17_Init+0x11c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b37      	ldr	r3, [pc, #220]	@ (80015d8 <MX_TIM17_Init+0x11c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001500:	4b35      	ldr	r3, [pc, #212]	@ (80015d8 <MX_TIM17_Init+0x11c>)
 8001502:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001506:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b33      	ldr	r3, [pc, #204]	@ (80015d8 <MX_TIM17_Init+0x11c>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800150e:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <MX_TIM17_Init+0x11c>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <MX_TIM17_Init+0x11c>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800151a:	482f      	ldr	r0, [pc, #188]	@ (80015d8 <MX_TIM17_Init+0x11c>)
 800151c:	f005 fa25 	bl	800696a <HAL_TIM_Base_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8001526:	f000 fae3 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 800152a:	482b      	ldr	r0, [pc, #172]	@ (80015d8 <MX_TIM17_Init+0x11c>)
 800152c:	f005 fa74 	bl	8006a18 <HAL_TIM_OC_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM17_Init+0x7e>
  {
    Error_Handler();
 8001536:	f000 fadb 	bl	8001af0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 800153a:	2301      	movs	r3, #1
 800153c:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800153e:	2301      	movs	r3, #1
 8001540:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001542:	2300      	movs	r3, #0
 8001544:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim17, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001546:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800154a:	461a      	mov	r2, r3
 800154c:	2101      	movs	r1, #1
 800154e:	4822      	ldr	r0, [pc, #136]	@ (80015d8 <MX_TIM17_Init+0x11c>)
 8001550:	f007 f802 	bl	8008558 <HAL_TIMEx_ConfigBreakInput>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM17_Init+0xa2>
  {
    Error_Handler();
 800155a:	f000 fac9 	bl	8001af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800155e:	2300      	movs	r3, #0
 8001560:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001566:	2300      	movs	r3, #0
 8001568:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800156a:	2300      	movs	r3, #0
 800156c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	4815      	ldr	r0, [pc, #84]	@ (80015d8 <MX_TIM17_Init+0x11c>)
 8001584:	f005 fc12 	bl	8006dac <HAL_TIM_OC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM17_Init+0xd6>
  {
    Error_Handler();
 800158e:	f000 faaf 	bl	8001af0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80015a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4807      	ldr	r0, [pc, #28]	@ (80015d8 <MX_TIM17_Init+0x11c>)
 80015bc:	f006 ff38 	bl	8008430 <HAL_TIMEx_ConfigBreakDeadTime>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM17_Init+0x10e>
  {
    Error_Handler();
 80015c6:	f000 fa93 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80015ca:	4803      	ldr	r0, [pc, #12]	@ (80015d8 <MX_TIM17_Init+0x11c>)
 80015cc:	f001 f82a 	bl	8002624 <HAL_TIM_MspPostInit>

}
 80015d0:	bf00      	nop
 80015d2:	3760      	adds	r7, #96	@ 0x60
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000055c 	.word	0x2000055c
 80015dc:	40014800 	.word	0x40014800

080015e0 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0a0      	sub	sp, #128	@ 0x80
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015e6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001602:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800160e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
 800161e:	615a      	str	r2, [r3, #20]
 8001620:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2234      	movs	r2, #52	@ 0x34
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f007 ffd5 	bl	80095d8 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 800162e:	4b62      	ldr	r3, [pc, #392]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 8001630:	4a62      	ldr	r2, [pc, #392]	@ (80017bc <MX_TIM20_Init+0x1dc>)
 8001632:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001634:	4b60      	ldr	r3, [pc, #384]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b5f      	ldr	r3, [pc, #380]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001640:	4b5d      	ldr	r3, [pc, #372]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 8001642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001646:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b5b      	ldr	r3, [pc, #364]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800164e:	4b5a      	ldr	r3, [pc, #360]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b58      	ldr	r3, [pc, #352]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 800165a:	4857      	ldr	r0, [pc, #348]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 800165c:	f005 f985 	bl	800696a <HAL_TIM_Base_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM20_Init+0x8a>
  {
    Error_Handler();
 8001666:	f000 fa43 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 800166a:	4853      	ldr	r0, [pc, #332]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 800166c:	f005 fa35 	bl	8006ada <HAL_TIM_PWM_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM20_Init+0x9a>
  {
    Error_Handler();
 8001676:	f000 fa3b 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim20) != HAL_OK)
 800167a:	484f      	ldr	r0, [pc, #316]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 800167c:	f005 f9cc 	bl	8006a18 <HAL_TIM_OC_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM20_Init+0xaa>
  {
    Error_Handler();
 8001686:	f000 fa33 	bl	8001af0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800168a:	2306      	movs	r3, #6
 800168c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800168e:	2310      	movs	r3, #16
 8001690:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8001692:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001696:	4619      	mov	r1, r3
 8001698:	4847      	ldr	r0, [pc, #284]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 800169a:	f005 febd 	bl	8007418 <HAL_TIM_SlaveConfigSynchro>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM20_Init+0xc8>
  {
    Error_Handler();
 80016a4:	f000 fa24 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	667b      	str	r3, [r7, #100]	@ 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80016b4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016b8:	4619      	mov	r1, r3
 80016ba:	483f      	ldr	r0, [pc, #252]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 80016bc:	f006 fe22 	bl	8008304 <HAL_TIMEx_MasterConfigSynchronization>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM20_Init+0xea>
  {
    Error_Handler();
 80016c6:	f000 fa13 	bl	8001af0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80016ca:	2301      	movs	r3, #1
 80016cc:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80016ce:	2301      	movs	r3, #1
 80016d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80016d2:	2300      	movs	r3, #0
 80016d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim20, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80016d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016da:	461a      	mov	r2, r3
 80016dc:	2101      	movs	r1, #1
 80016de:	4836      	ldr	r0, [pc, #216]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 80016e0:	f006 ff3a 	bl	8008558 <HAL_TIMEx_ConfigBreakInput>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM20_Init+0x10e>
  {
    Error_Handler();
 80016ea:	f000 fa01 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim20, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80016ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016f2:	461a      	mov	r2, r3
 80016f4:	2102      	movs	r1, #2
 80016f6:	4830      	ldr	r0, [pc, #192]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 80016f8:	f006 ff2e 	bl	8008558 <HAL_TIMEx_ConfigBreakInput>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM20_Init+0x126>
  {
    Error_Handler();
 8001702:	f000 f9f5 	bl	8001af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001706:	2360      	movs	r3, #96	@ 0x60
 8001708:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170e:	2300      	movs	r3, #0
 8001710:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001712:	2300      	movs	r3, #0
 8001714:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001722:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001726:	2204      	movs	r2, #4
 8001728:	4619      	mov	r1, r3
 800172a:	4823      	ldr	r0, [pc, #140]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 800172c:	f005 fc54 	bl	8006fd8 <HAL_TIM_PWM_ConfigChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM20_Init+0x15a>
  {
    Error_Handler();
 8001736:	f000 f9db 	bl	8001af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800173a:	2300      	movs	r3, #0
 800173c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800173e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001742:	2208      	movs	r2, #8
 8001744:	4619      	mov	r1, r3
 8001746:	481c      	ldr	r0, [pc, #112]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 8001748:	f005 fb30 	bl	8006dac <HAL_TIM_OC_ConfigChannel>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM20_Init+0x176>
  {
    Error_Handler();
 8001752:	f000 f9cd 	bl	8001af0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001756:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800175a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800175c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001760:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800176a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001774:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 800177e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001784:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001788:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800178e:	2300      	movs	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	4619      	mov	r1, r3
 800179a:	4807      	ldr	r0, [pc, #28]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 800179c:	f006 fe48 	bl	8008430 <HAL_TIMEx_ConfigBreakDeadTime>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM20_Init+0x1ca>
  {
    Error_Handler();
 80017a6:	f000 f9a3 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 80017aa:	4803      	ldr	r0, [pc, #12]	@ (80017b8 <MX_TIM20_Init+0x1d8>)
 80017ac:	f000 ff3a 	bl	8002624 <HAL_TIM_MspPostInit>

}
 80017b0:	bf00      	nop
 80017b2:	3780      	adds	r7, #128	@ 0x80
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200005a8 	.word	0x200005a8
 80017bc:	40015000 	.word	0x40015000

080017c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017c4:	4b22      	ldr	r3, [pc, #136]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 80017c6:	4a23      	ldr	r2, [pc, #140]	@ (8001854 <MX_USART1_UART_Init+0x94>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 80017cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017de:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f6:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017fc:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001808:	4811      	ldr	r0, [pc, #68]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 800180a:	f006 ffc7 	bl	800879c <HAL_UART_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001814:	f000 f96c 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001818:	2100      	movs	r1, #0
 800181a:	480d      	ldr	r0, [pc, #52]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 800181c:	f007 fdf0 	bl	8009400 <HAL_UARTEx_SetTxFifoThreshold>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001826:	f000 f963 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800182a:	2100      	movs	r1, #0
 800182c:	4808      	ldr	r0, [pc, #32]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 800182e:	f007 fe25 	bl	800947c <HAL_UARTEx_SetRxFifoThreshold>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001838:	f000 f95a 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800183c:	4804      	ldr	r0, [pc, #16]	@ (8001850 <MX_USART1_UART_Init+0x90>)
 800183e:	f007 fda6 	bl	800938e <HAL_UARTEx_DisableFifoMode>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001848:	f000 f952 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200005f4 	.word	0x200005f4
 8001854:	40013800 	.word	0x40013800

08001858 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800185e:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <MX_DMA_Init+0x50>)
 8001860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001862:	4a11      	ldr	r2, [pc, #68]	@ (80018a8 <MX_DMA_Init+0x50>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	6493      	str	r3, [r2, #72]	@ 0x48
 800186a:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <MX_DMA_Init+0x50>)
 800186c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <MX_DMA_Init+0x50>)
 8001878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800187a:	4a0b      	ldr	r2, [pc, #44]	@ (80018a8 <MX_DMA_Init+0x50>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6493      	str	r3, [r2, #72]	@ 0x48
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <MX_DMA_Init+0x50>)
 8001884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	200b      	movs	r0, #11
 8001894:	f003 f8a1 	bl	80049da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001898:	200b      	movs	r0, #11
 800189a:	f003 f8b8 	bl	8004a0e <HAL_NVIC_EnableIRQ>

}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000

080018ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	@ 0x30
 80018b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c2:	4b85      	ldr	r3, [pc, #532]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	4a84      	ldr	r2, [pc, #528]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 80018c8:	f043 0310 	orr.w	r3, r3, #16
 80018cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ce:	4b82      	ldr	r3, [pc, #520]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018da:	4b7f      	ldr	r3, [pc, #508]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018de:	4a7e      	ldr	r2, [pc, #504]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018f2:	4b79      	ldr	r3, [pc, #484]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f6:	4a78      	ldr	r2, [pc, #480]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 80018f8:	f043 0320 	orr.w	r3, r3, #32
 80018fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fe:	4b76      	ldr	r3, [pc, #472]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800190a:	4b73      	ldr	r3, [pc, #460]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190e:	4a72      	ldr	r2, [pc, #456]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 8001910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001916:	4b70      	ldr	r3, [pc, #448]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	4b6d      	ldr	r3, [pc, #436]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	4a6c      	ldr	r2, [pc, #432]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	4b67      	ldr	r3, [pc, #412]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193e:	4a66      	ldr	r2, [pc, #408]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001946:	4b64      	ldr	r3, [pc, #400]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001952:	4b61      	ldr	r3, [pc, #388]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001956:	4a60      	ldr	r2, [pc, #384]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad8 <MX_GPIO_Init+0x22c>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_ENABLE1_GPIO_GPIO_Port, M2_ENABLE1_GPIO_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2120      	movs	r1, #32
 800196e:	485b      	ldr	r0, [pc, #364]	@ (8001adc <MX_GPIO_Init+0x230>)
 8001970:	f003 fe38 	bl	80055e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_OUT_LED_GREEN_Pin|M1_ENABLE1_GPIO_Pin|M1_ENABLE2_GPIO_Pin|M2_ENABLE2_GPIO_Pin
 8001974:	2200      	movs	r2, #0
 8001976:	f648 013c 	movw	r1, #34876	@ 0x883c
 800197a:	4859      	ldr	r0, [pc, #356]	@ (8001ae0 <MX_GPIO_Init+0x234>)
 800197c:	f003 fe32 	bl	80055e4 <HAL_GPIO_WritePin>
                          |GPIO_OUT_INRUSH_Pin|GPIO_OUT_ID_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M3_ENABLE1_GPIO_GPIO_Port, M3_ENABLE1_GPIO_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001986:	4857      	ldr	r0, [pc, #348]	@ (8001ae4 <MX_GPIO_Init+0x238>)
 8001988:	f003 fe2c 	bl	80055e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_OUT_M2_ENABLE_Pin|GPIO_OUT_M1_ENABLE_Pin|GPIO_OUT_M1_BRAKE_Pin, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001992:	4855      	ldr	r0, [pc, #340]	@ (8001ae8 <MX_GPIO_Init+0x23c>)
 8001994:	f003 fe26 	bl	80055e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_OUT_M22_BRAKE_Pin|M3_ENABLE2_GPIO_Pin|GPIO_OUT_LED_YELLOW_Pin|GPIO_OUT_LED_RED_Pin, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2165      	movs	r1, #101	@ 0x65
 800199c:	4853      	ldr	r0, [pc, #332]	@ (8001aec <MX_GPIO_Init+0x240>)
 800199e:	f003 fe21 	bl	80055e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : M2_ENABLE1_GPIO_Pin */
  GPIO_InitStruct.Pin = M2_ENABLE1_GPIO_Pin;
 80019a2:	2320      	movs	r3, #32
 80019a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(M2_ENABLE1_GPIO_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	4848      	ldr	r0, [pc, #288]	@ (8001adc <MX_GPIO_Init+0x230>)
 80019ba:	f003 fc91 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	4844      	ldr	r0, [pc, #272]	@ (8001ae4 <MX_GPIO_Init+0x238>)
 80019d4:	f003 fc84 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_LED_GREEN_Pin M1_ENABLE1_GPIO_Pin M1_ENABLE2_GPIO_Pin M2_ENABLE2_GPIO_Pin
                           GPIO_OUT_INRUSH_Pin GPIO_OUT_ID_ENABLE_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_LED_GREEN_Pin|M1_ENABLE1_GPIO_Pin|M1_ENABLE2_GPIO_Pin|M2_ENABLE2_GPIO_Pin
 80019d8:	f648 033c 	movw	r3, #34876	@ 0x883c
 80019dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_OUT_INRUSH_Pin|GPIO_OUT_ID_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	483b      	ldr	r0, [pc, #236]	@ (8001ae0 <MX_GPIO_Init+0x234>)
 80019f2:	f003 fc75 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_RESET_Pin */
  GPIO_InitStruct.Pin = BUTTON_RESET_Pin;
 80019f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_RESET_GPIO_Port, &GPIO_InitStruct);
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4837      	ldr	r0, [pc, #220]	@ (8001ae8 <MX_GPIO_Init+0x23c>)
 8001a0c:	f003 fc68 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a14:	2303      	movs	r3, #3
 8001a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	4830      	ldr	r0, [pc, #192]	@ (8001ae4 <MX_GPIO_Init+0x238>)
 8001a24:	f003 fc5c 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a28:	230c      	movs	r3, #12
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a3e:	f003 fc4f 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_VOLT_V_ADC345_IN16_Pin */
  GPIO_InitStruct.Pin = M1_VOLT_V_ADC345_IN16_Pin;
 8001a42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(M1_VOLT_V_ADC345_IN16_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4821      	ldr	r0, [pc, #132]	@ (8001adc <MX_GPIO_Init+0x230>)
 8001a58:	f003 fc42 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC45_IN12_PFC_Current1_Pin ADC45_IN13_PFC_Current2_Pin M1_VOLT_U_ADC345_IN7_Pin M1_CURR_U_ADC345_IN8_Pin
                           M1_CURR_V_ADC345_IN9_Pin M1_VOLT_W_ADC345_IN10_Pin M1_CURR_W_ADC345_IN11_Pin */
  GPIO_InitStruct.Pin = ADC45_IN12_PFC_Current1_Pin|ADC45_IN13_PFC_Current2_Pin|M1_VOLT_U_ADC345_IN7_Pin|M1_CURR_U_ADC345_IN8_Pin
 8001a5c:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8001a60:	61fb      	str	r3, [r7, #28]
                          |M1_CURR_V_ADC345_IN9_Pin|M1_VOLT_W_ADC345_IN10_Pin|M1_CURR_W_ADC345_IN11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a62:	2303      	movs	r3, #3
 8001a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	4619      	mov	r1, r3
 8001a70:	481e      	ldr	r0, [pc, #120]	@ (8001aec <MX_GPIO_Init+0x240>)
 8001a72:	f003 fc35 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3_ENABLE1_GPIO_Pin */
  GPIO_InitStruct.Pin = M3_ENABLE1_GPIO_Pin;
 8001a76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(M3_ENABLE1_GPIO_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4815      	ldr	r0, [pc, #84]	@ (8001ae4 <MX_GPIO_Init+0x238>)
 8001a90:	f003 fc26 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_M2_ENABLE_Pin GPIO_OUT_M1_ENABLE_Pin GPIO_OUT_M1_BRAKE_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_M2_ENABLE_Pin|GPIO_OUT_M1_ENABLE_Pin|GPIO_OUT_M1_BRAKE_Pin;
 8001a94:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480e      	ldr	r0, [pc, #56]	@ (8001ae8 <MX_GPIO_Init+0x23c>)
 8001aae:	f003 fc17 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_M22_BRAKE_Pin M3_ENABLE2_GPIO_Pin GPIO_OUT_LED_YELLOW_Pin GPIO_OUT_LED_RED_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_M22_BRAKE_Pin|M3_ENABLE2_GPIO_Pin|GPIO_OUT_LED_YELLOW_Pin|GPIO_OUT_LED_RED_Pin;
 8001ab2:	2365      	movs	r3, #101	@ 0x65
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4808      	ldr	r0, [pc, #32]	@ (8001aec <MX_GPIO_Init+0x240>)
 8001aca:	f003 fc09 	bl	80052e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ace:	bf00      	nop
 8001ad0:	3730      	adds	r7, #48	@ 0x30
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48001000 	.word	0x48001000
 8001ae0:	48001400 	.word	0x48001400
 8001ae4:	48000800 	.word	0x48000800
 8001ae8:	48001800 	.word	0x48001800
 8001aec:	48000c00 	.word	0x48000c00

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <Error_Handler+0x8>

08001afc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <HAL_MspInit+0x44>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b06:	4a0e      	ldr	r2, [pc, #56]	@ (8001b40 <HAL_MspInit+0x44>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <HAL_MspInit+0x44>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_MspInit+0x44>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	4a08      	ldr	r2, [pc, #32]	@ (8001b40 <HAL_MspInit+0x44>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b26:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_MspInit+0x44>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b32:	f003 fee3 	bl	80058fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000

08001b44 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0a8      	sub	sp, #160	@ 0xa0
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b60:	2254      	movs	r2, #84	@ 0x54
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f007 fd37 	bl	80095d8 <memset>
  if(hadc->Instance==ADC2)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4aa1      	ldr	r2, [pc, #644]	@ (8001df4 <HAL_ADC_MspInit+0x2b0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	f040 80bd 	bne.w	8001cf0 <HAL_ADC_MspInit+0x1ac>

    /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b7c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b80:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b82:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 fbf6 	bl	8006378 <HAL_RCCEx_PeriphCLKConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001b92:	f7ff ffad 	bl	8001af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b96:	4b98      	ldr	r3, [pc, #608]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	4a97      	ldr	r2, [pc, #604]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001b9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba2:	4b95      	ldr	r3, [pc, #596]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bae:	4b92      	ldr	r3, [pc, #584]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb2:	4a91      	ldr	r2, [pc, #580]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001bb4:	f043 0320 	orr.w	r3, r3, #32
 8001bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bba:	4b8f      	ldr	r3, [pc, #572]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	f003 0320 	and.w	r3, r3, #32
 8001bc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc6:	4b8c      	ldr	r3, [pc, #560]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	4a8b      	ldr	r2, [pc, #556]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001bcc:	f043 0304 	orr.w	r3, r3, #4
 8001bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd2:	4b89      	ldr	r3, [pc, #548]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	4b86      	ldr	r3, [pc, #536]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	4a85      	ldr	r2, [pc, #532]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bea:	4b83      	ldr	r3, [pc, #524]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	4b80      	ldr	r3, [pc, #512]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfa:	4a7f      	ldr	r2, [pc, #508]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c02:	4b7d      	ldr	r3, [pc, #500]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    PA7     ------> ADC2_IN4
    PC4     ------> ADC2_IN5
    PC5     ------> ADC2_IN11
    PB2     ------> ADC2_IN12
    */
    GPIO_InitStruct.Pin = ADC2_IN10_PFC_AC_V_Pin;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c14:	2303      	movs	r3, #3
 8001c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(ADC2_IN10_PFC_AC_V_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001c24:	4619      	mov	r1, r3
 8001c26:	4875      	ldr	r0, [pc, #468]	@ (8001dfc <HAL_ADC_MspInit+0x2b8>)
 8001c28:	f003 fb5a 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c2c:	233f      	movs	r3, #63	@ 0x3f
 8001c2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                          |M2_TEMP_ID_ADC2_IN5_Pin|PFC_AC_ZC_ADC2_IN11_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c32:	2303      	movs	r3, #3
 8001c34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001c42:	4619      	mov	r1, r3
 8001c44:	486e      	ldr	r0, [pc, #440]	@ (8001e00 <HAL_ADC_MspInit+0x2bc>)
 8001c46:	f003 fb4b 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M2_RES_EX_DAC1_OUT2_Pin|M3_TEMP_ID_ADC2IN3_Pin|GPIO_PIN_7;
 8001c4a:	23e0      	movs	r3, #224	@ 0xe0
 8001c4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c50:	2303      	movs	r3, #3
 8001c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001c60:	4619      	mov	r1, r3
 8001c62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c66:	f003 fb3b 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c70:	2303      	movs	r3, #3
 8001c72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001c80:	4619      	mov	r1, r3
 8001c82:	4860      	ldr	r0, [pc, #384]	@ (8001e04 <HAL_ADC_MspInit+0x2c0>)
 8001c84:	f003 fb2c 	bl	80052e0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8001c88:	4b5f      	ldr	r3, [pc, #380]	@ (8001e08 <HAL_ADC_MspInit+0x2c4>)
 8001c8a:	4a60      	ldr	r2, [pc, #384]	@ (8001e0c <HAL_ADC_MspInit+0x2c8>)
 8001c8c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001c8e:	4b5e      	ldr	r3, [pc, #376]	@ (8001e08 <HAL_ADC_MspInit+0x2c4>)
 8001c90:	2224      	movs	r2, #36	@ 0x24
 8001c92:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c94:	4b5c      	ldr	r3, [pc, #368]	@ (8001e08 <HAL_ADC_MspInit+0x2c4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001e08 <HAL_ADC_MspInit+0x2c4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001ca0:	4b59      	ldr	r3, [pc, #356]	@ (8001e08 <HAL_ADC_MspInit+0x2c4>)
 8001ca2:	2280      	movs	r2, #128	@ 0x80
 8001ca4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ca6:	4b58      	ldr	r3, [pc, #352]	@ (8001e08 <HAL_ADC_MspInit+0x2c4>)
 8001ca8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cac:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cae:	4b56      	ldr	r3, [pc, #344]	@ (8001e08 <HAL_ADC_MspInit+0x2c4>)
 8001cb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cb4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001cb6:	4b54      	ldr	r3, [pc, #336]	@ (8001e08 <HAL_ADC_MspInit+0x2c4>)
 8001cb8:	2220      	movs	r2, #32
 8001cba:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001cbc:	4b52      	ldr	r3, [pc, #328]	@ (8001e08 <HAL_ADC_MspInit+0x2c4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001cc2:	4851      	ldr	r0, [pc, #324]	@ (8001e08 <HAL_ADC_MspInit+0x2c4>)
 8001cc4:	f003 f89a 	bl	8004dfc <HAL_DMA_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_ADC_MspInit+0x18e>
    {
      Error_Handler();
 8001cce:	f7ff ff0f 	bl	8001af0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4c      	ldr	r2, [pc, #304]	@ (8001e08 <HAL_ADC_MspInit+0x2c4>)
 8001cd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8001cd8:	4a4b      	ldr	r2, [pc, #300]	@ (8001e08 <HAL_ADC_MspInit+0x2c4>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2012      	movs	r0, #18
 8001ce4:	f002 fe79 	bl	80049da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001ce8:	2012      	movs	r0, #18
 8001cea:	f002 fe90 	bl	8004a0e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC4_MspInit 1 */

    /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001cee:	e0fa      	b.n	8001ee6 <HAL_ADC_MspInit+0x3a2>
  else if(hadc->Instance==ADC3)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a46      	ldr	r2, [pc, #280]	@ (8001e10 <HAL_ADC_MspInit+0x2cc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	f040 8092 	bne.w	8001e20 <HAL_ADC_MspInit+0x2dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001cfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d00:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001d02:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001d06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f004 fb32 	bl	8006378 <HAL_RCCEx_PeriphCLKConfig>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_ADC_MspInit+0x1da>
      Error_Handler();
 8001d1a:	f7ff fee9 	bl	8001af0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e14 <HAL_ADC_MspInit+0x2d0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	4a3b      	ldr	r2, [pc, #236]	@ (8001e14 <HAL_ADC_MspInit+0x2d0>)
 8001d26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001d28:	4b3a      	ldr	r3, [pc, #232]	@ (8001e14 <HAL_ADC_MspInit+0x2d0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d10b      	bne.n	8001d48 <HAL_ADC_MspInit+0x204>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001d30:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d34:	4a30      	ldr	r2, [pc, #192]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001d36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d44:	623b      	str	r3, [r7, #32]
 8001d46:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d48:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001d4e:	f043 0310 	orr.w	r3, r3, #16
 8001d52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d54:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d60:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d64:	4a24      	ldr	r2, [pc, #144]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001d66:	f043 0302 	orr.w	r3, r3, #2
 8001d6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d6c:	4b22      	ldr	r3, [pc, #136]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d78:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001d7e:	f043 0308 	orr.w	r3, r3, #8
 8001d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <HAL_ADC_MspInit+0x2b4>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M1_VOLT_V_ADC345_IN16_Pin;
 8001d90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(M1_VOLT_V_ADC345_IN16_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001da8:	4619      	mov	r1, r3
 8001daa:	481b      	ldr	r0, [pc, #108]	@ (8001e18 <HAL_ADC_MspInit+0x2d4>)
 8001dac:	f003 fa98 	bl	80052e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_VBUS_ADC3_IN5_Pin;
 8001db0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001db4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db8:	2303      	movs	r3, #3
 8001dba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(M1_VBUS_ADC3_IN5_GPIO_Port, &GPIO_InitStruct);
 8001dc4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480e      	ldr	r0, [pc, #56]	@ (8001e04 <HAL_ADC_MspInit+0x2c0>)
 8001dcc:	f003 fa88 	bl	80052e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_VOLT_U_ADC345_IN7_Pin|M1_CURR_U_ADC345_IN8_Pin|M1_CURR_V_ADC345_IN9_Pin|M1_VOLT_W_ADC345_IN10_Pin
 8001dd0:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 8001dd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001de8:	4619      	mov	r1, r3
 8001dea:	480c      	ldr	r0, [pc, #48]	@ (8001e1c <HAL_ADC_MspInit+0x2d8>)
 8001dec:	f003 fa78 	bl	80052e0 <HAL_GPIO_Init>
}
 8001df0:	e079      	b.n	8001ee6 <HAL_ADC_MspInit+0x3a2>
 8001df2:	bf00      	nop
 8001df4:	50000100 	.word	0x50000100
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	48001400 	.word	0x48001400
 8001e00:	48000800 	.word	0x48000800
 8001e04:	48000400 	.word	0x48000400
 8001e08:	200001bc 	.word	0x200001bc
 8001e0c:	40020008 	.word	0x40020008
 8001e10:	50000400 	.word	0x50000400
 8001e14:	200006b0 	.word	0x200006b0
 8001e18:	48001000 	.word	0x48001000
 8001e1c:	48000c00 	.word	0x48000c00
  else if(hadc->Instance==ADC4)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a32      	ldr	r2, [pc, #200]	@ (8001ef0 <HAL_ADC_MspInit+0x3ac>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d15d      	bne.n	8001ee6 <HAL_ADC_MspInit+0x3a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001e2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001e30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001e34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f004 fa9b 	bl	8006378 <HAL_RCCEx_PeriphCLKConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_ADC_MspInit+0x308>
      Error_Handler();
 8001e48:	f7ff fe52 	bl	8001af0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001e4c:	4b29      	ldr	r3, [pc, #164]	@ (8001ef4 <HAL_ADC_MspInit+0x3b0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	4a28      	ldr	r2, [pc, #160]	@ (8001ef4 <HAL_ADC_MspInit+0x3b0>)
 8001e54:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001e56:	4b27      	ldr	r3, [pc, #156]	@ (8001ef4 <HAL_ADC_MspInit+0x3b0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d10b      	bne.n	8001e76 <HAL_ADC_MspInit+0x332>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001e5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ef8 <HAL_ADC_MspInit+0x3b4>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e62:	4a25      	ldr	r2, [pc, #148]	@ (8001ef8 <HAL_ADC_MspInit+0x3b4>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e6a:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <HAL_ADC_MspInit+0x3b4>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e76:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <HAL_ADC_MspInit+0x3b4>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef8 <HAL_ADC_MspInit+0x3b4>)
 8001e7c:	f043 0310 	orr.w	r3, r3, #16
 8001e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e82:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <HAL_ADC_MspInit+0x3b4>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <HAL_ADC_MspInit+0x3b4>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e92:	4a19      	ldr	r2, [pc, #100]	@ (8001ef8 <HAL_ADC_MspInit+0x3b4>)
 8001e94:	f043 0308 	orr.w	r3, r3, #8
 8001e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <HAL_ADC_MspInit+0x3b4>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_VOLT_V_ADC345_IN16_Pin|ADC4_IN1_MORPHO_Pin|M1_TEMP_ID_ADC4_IN2_Pin;
 8001ea6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001eaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eba:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480e      	ldr	r0, [pc, #56]	@ (8001efc <HAL_ADC_MspInit+0x3b8>)
 8001ec2:	f003 fa0d 	bl	80052e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC45_IN12_PFC_Current1_Pin|ADC45_IN13_PFC_Current2_Pin|M1_VOLT_U_ADC345_IN7_Pin|M1_CURR_U_ADC345_IN8_Pin
 8001ec6:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8001eca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eda:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4807      	ldr	r0, [pc, #28]	@ (8001f00 <HAL_ADC_MspInit+0x3bc>)
 8001ee2:	f003 f9fd 	bl	80052e0 <HAL_GPIO_Init>
}
 8001ee6:	bf00      	nop
 8001ee8:	37a0      	adds	r7, #160	@ 0xa0
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	50000500 	.word	0x50000500
 8001ef4:	200006b0 	.word	0x200006b0
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	48001000 	.word	0x48001000
 8001f00:	48000c00 	.word	0x48000c00

08001f04 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	@ 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a15      	ldr	r2, [pc, #84]	@ (8001f78 <HAL_DAC_MspInit+0x74>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d124      	bne.n	8001f70 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001f26:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <HAL_DAC_MspInit+0x78>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2a:	4a14      	ldr	r2, [pc, #80]	@ (8001f7c <HAL_DAC_MspInit+0x78>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f32:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_DAC_MspInit+0x78>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f7c <HAL_DAC_MspInit+0x78>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f42:	4a0e      	ldr	r2, [pc, #56]	@ (8001f7c <HAL_DAC_MspInit+0x78>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <HAL_DAC_MspInit+0x78>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = M1_RES_EX_DAC1_OUT1_Pin|M2_RES_EX_DAC1_OUT2_Pin;
 8001f56:	2330      	movs	r3, #48	@ 0x30
 8001f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f6c:	f003 f9b8 	bl	80052e0 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	@ 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	50000800 	.word	0x50000800
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_OPAMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hopamp: OPAMP handle pointer
  * @retval None
  */
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	@ 0x30
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP3)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a3b      	ldr	r2, [pc, #236]	@ (800208c <HAL_OPAMP_MspInit+0x10c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d118      	bne.n	8001fd4 <HAL_OPAMP_MspInit+0x54>
  {
    /* USER CODE BEGIN OPAMP3_MspInit 0 */

    /* USER CODE END OPAMP3_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8002090 <HAL_OPAMP_MspInit+0x110>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	4a3a      	ldr	r2, [pc, #232]	@ (8002090 <HAL_OPAMP_MspInit+0x110>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fae:	4b38      	ldr	r3, [pc, #224]	@ (8002090 <HAL_OPAMP_MspInit+0x110>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP3 GPIO Configuration
    PB0     ------> OPAMP3_VINP
    PB1     ------> OPAMP3_VOUT
    PB2     ------> OPAMP3_VINM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001fba:	2307      	movs	r3, #7
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4831      	ldr	r0, [pc, #196]	@ (8002094 <HAL_OPAMP_MspInit+0x114>)
 8001fce:	f003 f987 	bl	80052e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN OPAMP5_MspInit 1 */

    /* USER CODE END OPAMP5_MspInit 1 */
  }

}
 8001fd2:	e056      	b.n	8002082 <HAL_OPAMP_MspInit+0x102>
  else if(hopamp->Instance==OPAMP4)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a2f      	ldr	r2, [pc, #188]	@ (8002098 <HAL_OPAMP_MspInit+0x118>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d119      	bne.n	8002012 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	4b2c      	ldr	r3, [pc, #176]	@ (8002090 <HAL_OPAMP_MspInit+0x110>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe2:	4a2b      	ldr	r2, [pc, #172]	@ (8002090 <HAL_OPAMP_MspInit+0x110>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fea:	4b29      	ldr	r3, [pc, #164]	@ (8002090 <HAL_OPAMP_MspInit+0x110>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001ff6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4822      	ldr	r0, [pc, #136]	@ (8002094 <HAL_OPAMP_MspInit+0x114>)
 800200c:	f003 f968 	bl	80052e0 <HAL_GPIO_Init>
}
 8002010:	e037      	b.n	8002082 <HAL_OPAMP_MspInit+0x102>
  else if(hopamp->Instance==OPAMP5)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a21      	ldr	r2, [pc, #132]	@ (800209c <HAL_OPAMP_MspInit+0x11c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d132      	bne.n	8002082 <HAL_OPAMP_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201c:	4b1c      	ldr	r3, [pc, #112]	@ (8002090 <HAL_OPAMP_MspInit+0x110>)
 800201e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002020:	4a1b      	ldr	r2, [pc, #108]	@ (8002090 <HAL_OPAMP_MspInit+0x110>)
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002028:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <HAL_OPAMP_MspInit+0x110>)
 800202a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b16      	ldr	r3, [pc, #88]	@ (8002090 <HAL_OPAMP_MspInit+0x110>)
 8002036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002038:	4a15      	ldr	r2, [pc, #84]	@ (8002090 <HAL_OPAMP_MspInit+0x110>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002040:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <HAL_OPAMP_MspInit+0x110>)
 8002042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800204c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002052:	2303      	movs	r3, #3
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	480c      	ldr	r0, [pc, #48]	@ (8002094 <HAL_OPAMP_MspInit+0x114>)
 8002062:	f003 f93d 	bl	80052e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002066:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800206a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206c:	2303      	movs	r3, #3
 800206e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	4619      	mov	r1, r3
 800207a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800207e:	f003 f92f 	bl	80052e0 <HAL_GPIO_Init>
}
 8002082:	bf00      	nop
 8002084:	3730      	adds	r7, #48	@ 0x30
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40010308 	.word	0x40010308
 8002090:	40021000 	.word	0x40021000
 8002094:	48000400 	.word	0x48000400
 8002098:	4001030c 	.word	0x4001030c
 800209c:	40010310 	.word	0x40010310

080020a0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	@ 0x28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a17      	ldr	r2, [pc, #92]	@ (800211c <HAL_SPI_MspInit+0x7c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d127      	bne.n	8002112 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020c2:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <HAL_SPI_MspInit+0x80>)
 80020c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c6:	4a16      	ldr	r2, [pc, #88]	@ (8002120 <HAL_SPI_MspInit+0x80>)
 80020c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ce:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <HAL_SPI_MspInit+0x80>)
 80020d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020da:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <HAL_SPI_MspInit+0x80>)
 80020dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020de:	4a10      	ldr	r2, [pc, #64]	@ (8002120 <HAL_SPI_MspInit+0x80>)
 80020e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <HAL_SPI_MspInit+0x80>)
 80020e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    PG5     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80020f2:	233c      	movs	r3, #60	@ 0x3c
 80020f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002102:	2305      	movs	r3, #5
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	4805      	ldr	r0, [pc, #20]	@ (8002124 <HAL_SPI_MspInit+0x84>)
 800210e:	f003 f8e7 	bl	80052e0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	@ 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40013000 	.word	0x40013000
 8002120:	40021000 	.word	0x40021000
 8002124:	48001800 	.word	0x48001800

08002128 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b09a      	sub	sp, #104	@ 0x68
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a9f      	ldr	r2, [pc, #636]	@ (80023c4 <HAL_TIM_Base_MspInit+0x29c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d159      	bne.n	80021fe <HAL_TIM_Base_MspInit+0xd6>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800214a:	4b9f      	ldr	r3, [pc, #636]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 800214c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214e:	4a9e      	ldr	r2, [pc, #632]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002150:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002154:	6613      	str	r3, [r2, #96]	@ 0x60
 8002156:	4b9c      	ldr	r3, [pc, #624]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800215a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800215e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002162:	4b99      	ldr	r3, [pc, #612]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	4a98      	ldr	r2, [pc, #608]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002168:	f043 0310 	orr.w	r3, r3, #16
 800216c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800216e:	4b96      	ldr	r3, [pc, #600]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	4b93      	ldr	r3, [pc, #588]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	4a92      	ldr	r2, [pc, #584]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002186:	4b90      	ldr	r3, [pc, #576]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PA11     ------> TIM1_BKIN2
    PA15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = M2_PWM_UH_TIM1_CH1_Pin|M2_PWM_VH_TIM1_CH2_Pin;
 8002192:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002196:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80021a4:	2302      	movs	r3, #2
 80021a6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021ac:	4619      	mov	r1, r3
 80021ae:	4887      	ldr	r0, [pc, #540]	@ (80023cc <HAL_TIM_Base_MspInit+0x2a4>)
 80021b0:	f003 f896 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M2_TIM1_BKIN2_Pin;
 80021b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021b8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ba:	2312      	movs	r3, #18
 80021bc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 80021c6:	230c      	movs	r3, #12
 80021c8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M2_TIM1_BKIN2_GPIO_Port, &GPIO_InitStruct);
 80021ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021ce:	4619      	mov	r1, r3
 80021d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021d4:	f003 f884 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021dc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021de:	2312      	movs	r3, #18
 80021e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80021ea:	2309      	movs	r3, #9
 80021ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021f2:	4619      	mov	r1, r3
 80021f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021f8:	f003 f872 	bl	80052e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 80021fc:	e18d      	b.n	800251a <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM3)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a73      	ldr	r2, [pc, #460]	@ (80023d0 <HAL_TIM_Base_MspInit+0x2a8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d128      	bne.n	800225a <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002208:	4b6f      	ldr	r3, [pc, #444]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220c:	4a6e      	ldr	r2, [pc, #440]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	6593      	str	r3, [r2, #88]	@ 0x58
 8002214:	4b6c      	ldr	r3, [pc, #432]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	647b      	str	r3, [r7, #68]	@ 0x44
 800221e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002220:	4b69      	ldr	r3, [pc, #420]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002224:	4a68      	ldr	r2, [pc, #416]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002226:	f043 0310 	orr.w	r3, r3, #16
 800222a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800222c:	4b66      	ldr	r3, [pc, #408]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 800222e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	643b      	str	r3, [r7, #64]	@ 0x40
 8002236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pin = M1_HALL_H1_TIM3_CH1_Pin|M1_HALL_H2_TIM3_CH2_Pin|M1_HALL_H3_TIM3_CH3_Pin;
 8002238:	231c      	movs	r3, #28
 800223a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002248:	2302      	movs	r3, #2
 800224a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800224c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002250:	4619      	mov	r1, r3
 8002252:	485e      	ldr	r0, [pc, #376]	@ (80023cc <HAL_TIM_Base_MspInit+0x2a4>)
 8002254:	f003 f844 	bl	80052e0 <HAL_GPIO_Init>
}
 8002258:	e15f      	b.n	800251a <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM4)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a5d      	ldr	r2, [pc, #372]	@ (80023d4 <HAL_TIM_Base_MspInit+0x2ac>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d147      	bne.n	80022f4 <HAL_TIM_Base_MspInit+0x1cc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002264:	4b58      	ldr	r3, [pc, #352]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002268:	4a57      	ldr	r2, [pc, #348]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002270:	4b55      	ldr	r3, [pc, #340]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800227a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227c:	4b52      	ldr	r3, [pc, #328]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 800227e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002280:	4a51      	ldr	r2, [pc, #324]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002288:	4b4f      	ldr	r3, [pc, #316]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 800228a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002294:	4b4c      	ldr	r3, [pc, #304]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002298:	4a4b      	ldr	r2, [pc, #300]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022a0:	4b49      	ldr	r3, [pc, #292]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 80022a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80022aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Pin = M2_HALL_H2_TIM4_CH2_Pin;
 80022ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80022be:	230a      	movs	r3, #10
 80022c0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M2_HALL_H2_TIM4_CH2_GPIO_Port, &GPIO_InitStruct);
 80022c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022c6:	4619      	mov	r1, r3
 80022c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022cc:	f003 f808 	bl	80052e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2_HALL_H1_TIM4_CH1_Pin|M2_HALL_H3_TIM4_CH3_Pin;
 80022d0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80022d4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022e2:	2302      	movs	r3, #2
 80022e4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022ea:	4619      	mov	r1, r3
 80022ec:	483a      	ldr	r0, [pc, #232]	@ (80023d8 <HAL_TIM_Base_MspInit+0x2b0>)
 80022ee:	f002 fff7 	bl	80052e0 <HAL_GPIO_Init>
}
 80022f2:	e112      	b.n	800251a <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM8)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a38      	ldr	r2, [pc, #224]	@ (80023dc <HAL_TIM_Base_MspInit+0x2b4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d172      	bne.n	80023e4 <HAL_TIM_Base_MspInit+0x2bc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80022fe:	4b32      	ldr	r3, [pc, #200]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002302:	4a31      	ldr	r2, [pc, #196]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002304:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002308:	6613      	str	r3, [r2, #96]	@ 0x60
 800230a:	4b2f      	ldr	r3, [pc, #188]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 800230c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002312:	633b      	str	r3, [r7, #48]	@ 0x30
 8002314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	4b2c      	ldr	r3, [pc, #176]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231a:	4a2b      	ldr	r2, [pc, #172]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002322:	4b29      	ldr	r3, [pc, #164]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800232c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800232e:	4b26      	ldr	r3, [pc, #152]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002332:	4a25      	ldr	r2, [pc, #148]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800233a:	4b23      	ldr	r3, [pc, #140]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234a:	4a1f      	ldr	r2, [pc, #124]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002352:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24
 800235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = M1_TIM8_ETR_Pin;
 800235e:	2301      	movs	r3, #1
 8002360:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800236e:	230a      	movs	r3, #10
 8002370:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M1_TIM8_ETR_GPIO_Port, &GPIO_InitStruct);
 8002372:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002376:	4619      	mov	r1, r3
 8002378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800237c:	f002 ffb0 	bl	80052e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TIM8_BKIN2_Pin;
 8002380:	2302      	movs	r3, #2
 8002382:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002384:	2312      	movs	r3, #18
 8002386:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 8002390:	2306      	movs	r3, #6
 8002392:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M1_TIM8_BKIN2_GPIO_Port, &GPIO_InitStruct);
 8002394:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002398:	4619      	mov	r1, r3
 800239a:	4811      	ldr	r0, [pc, #68]	@ (80023e0 <HAL_TIM_Base_MspInit+0x2b8>)
 800239c:	f002 ffa0 	bl	80052e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TIM8_BKIN_Pin;
 80023a0:	2380      	movs	r3, #128	@ 0x80
 80023a2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023a4:	2312      	movs	r3, #18
 80023a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80023b0:	2305      	movs	r3, #5
 80023b2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M1_TIM8_BKIN_GPIO_Port, &GPIO_InitStruct);
 80023b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023b8:	4619      	mov	r1, r3
 80023ba:	4807      	ldr	r0, [pc, #28]	@ (80023d8 <HAL_TIM_Base_MspInit+0x2b0>)
 80023bc:	f002 ff90 	bl	80052e0 <HAL_GPIO_Init>
}
 80023c0:	e0ab      	b.n	800251a <HAL_TIM_Base_MspInit+0x3f2>
 80023c2:	bf00      	nop
 80023c4:	40012c00 	.word	0x40012c00
 80023c8:	40021000 	.word	0x40021000
 80023cc:	48001000 	.word	0x48001000
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800
 80023d8:	48000400 	.word	0x48000400
 80023dc:	40013400 	.word	0x40013400
 80023e0:	48000c00 	.word	0x48000c00
  else if(htim_base->Instance==TIM16)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002524 <HAL_TIM_Base_MspInit+0x3fc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d128      	bne.n	8002440 <HAL_TIM_Base_MspInit+0x318>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 80023f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 80023f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80023fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 80023fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002402:	623b      	str	r3, [r7, #32]
 8002404:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002406:	4b48      	ldr	r3, [pc, #288]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240a:	4a47      	ldr	r2, [pc, #284]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002412:	4b45      	ldr	r3, [pc, #276]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PFC_TIM16_BKIN_Pin;
 800241e:	2320      	movs	r3, #32
 8002420:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002422:	2312      	movs	r3, #18
 8002424:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800242e:	2301      	movs	r3, #1
 8002430:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(PFC_TIM16_BKIN_GPIO_Port, &GPIO_InitStruct);
 8002432:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002436:	4619      	mov	r1, r3
 8002438:	483c      	ldr	r0, [pc, #240]	@ (800252c <HAL_TIM_Base_MspInit+0x404>)
 800243a:	f002 ff51 	bl	80052e0 <HAL_GPIO_Init>
}
 800243e:	e06c      	b.n	800251a <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM17)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a3a      	ldr	r2, [pc, #232]	@ (8002530 <HAL_TIM_Base_MspInit+0x408>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d128      	bne.n	800249c <HAL_TIM_Base_MspInit+0x374>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800244a:	4b37      	ldr	r3, [pc, #220]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 800244c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244e:	4a36      	ldr	r2, [pc, #216]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 8002450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002454:	6613      	str	r3, [r2, #96]	@ 0x60
 8002456:	4b34      	ldr	r3, [pc, #208]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 8002458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800245a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002462:	4b31      	ldr	r3, [pc, #196]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002466:	4a30      	ldr	r2, [pc, #192]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800246e:	4b2e      	ldr	r3, [pc, #184]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PFC_TIM17_BKIN_Pin;
 800247a:	2310      	movs	r3, #16
 800247c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800247e:	2312      	movs	r3, #18
 8002480:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800248a:	230a      	movs	r3, #10
 800248c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(PFC_TIM17_BKIN_GPIO_Port, &GPIO_InitStruct);
 800248e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002492:	4619      	mov	r1, r3
 8002494:	4825      	ldr	r0, [pc, #148]	@ (800252c <HAL_TIM_Base_MspInit+0x404>)
 8002496:	f002 ff23 	bl	80052e0 <HAL_GPIO_Init>
}
 800249a:	e03e      	b.n	800251a <HAL_TIM_Base_MspInit+0x3f2>
  else if(htim_base->Instance==TIM20)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a24      	ldr	r2, [pc, #144]	@ (8002534 <HAL_TIM_Base_MspInit+0x40c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d139      	bne.n	800251a <HAL_TIM_Base_MspInit+0x3f2>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80024a6:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 80024ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80024b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024be:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c2:	4a19      	ldr	r2, [pc, #100]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 80024c4:	f043 0320 	orr.w	r3, r3, #32
 80024c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ca:	4b17      	ldr	r3, [pc, #92]	@ (8002528 <HAL_TIM_Base_MspInit+0x400>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_TIM20_BKIN_Pin|M3_TIM20_BKIN2_Pin;
 80024d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80024da:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024dc:	2312      	movs	r3, #18
 80024de:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 80024e8:	2302      	movs	r3, #2
 80024ea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024f0:	4619      	mov	r1, r3
 80024f2:	4811      	ldr	r0, [pc, #68]	@ (8002538 <HAL_TIM_Base_MspInit+0x410>)
 80024f4:	f002 fef4 	bl	80052e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3_PWM_UH_TIM20_CH1_Pin;
 80024f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 800250a:	2302      	movs	r3, #2
 800250c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(M3_PWM_UH_TIM20_CH1_GPIO_Port, &GPIO_InitStruct);
 800250e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002512:	4619      	mov	r1, r3
 8002514:	4808      	ldr	r0, [pc, #32]	@ (8002538 <HAL_TIM_Base_MspInit+0x410>)
 8002516:	f002 fee3 	bl	80052e0 <HAL_GPIO_Init>
}
 800251a:	bf00      	nop
 800251c:	3768      	adds	r7, #104	@ 0x68
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40014400 	.word	0x40014400
 8002528:	40021000 	.word	0x40021000
 800252c:	48000400 	.word	0x48000400
 8002530:	40014800 	.word	0x40014800
 8002534:	40015000 	.word	0x40015000
 8002538:	48001400 	.word	0x48001400

0800253c <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	@ 0x30
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800255c:	d128      	bne.n	80025b0 <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800255e:	4b2d      	ldr	r3, [pc, #180]	@ (8002614 <HAL_TIM_IC_MspInit+0xd8>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002562:	4a2c      	ldr	r2, [pc, #176]	@ (8002614 <HAL_TIM_IC_MspInit+0xd8>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6593      	str	r3, [r2, #88]	@ 0x58
 800256a:	4b2a      	ldr	r3, [pc, #168]	@ (8002614 <HAL_TIM_IC_MspInit+0xd8>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002576:	4b27      	ldr	r3, [pc, #156]	@ (8002614 <HAL_TIM_IC_MspInit+0xd8>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257a:	4a26      	ldr	r2, [pc, #152]	@ (8002614 <HAL_TIM_IC_MspInit+0xd8>)
 800257c:	f043 0308 	orr.w	r3, r3, #8
 8002580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002582:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <HAL_TIM_IC_MspInit+0xd8>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = M2_ENCA_TIM2_CH1_Pin|M2_ENCB_TIM2_CH2_Pin|M2_ENCZ_TIM2_CH3_Pin;
 800258e:	2398      	movs	r3, #152	@ 0x98
 8002590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800259e:	2302      	movs	r3, #2
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025a2:	f107 031c 	add.w	r3, r7, #28
 80025a6:	4619      	mov	r1, r3
 80025a8:	481b      	ldr	r0, [pc, #108]	@ (8002618 <HAL_TIM_IC_MspInit+0xdc>)
 80025aa:	f002 fe99 	bl	80052e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 80025ae:	e02d      	b.n	800260c <HAL_TIM_IC_MspInit+0xd0>
  else if(htim_ic->Instance==TIM5)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a19      	ldr	r2, [pc, #100]	@ (800261c <HAL_TIM_IC_MspInit+0xe0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d128      	bne.n	800260c <HAL_TIM_IC_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025ba:	4b16      	ldr	r3, [pc, #88]	@ (8002614 <HAL_TIM_IC_MspInit+0xd8>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	4a15      	ldr	r2, [pc, #84]	@ (8002614 <HAL_TIM_IC_MspInit+0xd8>)
 80025c0:	f043 0308 	orr.w	r3, r3, #8
 80025c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025c6:	4b13      	ldr	r3, [pc, #76]	@ (8002614 <HAL_TIM_IC_MspInit+0xd8>)
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025d2:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <HAL_TIM_IC_MspInit+0xd8>)
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002614 <HAL_TIM_IC_MspInit+0xd8>)
 80025d8:	f043 0320 	orr.w	r3, r3, #32
 80025dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025de:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <HAL_TIM_IC_MspInit+0xd8>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_ENCB_TIM5_CH2_Pin|M1_ENCZ_TIM5_CH3_Pin|M1_ENCA_TIM5_CH1_Pin;
 80025ea:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80025ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 80025fc:	2306      	movs	r3, #6
 80025fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	4619      	mov	r1, r3
 8002606:	4806      	ldr	r0, [pc, #24]	@ (8002620 <HAL_TIM_IC_MspInit+0xe4>)
 8002608:	f002 fe6a 	bl	80052e0 <HAL_GPIO_Init>
}
 800260c:	bf00      	nop
 800260e:	3730      	adds	r7, #48	@ 0x30
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	48000c00 	.word	0x48000c00
 800261c:	40000c00 	.word	0x40000c00
 8002620:	48001400 	.word	0x48001400

08002624 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b090      	sub	sp, #64	@ 0x40
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a81      	ldr	r2, [pc, #516]	@ (8002848 <HAL_TIM_MspPostInit+0x224>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d13a      	bne.n	80026bc <HAL_TIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002646:	4b81      	ldr	r3, [pc, #516]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 8002648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264a:	4a80      	ldr	r2, [pc, #512]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 800264c:	f043 0310 	orr.w	r3, r3, #16
 8002650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002652:	4b7e      	ldr	r3, [pc, #504]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 8002654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800265c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265e:	4b7b      	ldr	r3, [pc, #492]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 8002660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002662:	4a7a      	ldr	r2, [pc, #488]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800266a:	4b78      	ldr	r3, [pc, #480]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = M2_PWM_WL_TIM1_CH3_Pin;
 8002676:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800267a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002688:	2302      	movs	r3, #2
 800268a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M2_PWM_WL_TIM1_CH3_GPIO_Port, &GPIO_InitStruct);
 800268c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002690:	4619      	mov	r1, r3
 8002692:	486f      	ldr	r0, [pc, #444]	@ (8002850 <HAL_TIM_MspPostInit+0x22c>)
 8002694:	f002 fe24 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M2_PWM_WL_TIM1_CH3N_Pin;
 8002698:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800269c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 80026aa:	230c      	movs	r3, #12
 80026ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M2_PWM_WL_TIM1_CH3N_GPIO_Port, &GPIO_InitStruct);
 80026ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026b2:	4619      	mov	r1, r3
 80026b4:	4867      	ldr	r0, [pc, #412]	@ (8002854 <HAL_TIM_MspPostInit+0x230>)
 80026b6:	f002 fe13 	bl	80052e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 80026ba:	e0c0      	b.n	800283e <HAL_TIM_MspPostInit+0x21a>
  else if(htim->Instance==TIM8)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a65      	ldr	r2, [pc, #404]	@ (8002858 <HAL_TIM_MspPostInit+0x234>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d11d      	bne.n	8002702 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c6:	4b61      	ldr	r3, [pc, #388]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ca:	4a60      	ldr	r2, [pc, #384]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d2:	4b5e      	ldr	r3, [pc, #376]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	623b      	str	r3, [r7, #32]
 80026dc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = M1_PWM_UH_TIM8_CH1_Pin|M1_PWM_VH_TIM8_CH2_Pin|M1_PWM_WH_TIM8_CH3_Pin|M1_PWM_UL_TIM8_CH1N_Pin
 80026de:	f44f 53ee 	mov.w	r3, #7616	@ 0x1dc0
 80026e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ec:	2300      	movs	r3, #0
 80026ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80026f0:	2304      	movs	r3, #4
 80026f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026f8:	4619      	mov	r1, r3
 80026fa:	4858      	ldr	r0, [pc, #352]	@ (800285c <HAL_TIM_MspPostInit+0x238>)
 80026fc:	f002 fdf0 	bl	80052e0 <HAL_GPIO_Init>
}
 8002700:	e09d      	b.n	800283e <HAL_TIM_MspPostInit+0x21a>
  else if(htim->Instance==TIM16)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a56      	ldr	r2, [pc, #344]	@ (8002860 <HAL_TIM_MspPostInit+0x23c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d11c      	bne.n	8002746 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800270c:	4b4f      	ldr	r3, [pc, #316]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002710:	4a4e      	ldr	r2, [pc, #312]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 8002712:	f043 0310 	orr.w	r3, r3, #16
 8002716:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002718:	4b4c      	ldr	r3, [pc, #304]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 800271a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PFC_PWM1_TIM16_CH1_Pin;
 8002724:	2301      	movs	r3, #1
 8002726:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM16;
 8002734:	2304      	movs	r3, #4
 8002736:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(PFC_PWM1_TIM16_CH1_GPIO_Port, &GPIO_InitStruct);
 8002738:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800273c:	4619      	mov	r1, r3
 800273e:	4844      	ldr	r0, [pc, #272]	@ (8002850 <HAL_TIM_MspPostInit+0x22c>)
 8002740:	f002 fdce 	bl	80052e0 <HAL_GPIO_Init>
}
 8002744:	e07b      	b.n	800283e <HAL_TIM_MspPostInit+0x21a>
  else if(htim->Instance==TIM17)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a46      	ldr	r2, [pc, #280]	@ (8002864 <HAL_TIM_MspPostInit+0x240>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d11c      	bne.n	800278a <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002750:	4b3e      	ldr	r3, [pc, #248]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 8002752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002754:	4a3d      	ldr	r2, [pc, #244]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 8002756:	f043 0310 	orr.w	r3, r3, #16
 800275a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800275c:	4b3b      	ldr	r3, [pc, #236]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 800275e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PFC_PWM2_TIM17_CH1_Pin;
 8002768:	2302      	movs	r3, #2
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM17;
 8002778:	2304      	movs	r3, #4
 800277a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(PFC_PWM2_TIM17_CH1_GPIO_Port, &GPIO_InitStruct);
 800277c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002780:	4619      	mov	r1, r3
 8002782:	4833      	ldr	r0, [pc, #204]	@ (8002850 <HAL_TIM_MspPostInit+0x22c>)
 8002784:	f002 fdac 	bl	80052e0 <HAL_GPIO_Init>
}
 8002788:	e059      	b.n	800283e <HAL_TIM_MspPostInit+0x21a>
  else if(htim->Instance==TIM20)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a36      	ldr	r2, [pc, #216]	@ (8002868 <HAL_TIM_MspPostInit+0x244>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d154      	bne.n	800283e <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002794:	4b2d      	ldr	r3, [pc, #180]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 8002796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002798:	4a2c      	ldr	r2, [pc, #176]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 800279a:	f043 0310 	orr.w	r3, r3, #16
 800279e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027a0:	4b2a      	ldr	r3, [pc, #168]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 80027a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ac:	4b27      	ldr	r3, [pc, #156]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 80027ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b0:	4a26      	ldr	r2, [pc, #152]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 80027b2:	f043 0320 	orr.w	r3, r3, #32
 80027b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b8:	4b24      	ldr	r3, [pc, #144]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 80027ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027c4:	4b21      	ldr	r3, [pc, #132]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 80027c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c8:	4a20      	ldr	r2, [pc, #128]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 80027ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027d0:	4b1e      	ldr	r3, [pc, #120]	@ (800284c <HAL_TIM_MspPostInit+0x228>)
 80027d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_WL_TIM20_CH3N_Pin;
 80027dc:	2340      	movs	r3, #64	@ 0x40
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e8:	2300      	movs	r3, #0
 80027ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 80027ec:	2306      	movs	r3, #6
 80027ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M3_PWM_WL_TIM20_CH3N_GPIO_Port, &GPIO_InitStruct);
 80027f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027f4:	4619      	mov	r1, r3
 80027f6:	4816      	ldr	r0, [pc, #88]	@ (8002850 <HAL_TIM_MspPostInit+0x22c>)
 80027f8:	f002 fd72 	bl	80052e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3_PWM_VH_TIM20_CH2_Pin|M3_PWM_WH_TIM20_CH3_Pin;
 80027fc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002800:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 800280e:	2302      	movs	r3, #2
 8002810:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002812:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002816:	4619      	mov	r1, r3
 8002818:	4814      	ldr	r0, [pc, #80]	@ (800286c <HAL_TIM_MspPostInit+0x248>)
 800281a:	f002 fd61 	bl	80052e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3_PWM_UL_TIM20_CH1N_Pin|M3_PWM_VL_TIM20_CH2N_Pin;
 800281e:	2303      	movs	r3, #3
 8002820:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2300      	movs	r3, #0
 800282c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 800282e:	2302      	movs	r3, #2
 8002830:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002832:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002836:	4619      	mov	r1, r3
 8002838:	480d      	ldr	r0, [pc, #52]	@ (8002870 <HAL_TIM_MspPostInit+0x24c>)
 800283a:	f002 fd51 	bl	80052e0 <HAL_GPIO_Init>
}
 800283e:	bf00      	nop
 8002840:	3740      	adds	r7, #64	@ 0x40
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40012c00 	.word	0x40012c00
 800284c:	40021000 	.word	0x40021000
 8002850:	48001000 	.word	0x48001000
 8002854:	48000400 	.word	0x48000400
 8002858:	40013400 	.word	0x40013400
 800285c:	48000800 	.word	0x48000800
 8002860:	40014400 	.word	0x40014400
 8002864:	40014800 	.word	0x40014800
 8002868:	40015000 	.word	0x40015000
 800286c:	48001400 	.word	0x48001400
 8002870:	48001800 	.word	0x48001800

08002874 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b0a0      	sub	sp, #128	@ 0x80
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800288c:	f107 0318 	add.w	r3, r7, #24
 8002890:	2254      	movs	r2, #84	@ 0x54
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f006 fe9f 	bl	80095d8 <memset>
  if(huart->Instance==USART1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a2e      	ldr	r2, [pc, #184]	@ (8002958 <HAL_UART_MspInit+0xe4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d154      	bne.n	800294e <HAL_UART_MspInit+0xda>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028a4:	2301      	movs	r3, #1
 80028a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ac:	f107 0318 	add.w	r3, r7, #24
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 fd61 	bl	8006378 <HAL_RCCEx_PeriphCLKConfig>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80028bc:	f7ff f918 	bl	8001af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c0:	4b26      	ldr	r3, [pc, #152]	@ (800295c <HAL_UART_MspInit+0xe8>)
 80028c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c4:	4a25      	ldr	r2, [pc, #148]	@ (800295c <HAL_UART_MspInit+0xe8>)
 80028c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80028cc:	4b23      	ldr	r3, [pc, #140]	@ (800295c <HAL_UART_MspInit+0xe8>)
 80028ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	4b20      	ldr	r3, [pc, #128]	@ (800295c <HAL_UART_MspInit+0xe8>)
 80028da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028dc:	4a1f      	ldr	r2, [pc, #124]	@ (800295c <HAL_UART_MspInit+0xe8>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028e4:	4b1d      	ldr	r3, [pc, #116]	@ (800295c <HAL_UART_MspInit+0xe8>)
 80028e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028f0:	4b1a      	ldr	r3, [pc, #104]	@ (800295c <HAL_UART_MspInit+0xe8>)
 80028f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f4:	4a19      	ldr	r2, [pc, #100]	@ (800295c <HAL_UART_MspInit+0xe8>)
 80028f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028fc:	4b17      	ldr	r3, [pc, #92]	@ (800295c <HAL_UART_MspInit+0xe8>)
 80028fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PG9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800290c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	2300      	movs	r3, #0
 8002918:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800291a:	2307      	movs	r3, #7
 800291c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002922:	4619      	mov	r1, r3
 8002924:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002928:	f002 fcda 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800292c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002930:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	2300      	movs	r3, #0
 800293c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800293e:	2307      	movs	r3, #7
 8002940:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002942:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002946:	4619      	mov	r1, r3
 8002948:	4805      	ldr	r0, [pc, #20]	@ (8002960 <HAL_UART_MspInit+0xec>)
 800294a:	f002 fcc9 	bl	80052e0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800294e:	bf00      	nop
 8002950:	3780      	adds	r7, #128	@ 0x80
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40013800 	.word	0x40013800
 800295c:	40021000 	.word	0x40021000
 8002960:	48001800 	.word	0x48001800

08002964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002968:	bf00      	nop
 800296a:	e7fd      	b.n	8002968 <NMI_Handler+0x4>

0800296c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <HardFault_Handler+0x4>

08002974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <MemManage_Handler+0x4>

0800297c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <BusFault_Handler+0x4>

08002984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <UsageFault_Handler+0x4>

0800298c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ba:	f000 f8db 	bl	8002b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80029c8:	4802      	ldr	r0, [pc, #8]	@ (80029d4 <DMA1_Channel1_IRQHandler+0x10>)
 80029ca:	f002 fb3a 	bl	8005042 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200001bc 	.word	0x200001bc

080029d8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80029dc:	4802      	ldr	r0, [pc, #8]	@ (80029e8 <ADC1_2_IRQHandler+0x10>)
 80029de:	f000 fdd9 	bl	8003594 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000078 	.word	0x20000078

080029ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f4:	4a14      	ldr	r2, [pc, #80]	@ (8002a48 <_sbrk+0x5c>)
 80029f6:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <_sbrk+0x60>)
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a00:	4b13      	ldr	r3, [pc, #76]	@ (8002a50 <_sbrk+0x64>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a08:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <_sbrk+0x64>)
 8002a0a:	4a12      	ldr	r2, [pc, #72]	@ (8002a54 <_sbrk+0x68>)
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a0e:	4b10      	ldr	r3, [pc, #64]	@ (8002a50 <_sbrk+0x64>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d207      	bcs.n	8002a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a1c:	f006 fde4 	bl	80095e8 <__errno>
 8002a20:	4603      	mov	r3, r0
 8002a22:	220c      	movs	r2, #12
 8002a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	e009      	b.n	8002a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <_sbrk+0x64>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a32:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <_sbrk+0x64>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	4a05      	ldr	r2, [pc, #20]	@ (8002a50 <_sbrk+0x64>)
 8002a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20020000 	.word	0x20020000
 8002a4c:	00000400 	.word	0x00000400
 8002a50:	200006b4 	.word	0x200006b4
 8002a54:	20000808 	.word	0x20000808

08002a58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a5c:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <SystemInit+0x20>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a62:	4a05      	ldr	r2, [pc, #20]	@ (8002a78 <SystemInit+0x20>)
 8002a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a7c:	480d      	ldr	r0, [pc, #52]	@ (8002ab4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a7e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a80:	f7ff ffea 	bl	8002a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a84:	480c      	ldr	r0, [pc, #48]	@ (8002ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a86:	490d      	ldr	r1, [pc, #52]	@ (8002abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a88:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac0 <LoopForever+0xe>)
  movs r3, #0
 8002a8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002a8c:	e002      	b.n	8002a94 <LoopCopyDataInit>

08002a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a92:	3304      	adds	r3, #4

08002a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a98:	d3f9      	bcc.n	8002a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ac8 <LoopForever+0x16>)
  movs r3, #0
 8002a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aa0:	e001      	b.n	8002aa6 <LoopFillZerobss>

08002aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa4:	3204      	adds	r2, #4

08002aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa8:	d3fb      	bcc.n	8002aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aaa:	f006 fda3 	bl	80095f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002aae:	f7fd fdb5 	bl	800061c <main>

08002ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ab2:	e7fe      	b.n	8002ab2 <LoopForever>
  ldr   r0, =_estack
 8002ab4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002abc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002ac0:	08009f78 	.word	0x08009f78
  ldr r2, =_sbss
 8002ac4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002ac8:	20000804 	.word	0x20000804

08002acc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002acc:	e7fe      	b.n	8002acc <ADC3_IRQHandler>

08002ace <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad8:	2003      	movs	r0, #3
 8002ada:	f001 ff73 	bl	80049c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f000 f80e 	bl	8002b00 <HAL_InitTick>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	71fb      	strb	r3, [r7, #7]
 8002aee:	e001      	b.n	8002af4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002af0:	f7ff f804 	bl	8001afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002af4:	79fb      	ldrb	r3, [r7, #7]

}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002b0c:	4b16      	ldr	r3, [pc, #88]	@ (8002b68 <HAL_InitTick+0x68>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d022      	beq.n	8002b5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002b14:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <HAL_InitTick+0x6c>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b13      	ldr	r3, [pc, #76]	@ (8002b68 <HAL_InitTick+0x68>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f001 ff7e 	bl	8004a2a <HAL_SYSTICK_Config>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10f      	bne.n	8002b54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b0f      	cmp	r3, #15
 8002b38:	d809      	bhi.n	8002b4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b42:	f001 ff4a 	bl	80049da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b46:	4a0a      	ldr	r2, [pc, #40]	@ (8002b70 <HAL_InitTick+0x70>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	e007      	b.n	8002b5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
 8002b52:	e004      	b.n	8002b5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
 8002b58:	e001      	b.n	8002b5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000008 	.word	0x20000008
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	20000004 	.word	0x20000004

08002b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b78:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <HAL_IncTick+0x1c>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <HAL_IncTick+0x20>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4413      	add	r3, r2
 8002b82:	4a03      	ldr	r2, [pc, #12]	@ (8002b90 <HAL_IncTick+0x1c>)
 8002b84:	6013      	str	r3, [r2, #0]
}
 8002b86:	bf00      	nop
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	200006b8 	.word	0x200006b8
 8002b94:	20000008 	.word	0x20000008

08002b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	@ (8002bac <HAL_GetTick+0x14>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	200006b8 	.word	0x200006b8

08002bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb8:	f7ff ffee 	bl	8002b98 <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d004      	beq.n	8002bd4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bca:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <HAL_Delay+0x40>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bd4:	bf00      	nop
 8002bd6:	f7ff ffdf 	bl	8002b98 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d8f7      	bhi.n	8002bd6 <HAL_Delay+0x26>
  {
  }
}
 8002be6:	bf00      	nop
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000008 	.word	0x20000008

08002bf4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	609a      	str	r2, [r3, #8]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3360      	adds	r3, #96	@ 0x60
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <LL_ADC_SetOffset+0x44>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	03fff000 	.word	0x03fff000

08002ca4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3360      	adds	r3, #96	@ 0x60
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3360      	adds	r3, #96	@ 0x60
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002cfa:	bf00      	nop
 8002cfc:	371c      	adds	r7, #28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b087      	sub	sp, #28
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3360      	adds	r3, #96	@ 0x60
 8002d16:	461a      	mov	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3360      	adds	r3, #96	@ 0x60
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002d66:	bf00      	nop
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	615a      	str	r2, [r3, #20]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b087      	sub	sp, #28
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3330      	adds	r3, #48	@ 0x30
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	4413      	add	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	211f      	movs	r1, #31
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	401a      	ands	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0e9b      	lsrs	r3, r3, #26
 8002df6:	f003 011f 	and.w	r1, r3, #31
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	431a      	orrs	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e0a:	bf00      	nop
 8002e0c:	371c      	adds	r7, #28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e22:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3314      	adds	r3, #20
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	0e5b      	lsrs	r3, r3, #25
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	4413      	add	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	0d1b      	lsrs	r3, r3, #20
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	2107      	movs	r1, #7
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	401a      	ands	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	0d1b      	lsrs	r3, r3, #20
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	431a      	orrs	r2, r3
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eac:	43db      	mvns	r3, r3
 8002eae:	401a      	ands	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0318 	and.w	r3, r3, #24
 8002eb6:	4908      	ldr	r1, [pc, #32]	@ (8002ed8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002eb8:	40d9      	lsrs	r1, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	0007ffff 	.word	0x0007ffff

08002edc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002f24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6093      	str	r3, [r2, #8]
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f4c:	d101      	bne.n	8002f52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002f70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f9c:	d101      	bne.n	8002fa2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <LL_ADC_IsEnabled+0x18>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <LL_ADC_IsEnabled+0x1a>
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800300e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003012:	f043 0204 	orr.w	r2, r3, #4
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b04      	cmp	r3, #4
 8003038:	d101      	bne.n	800303e <LL_ADC_REG_IsConversionOngoing+0x18>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b08      	cmp	r3, #8
 800305e:	d101      	bne.n	8003064 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b089      	sub	sp, #36	@ 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e1a9      	b.n	80033e2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003098:	2b00      	cmp	r3, #0
 800309a:	d109      	bne.n	80030b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fe fd51 	bl	8001b44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff3f 	bl	8002f38 <LL_ADC_IsDeepPowerDownEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff25 	bl	8002f14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff ff5a 	bl	8002f88 <LL_ADC_IsInternalRegulatorEnabled>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d115      	bne.n	8003106 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ff3e 	bl	8002f60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030e4:	4b9c      	ldr	r3, [pc, #624]	@ (8003358 <HAL_ADC_Init+0x2e4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	4a9c      	ldr	r2, [pc, #624]	@ (800335c <HAL_ADC_Init+0x2e8>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	099b      	lsrs	r3, r3, #6
 80030f2:	3301      	adds	r3, #1
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80030f8:	e002      	b.n	8003100 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f9      	bne.n	80030fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff3c 	bl	8002f88 <LL_ADC_IsInternalRegulatorEnabled>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10d      	bne.n	8003132 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311a:	f043 0210 	orr.w	r2, r3, #16
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003126:	f043 0201 	orr.w	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff ff75 	bl	8003026 <LL_ADC_REG_IsConversionOngoing>
 800313c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 8142 	bne.w	80033d0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 813e 	bne.w	80033d0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003158:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800315c:	f043 0202 	orr.w	r2, r3, #2
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff35 	bl	8002fd8 <LL_ADC_IsEnabled>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d141      	bne.n	80031f8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800317c:	d004      	beq.n	8003188 <HAL_ADC_Init+0x114>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a77      	ldr	r2, [pc, #476]	@ (8003360 <HAL_ADC_Init+0x2ec>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d10f      	bne.n	80031a8 <HAL_ADC_Init+0x134>
 8003188:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800318c:	f7ff ff24 	bl	8002fd8 <LL_ADC_IsEnabled>
 8003190:	4604      	mov	r4, r0
 8003192:	4873      	ldr	r0, [pc, #460]	@ (8003360 <HAL_ADC_Init+0x2ec>)
 8003194:	f7ff ff20 	bl	8002fd8 <LL_ADC_IsEnabled>
 8003198:	4603      	mov	r3, r0
 800319a:	4323      	orrs	r3, r4
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e012      	b.n	80031ce <HAL_ADC_Init+0x15a>
 80031a8:	486e      	ldr	r0, [pc, #440]	@ (8003364 <HAL_ADC_Init+0x2f0>)
 80031aa:	f7ff ff15 	bl	8002fd8 <LL_ADC_IsEnabled>
 80031ae:	4604      	mov	r4, r0
 80031b0:	486d      	ldr	r0, [pc, #436]	@ (8003368 <HAL_ADC_Init+0x2f4>)
 80031b2:	f7ff ff11 	bl	8002fd8 <LL_ADC_IsEnabled>
 80031b6:	4603      	mov	r3, r0
 80031b8:	431c      	orrs	r4, r3
 80031ba:	486c      	ldr	r0, [pc, #432]	@ (800336c <HAL_ADC_Init+0x2f8>)
 80031bc:	f7ff ff0c 	bl	8002fd8 <LL_ADC_IsEnabled>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4323      	orrs	r3, r4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d012      	beq.n	80031f8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031da:	d004      	beq.n	80031e6 <HAL_ADC_Init+0x172>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a5f      	ldr	r2, [pc, #380]	@ (8003360 <HAL_ADC_Init+0x2ec>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_Init+0x176>
 80031e6:	4a62      	ldr	r2, [pc, #392]	@ (8003370 <HAL_ADC_Init+0x2fc>)
 80031e8:	e000      	b.n	80031ec <HAL_ADC_Init+0x178>
 80031ea:	4a62      	ldr	r2, [pc, #392]	@ (8003374 <HAL_ADC_Init+0x300>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f7ff fcfe 	bl	8002bf4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	7f5b      	ldrb	r3, [r3, #29]
 80031fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003202:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003208:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800320e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003216:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003222:	2b01      	cmp	r3, #1
 8003224:	d106      	bne.n	8003234 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322a:	3b01      	subs	r3, #1
 800322c:	045b      	lsls	r3, r3, #17
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d009      	beq.n	8003250 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	4b48      	ldr	r3, [pc, #288]	@ (8003378 <HAL_ADC_Init+0x304>)
 8003258:	4013      	ands	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	69b9      	ldr	r1, [r7, #24]
 8003260:	430b      	orrs	r3, r1
 8003262:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fee4 	bl	800304c <LL_ADC_INJ_IsConversionOngoing>
 8003284:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d17f      	bne.n	800338c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d17c      	bne.n	800338c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003296:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800329e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032ae:	f023 0302 	bic.w	r3, r3, #2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	69b9      	ldr	r1, [r7, #24]
 80032b8:	430b      	orrs	r3, r1
 80032ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d017      	beq.n	80032f4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80032d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80032dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80032e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6911      	ldr	r1, [r2, #16]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80032f2:	e013      	b.n	800331c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003302:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003314:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003318:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003322:	2b01      	cmp	r3, #1
 8003324:	d12a      	bne.n	800337c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800333c:	4311      	orrs	r1, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003342:	4311      	orrs	r1, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003348:	430a      	orrs	r2, r1
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	611a      	str	r2, [r3, #16]
 8003356:	e019      	b.n	800338c <HAL_ADC_Init+0x318>
 8003358:	20000000 	.word	0x20000000
 800335c:	053e2d63 	.word	0x053e2d63
 8003360:	50000100 	.word	0x50000100
 8003364:	50000400 	.word	0x50000400
 8003368:	50000500 	.word	0x50000500
 800336c:	50000600 	.word	0x50000600
 8003370:	50000300 	.word	0x50000300
 8003374:	50000700 	.word	0x50000700
 8003378:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d10c      	bne.n	80033ae <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	f023 010f 	bic.w	r1, r3, #15
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	1e5a      	subs	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80033ac:	e007      	b.n	80033be <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 020f 	bic.w	r2, r2, #15
 80033bc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c2:	f023 0303 	bic.w	r3, r3, #3
 80033c6:	f043 0201 	orr.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033ce:	e007      	b.n	80033e0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d4:	f043 0210 	orr.w	r2, r3, #16
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3724      	adds	r7, #36	@ 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd90      	pop	{r4, r7, pc}
 80033ea:	bf00      	nop

080033ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003400:	d004      	beq.n	800340c <HAL_ADC_Start_DMA+0x20>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a5a      	ldr	r2, [pc, #360]	@ (8003570 <HAL_ADC_Start_DMA+0x184>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d101      	bne.n	8003410 <HAL_ADC_Start_DMA+0x24>
 800340c:	4b59      	ldr	r3, [pc, #356]	@ (8003574 <HAL_ADC_Start_DMA+0x188>)
 800340e:	e000      	b.n	8003412 <HAL_ADC_Start_DMA+0x26>
 8003410:	4b59      	ldr	r3, [pc, #356]	@ (8003578 <HAL_ADC_Start_DMA+0x18c>)
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fd62 	bl	8002edc <LL_ADC_GetMultimode>
 8003418:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fe01 	bl	8003026 <LL_ADC_REG_IsConversionOngoing>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	f040 809b 	bne.w	8003562 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_ADC_Start_DMA+0x4e>
 8003436:	2302      	movs	r3, #2
 8003438:	e096      	b.n	8003568 <HAL_ADC_Start_DMA+0x17c>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a4d      	ldr	r2, [pc, #308]	@ (800357c <HAL_ADC_Start_DMA+0x190>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d008      	beq.n	800345e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b05      	cmp	r3, #5
 8003456:	d002      	beq.n	800345e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2b09      	cmp	r3, #9
 800345c:	d17a      	bne.n	8003554 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 ff56 	bl	8004310 <ADC_Enable>
 8003464:	4603      	mov	r3, r0
 8003466:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d16d      	bne.n	800354a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003472:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a3a      	ldr	r2, [pc, #232]	@ (8003570 <HAL_ADC_Start_DMA+0x184>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d009      	beq.n	80034a0 <HAL_ADC_Start_DMA+0xb4>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a3b      	ldr	r2, [pc, #236]	@ (8003580 <HAL_ADC_Start_DMA+0x194>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d002      	beq.n	800349c <HAL_ADC_Start_DMA+0xb0>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	e003      	b.n	80034a4 <HAL_ADC_Start_DMA+0xb8>
 800349c:	4b39      	ldr	r3, [pc, #228]	@ (8003584 <HAL_ADC_Start_DMA+0x198>)
 800349e:	e001      	b.n	80034a4 <HAL_ADC_Start_DMA+0xb8>
 80034a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d002      	beq.n	80034b2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d006      	beq.n	80034d8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ce:	f023 0206 	bic.w	r2, r3, #6
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	661a      	str	r2, [r3, #96]	@ 0x60
 80034d6:	e002      	b.n	80034de <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e2:	4a29      	ldr	r2, [pc, #164]	@ (8003588 <HAL_ADC_Start_DMA+0x19c>)
 80034e4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ea:	4a28      	ldr	r2, [pc, #160]	@ (800358c <HAL_ADC_Start_DMA+0x1a0>)
 80034ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f2:	4a27      	ldr	r2, [pc, #156]	@ (8003590 <HAL_ADC_Start_DMA+0x1a4>)
 80034f4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	221c      	movs	r2, #28
 80034fc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0210 	orr.w	r2, r2, #16
 8003514:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0201 	orr.w	r2, r2, #1
 8003524:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3340      	adds	r3, #64	@ 0x40
 8003530:	4619      	mov	r1, r3
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f001 fd09 	bl	8004f4c <HAL_DMA_Start_IT>
 800353a:	4603      	mov	r3, r0
 800353c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fd5b 	bl	8002ffe <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003548:	e00d      	b.n	8003566 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003552:	e008      	b.n	8003566 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003560:	e001      	b.n	8003566 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003562:	2302      	movs	r3, #2
 8003564:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003566:	7dfb      	ldrb	r3, [r7, #23]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	50000100 	.word	0x50000100
 8003574:	50000300 	.word	0x50000300
 8003578:	50000700 	.word	0x50000700
 800357c:	50000600 	.word	0x50000600
 8003580:	50000500 	.word	0x50000500
 8003584:	50000400 	.word	0x50000400
 8003588:	0800443d 	.word	0x0800443d
 800358c:	08004515 	.word	0x08004515
 8003590:	08004531 	.word	0x08004531

08003594 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	@ 0x28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800359c:	2300      	movs	r3, #0
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035b8:	d004      	beq.n	80035c4 <HAL_ADC_IRQHandler+0x30>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a8e      	ldr	r2, [pc, #568]	@ (80037f8 <HAL_ADC_IRQHandler+0x264>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_IRQHandler+0x34>
 80035c4:	4b8d      	ldr	r3, [pc, #564]	@ (80037fc <HAL_ADC_IRQHandler+0x268>)
 80035c6:	e000      	b.n	80035ca <HAL_ADC_IRQHandler+0x36>
 80035c8:	4b8d      	ldr	r3, [pc, #564]	@ (8003800 <HAL_ADC_IRQHandler+0x26c>)
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fc86 	bl	8002edc <LL_ADC_GetMultimode>
 80035d0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d017      	beq.n	800360c <HAL_ADC_IRQHandler+0x78>
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d012      	beq.n	800360c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d105      	bne.n	80035fe <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fffe 	bl	8004600 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2202      	movs	r2, #2
 800360a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b00      	cmp	r3, #0
 8003614:	d004      	beq.n	8003620 <HAL_ADC_IRQHandler+0x8c>
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8094 	beq.w	8003754 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 808e 	beq.w	8003754 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	d105      	bne.n	8003650 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003648:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fb9f 	bl	8002d98 <LL_ADC_REG_IsTriggerSourceSWStart>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d072      	beq.n	8003746 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a64      	ldr	r2, [pc, #400]	@ (80037f8 <HAL_ADC_IRQHandler+0x264>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d009      	beq.n	800367e <HAL_ADC_IRQHandler+0xea>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a65      	ldr	r2, [pc, #404]	@ (8003804 <HAL_ADC_IRQHandler+0x270>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d002      	beq.n	800367a <HAL_ADC_IRQHandler+0xe6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	e003      	b.n	8003682 <HAL_ADC_IRQHandler+0xee>
 800367a:	4b63      	ldr	r3, [pc, #396]	@ (8003808 <HAL_ADC_IRQHandler+0x274>)
 800367c:	e001      	b.n	8003682 <HAL_ADC_IRQHandler+0xee>
 800367e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	4293      	cmp	r3, r2
 8003688:	d008      	beq.n	800369c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b05      	cmp	r3, #5
 8003694:	d002      	beq.n	800369c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b09      	cmp	r3, #9
 800369a:	d104      	bne.n	80036a6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	623b      	str	r3, [r7, #32]
 80036a4:	e014      	b.n	80036d0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a53      	ldr	r2, [pc, #332]	@ (80037f8 <HAL_ADC_IRQHandler+0x264>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d009      	beq.n	80036c4 <HAL_ADC_IRQHandler+0x130>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a53      	ldr	r2, [pc, #332]	@ (8003804 <HAL_ADC_IRQHandler+0x270>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d002      	beq.n	80036c0 <HAL_ADC_IRQHandler+0x12c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	e003      	b.n	80036c8 <HAL_ADC_IRQHandler+0x134>
 80036c0:	4b51      	ldr	r3, [pc, #324]	@ (8003808 <HAL_ADC_IRQHandler+0x274>)
 80036c2:	e001      	b.n	80036c8 <HAL_ADC_IRQHandler+0x134>
 80036c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036c8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d135      	bne.n	8003746 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d12e      	bne.n	8003746 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fc9a 	bl	8003026 <LL_ADC_REG_IsConversionOngoing>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d11a      	bne.n	800372e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 020c 	bic.w	r2, r2, #12
 8003706:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d112      	bne.n	8003746 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003724:	f043 0201 	orr.w	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800372c:	e00b      	b.n	8003746 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003732:	f043 0210 	orr.w	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fc ff58 	bl	80005fc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	220c      	movs	r2, #12
 8003752:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <HAL_ADC_IRQHandler+0x1d4>
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10b      	bne.n	8003780 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80b3 	beq.w	80038da <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80ad 	beq.w	80038da <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	d105      	bne.n	8003798 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003790:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fb3a 	bl	8002e16 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80037a2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff faf5 	bl	8002d98 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037ae:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a10      	ldr	r2, [pc, #64]	@ (80037f8 <HAL_ADC_IRQHandler+0x264>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d009      	beq.n	80037ce <HAL_ADC_IRQHandler+0x23a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a11      	ldr	r2, [pc, #68]	@ (8003804 <HAL_ADC_IRQHandler+0x270>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d002      	beq.n	80037ca <HAL_ADC_IRQHandler+0x236>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	e003      	b.n	80037d2 <HAL_ADC_IRQHandler+0x23e>
 80037ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003808 <HAL_ADC_IRQHandler+0x274>)
 80037cc:	e001      	b.n	80037d2 <HAL_ADC_IRQHandler+0x23e>
 80037ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d008      	beq.n	80037ec <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b06      	cmp	r3, #6
 80037e4:	d002      	beq.n	80037ec <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b07      	cmp	r3, #7
 80037ea:	d10f      	bne.n	800380c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	623b      	str	r3, [r7, #32]
 80037f4:	e01f      	b.n	8003836 <HAL_ADC_IRQHandler+0x2a2>
 80037f6:	bf00      	nop
 80037f8:	50000100 	.word	0x50000100
 80037fc:	50000300 	.word	0x50000300
 8003800:	50000700 	.word	0x50000700
 8003804:	50000500 	.word	0x50000500
 8003808:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a8b      	ldr	r2, [pc, #556]	@ (8003a40 <HAL_ADC_IRQHandler+0x4ac>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d009      	beq.n	800382a <HAL_ADC_IRQHandler+0x296>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a8a      	ldr	r2, [pc, #552]	@ (8003a44 <HAL_ADC_IRQHandler+0x4b0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d002      	beq.n	8003826 <HAL_ADC_IRQHandler+0x292>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	e003      	b.n	800382e <HAL_ADC_IRQHandler+0x29a>
 8003826:	4b88      	ldr	r3, [pc, #544]	@ (8003a48 <HAL_ADC_IRQHandler+0x4b4>)
 8003828:	e001      	b.n	800382e <HAL_ADC_IRQHandler+0x29a>
 800382a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800382e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d047      	beq.n	80038cc <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d007      	beq.n	8003856 <HAL_ADC_IRQHandler+0x2c2>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d03f      	beq.n	80038cc <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003852:	2b00      	cmp	r3, #0
 8003854:	d13a      	bne.n	80038cc <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003860:	2b40      	cmp	r3, #64	@ 0x40
 8003862:	d133      	bne.n	80038cc <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d12e      	bne.n	80038cc <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff fbea 	bl	800304c <LL_ADC_INJ_IsConversionOngoing>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d11a      	bne.n	80038b4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800388c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003892:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d112      	bne.n	80038cc <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038aa:	f043 0201 	orr.w	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038b2:	e00b      	b.n	80038cc <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b8:	f043 0210 	orr.w	r2, r3, #16
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c4:	f043 0201 	orr.w	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fe6f 	bl	80045b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2260      	movs	r2, #96	@ 0x60
 80038d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d011      	beq.n	8003908 <HAL_ADC_IRQHandler+0x374>
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00c      	beq.n	8003908 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f8b4 	bl	8003a68 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2280      	movs	r2, #128	@ 0x80
 8003906:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d012      	beq.n	8003938 <HAL_ADC_IRQHandler+0x3a4>
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00d      	beq.n	8003938 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003920:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 fe55 	bl	80045d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003936:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800393e:	2b00      	cmp	r3, #0
 8003940:	d012      	beq.n	8003968 <HAL_ADC_IRQHandler+0x3d4>
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003950:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fe47 	bl	80045ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003966:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2b00      	cmp	r3, #0
 8003970:	d043      	beq.n	80039fa <HAL_ADC_IRQHandler+0x466>
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d03e      	beq.n	80039fa <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003984:	2301      	movs	r3, #1
 8003986:	627b      	str	r3, [r7, #36]	@ 0x24
 8003988:	e021      	b.n	80039ce <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d015      	beq.n	80039bc <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003998:	d004      	beq.n	80039a4 <HAL_ADC_IRQHandler+0x410>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a28      	ldr	r2, [pc, #160]	@ (8003a40 <HAL_ADC_IRQHandler+0x4ac>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d101      	bne.n	80039a8 <HAL_ADC_IRQHandler+0x414>
 80039a4:	4b29      	ldr	r3, [pc, #164]	@ (8003a4c <HAL_ADC_IRQHandler+0x4b8>)
 80039a6:	e000      	b.n	80039aa <HAL_ADC_IRQHandler+0x416>
 80039a8:	4b29      	ldr	r3, [pc, #164]	@ (8003a50 <HAL_ADC_IRQHandler+0x4bc>)
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff faa4 	bl	8002ef8 <LL_ADC_GetMultiDMATransfer>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80039b6:	2301      	movs	r3, #1
 80039b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ba:	e008      	b.n	80039ce <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80039ca:	2301      	movs	r3, #1
 80039cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d10e      	bne.n	80039f2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e4:	f043 0202 	orr.w	r2, r3, #2
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f845 	bl	8003a7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2210      	movs	r2, #16
 80039f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d018      	beq.n	8003a36 <HAL_ADC_IRQHandler+0x4a2>
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d013      	beq.n	8003a36 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a12:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1e:	f043 0208 	orr.w	r2, r3, #8
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a2e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fdc7 	bl	80045c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003a36:	bf00      	nop
 8003a38:	3728      	adds	r7, #40	@ 0x28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	50000100 	.word	0x50000100
 8003a44:	50000500 	.word	0x50000500
 8003a48:	50000400 	.word	0x50000400
 8003a4c:	50000300 	.word	0x50000300
 8003a50:	50000700 	.word	0x50000700

08003a54 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b0b6      	sub	sp, #216	@ 0xd8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d102      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x24>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	f000 bc13 	b.w	80042da <HAL_ADC_ConfigChannel+0x84a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fab0 	bl	8003026 <LL_ADC_REG_IsConversionOngoing>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f040 83f3 	bne.w	80042b4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f7ff f96f 	bl	8002dbe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff fa9e 	bl	8003026 <LL_ADC_REG_IsConversionOngoing>
 8003aea:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff faaa 	bl	800304c <LL_ADC_INJ_IsConversionOngoing>
 8003af8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003afc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f040 81d9 	bne.w	8003eb8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f040 81d4 	bne.w	8003eb8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b18:	d10f      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	4619      	mov	r1, r3
 8003b26:	f7ff f989 	bl	8002e3c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff f91d 	bl	8002d72 <LL_ADC_SetSamplingTimeCommonConfig>
 8003b38:	e00e      	b.n	8003b58 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6819      	ldr	r1, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f7ff f978 	bl	8002e3c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff f90d 	bl	8002d72 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	08db      	lsrs	r3, r3, #3
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d022      	beq.n	8003bc0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6919      	ldr	r1, [r3, #16]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b8a:	f7ff f867 	bl	8002c5c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6919      	ldr	r1, [r3, #16]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f7ff f8b3 	bl	8002d06 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d102      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0x126>
 8003bb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bb4:	e000      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x128>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f7ff f8bf 	bl	8002d3c <LL_ADC_SetOffsetSaturation>
 8003bbe:	e17b      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f86c 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x15c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2100      	movs	r1, #0
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff f861 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003be2:	4603      	mov	r3, r0
 8003be4:	0e9b      	lsrs	r3, r3, #26
 8003be6:	f003 021f 	and.w	r2, r3, #31
 8003bea:	e01e      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x19a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff f856 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003c1a:	2320      	movs	r3, #32
 8003c1c:	e004      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003c1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c22:	fab3 f383 	clz	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d105      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x1b2>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	0e9b      	lsrs	r3, r3, #26
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	e018      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x1e4>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c4e:	fa93 f3a3 	rbit	r3, r3
 8003c52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003c5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003c66:	2320      	movs	r3, #32
 8003c68:	e004      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d106      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff f825 	bl	8002cd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff f809 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0x222>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe fffe 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	0e9b      	lsrs	r3, r3, #26
 8003cac:	f003 021f 	and.w	r2, r3, #31
 8003cb0:	e01e      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x260>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fe fff3 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cc8:	fa93 f3a3 	rbit	r3, r3
 8003ccc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003cd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	e004      	b.n	8003cee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003ce4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x278>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	0e9b      	lsrs	r3, r3, #26
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	e018      	b.n	8003d3a <HAL_ADC_ConfigChannel+0x2aa>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d14:	fa93 f3a3 	rbit	r3, r3
 8003d18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003d1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003d2c:	2320      	movs	r3, #32
 8003d2e:	e004      	b.n	8003d3a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d34:	fab3 f383 	clz	r3, r3
 8003d38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d106      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2200      	movs	r2, #0
 8003d44:	2101      	movs	r1, #1
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe ffc2 	bl	8002cd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2102      	movs	r1, #2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe ffa6 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x2e8>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2102      	movs	r1, #2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fe ff9b 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	0e9b      	lsrs	r3, r3, #26
 8003d72:	f003 021f 	and.w	r2, r3, #31
 8003d76:	e01e      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x326>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe ff90 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003d9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003da6:	2320      	movs	r3, #32
 8003da8:	e004      	b.n	8003db4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003daa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003dae:	fab3 f383 	clz	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d105      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x33e>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	0e9b      	lsrs	r3, r3, #26
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	e016      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x36c>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003dda:	fa93 f3a3 	rbit	r3, r3
 8003dde:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003de0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003de2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003dee:	2320      	movs	r3, #32
 8003df0:	e004      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d106      	bne.n	8003e0e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2200      	movs	r2, #0
 8003e06:	2102      	movs	r1, #2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe ff61 	bl	8002cd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2103      	movs	r1, #3
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe ff45 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x3aa>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2103      	movs	r1, #3
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe ff3a 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003e30:	4603      	mov	r3, r0
 8003e32:	0e9b      	lsrs	r3, r3, #26
 8003e34:	f003 021f 	and.w	r2, r3, #31
 8003e38:	e017      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x3da>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2103      	movs	r1, #3
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe ff2f 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003e46:	4603      	mov	r3, r0
 8003e48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e4c:	fa93 f3a3 	rbit	r3, r3
 8003e50:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003e52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e54:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003e56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003e5c:	2320      	movs	r3, #32
 8003e5e:	e003      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003e60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d105      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x3f2>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	0e9b      	lsrs	r3, r3, #26
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	e011      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x416>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003e90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e92:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003e94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003e9a:	2320      	movs	r3, #32
 8003e9c:	e003      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d106      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2103      	movs	r1, #3
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe ff0c 	bl	8002cd0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff f88b 	bl	8002fd8 <LL_ADC_IsEnabled>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f040 813d 	bne.w	8004144 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6819      	ldr	r1, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f7fe ffdc 	bl	8002e94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4aa2      	ldr	r2, [pc, #648]	@ (800416c <HAL_ADC_ConfigChannel+0x6dc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	f040 812e 	bne.w	8004144 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10b      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x480>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	0e9b      	lsrs	r3, r3, #26
 8003efe:	3301      	adds	r3, #1
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	2b09      	cmp	r3, #9
 8003f06:	bf94      	ite	ls
 8003f08:	2301      	movls	r3, #1
 8003f0a:	2300      	movhi	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	e019      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x4b4>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003f1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f20:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003f22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003f28:	2320      	movs	r3, #32
 8003f2a:	e003      	b.n	8003f34 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003f2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	3301      	adds	r3, #1
 8003f36:	f003 031f 	and.w	r3, r3, #31
 8003f3a:	2b09      	cmp	r3, #9
 8003f3c:	bf94      	ite	ls
 8003f3e:	2301      	movls	r3, #1
 8003f40:	2300      	movhi	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d079      	beq.n	800403c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d107      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x4d4>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	0e9b      	lsrs	r3, r3, #26
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	069b      	lsls	r3, r3, #26
 8003f5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f62:	e015      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x500>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f6c:	fa93 f3a3 	rbit	r3, r3
 8003f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f74:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003f7c:	2320      	movs	r3, #32
 8003f7e:	e003      	b.n	8003f88 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f82:	fab3 f383 	clz	r3, r3
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	3301      	adds	r3, #1
 8003f8a:	069b      	lsls	r3, r3, #26
 8003f8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d109      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x520>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	0e9b      	lsrs	r3, r3, #26
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	2101      	movs	r1, #1
 8003faa:	fa01 f303 	lsl.w	r3, r1, r3
 8003fae:	e017      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x550>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fb8:	fa93 f3a3 	rbit	r3, r3
 8003fbc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003fc8:	2320      	movs	r3, #32
 8003fca:	e003      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003fcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fce:	fab3 f383 	clz	r3, r3
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	f003 031f 	and.w	r3, r3, #31
 8003fda:	2101      	movs	r1, #1
 8003fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe0:	ea42 0103 	orr.w	r1, r2, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x576>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	0e9b      	lsrs	r3, r3, #26
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	f003 021f 	and.w	r2, r3, #31
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	4413      	add	r3, r2
 8004002:	051b      	lsls	r3, r3, #20
 8004004:	e018      	b.n	8004038 <HAL_ADC_ConfigChannel+0x5a8>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400e:	fa93 f3a3 	rbit	r3, r3
 8004012:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800401e:	2320      	movs	r3, #32
 8004020:	e003      	b.n	800402a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004024:	fab3 f383 	clz	r3, r3
 8004028:	b2db      	uxtb	r3, r3
 800402a:	3301      	adds	r3, #1
 800402c:	f003 021f 	and.w	r2, r3, #31
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004038:	430b      	orrs	r3, r1
 800403a:	e07e      	b.n	800413a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004044:	2b00      	cmp	r3, #0
 8004046:	d107      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x5c8>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	0e9b      	lsrs	r3, r3, #26
 800404e:	3301      	adds	r3, #1
 8004050:	069b      	lsls	r3, r3, #26
 8004052:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004056:	e015      	b.n	8004084 <HAL_ADC_ConfigChannel+0x5f4>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004060:	fa93 f3a3 	rbit	r3, r3
 8004064:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004068:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800406a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004070:	2320      	movs	r3, #32
 8004072:	e003      	b.n	800407c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	3301      	adds	r3, #1
 800407e:	069b      	lsls	r3, r3, #26
 8004080:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x614>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	0e9b      	lsrs	r3, r3, #26
 8004096:	3301      	adds	r3, #1
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	2101      	movs	r1, #1
 800409e:	fa01 f303 	lsl.w	r3, r1, r3
 80040a2:	e017      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x644>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	fa93 f3a3 	rbit	r3, r3
 80040b0:	61fb      	str	r3, [r7, #28]
  return result;
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80040bc:	2320      	movs	r3, #32
 80040be:	e003      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80040c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c2:	fab3 f383 	clz	r3, r3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	3301      	adds	r3, #1
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	2101      	movs	r1, #1
 80040d0:	fa01 f303 	lsl.w	r3, r1, r3
 80040d4:	ea42 0103 	orr.w	r1, r2, r3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10d      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x670>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	0e9b      	lsrs	r3, r3, #26
 80040ea:	3301      	adds	r3, #1
 80040ec:	f003 021f 	and.w	r2, r3, #31
 80040f0:	4613      	mov	r3, r2
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	4413      	add	r3, r2
 80040f6:	3b1e      	subs	r3, #30
 80040f8:	051b      	lsls	r3, r3, #20
 80040fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80040fe:	e01b      	b.n	8004138 <HAL_ADC_ConfigChannel+0x6a8>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	fa93 f3a3 	rbit	r3, r3
 800410c:	613b      	str	r3, [r7, #16]
  return result;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004118:	2320      	movs	r3, #32
 800411a:	e003      	b.n	8004124 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	3301      	adds	r3, #1
 8004126:	f003 021f 	and.w	r2, r3, #31
 800412a:	4613      	mov	r3, r2
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4413      	add	r3, r2
 8004130:	3b1e      	subs	r3, #30
 8004132:	051b      	lsls	r3, r3, #20
 8004134:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004138:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800413e:	4619      	mov	r1, r3
 8004140:	f7fe fe7c 	bl	8002e3c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b09      	ldr	r3, [pc, #36]	@ (8004170 <HAL_ADC_ConfigChannel+0x6e0>)
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80be 	beq.w	80042ce <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800415a:	d004      	beq.n	8004166 <HAL_ADC_ConfigChannel+0x6d6>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a04      	ldr	r2, [pc, #16]	@ (8004174 <HAL_ADC_ConfigChannel+0x6e4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d10a      	bne.n	800417c <HAL_ADC_ConfigChannel+0x6ec>
 8004166:	4b04      	ldr	r3, [pc, #16]	@ (8004178 <HAL_ADC_ConfigChannel+0x6e8>)
 8004168:	e009      	b.n	800417e <HAL_ADC_ConfigChannel+0x6ee>
 800416a:	bf00      	nop
 800416c:	407f0000 	.word	0x407f0000
 8004170:	80080000 	.word	0x80080000
 8004174:	50000100 	.word	0x50000100
 8004178:	50000300 	.word	0x50000300
 800417c:	4b59      	ldr	r3, [pc, #356]	@ (80042e4 <HAL_ADC_ConfigChannel+0x854>)
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe fd5e 	bl	8002c40 <LL_ADC_GetCommonPathInternalCh>
 8004184:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a56      	ldr	r2, [pc, #344]	@ (80042e8 <HAL_ADC_ConfigChannel+0x858>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <HAL_ADC_ConfigChannel+0x70c>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a55      	ldr	r2, [pc, #340]	@ (80042ec <HAL_ADC_ConfigChannel+0x85c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d13a      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800419c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d134      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041b0:	d005      	beq.n	80041be <HAL_ADC_ConfigChannel+0x72e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a4e      	ldr	r2, [pc, #312]	@ (80042f0 <HAL_ADC_ConfigChannel+0x860>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	f040 8085 	bne.w	80042c8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041c6:	d004      	beq.n	80041d2 <HAL_ADC_ConfigChannel+0x742>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a49      	ldr	r2, [pc, #292]	@ (80042f4 <HAL_ADC_ConfigChannel+0x864>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d101      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x746>
 80041d2:	4a49      	ldr	r2, [pc, #292]	@ (80042f8 <HAL_ADC_ConfigChannel+0x868>)
 80041d4:	e000      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x748>
 80041d6:	4a43      	ldr	r2, [pc, #268]	@ (80042e4 <HAL_ADC_ConfigChannel+0x854>)
 80041d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041e0:	4619      	mov	r1, r3
 80041e2:	4610      	mov	r0, r2
 80041e4:	f7fe fd19 	bl	8002c1a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041e8:	4b44      	ldr	r3, [pc, #272]	@ (80042fc <HAL_ADC_ConfigChannel+0x86c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	099b      	lsrs	r3, r3, #6
 80041ee:	4a44      	ldr	r2, [pc, #272]	@ (8004300 <HAL_ADC_ConfigChannel+0x870>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	099b      	lsrs	r3, r3, #6
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	4613      	mov	r3, r2
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004202:	e002      	b.n	800420a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3b01      	subs	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1f9      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004210:	e05a      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a3b      	ldr	r2, [pc, #236]	@ (8004304 <HAL_ADC_ConfigChannel+0x874>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d125      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800421c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004220:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11f      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a31      	ldr	r2, [pc, #196]	@ (80042f4 <HAL_ADC_ConfigChannel+0x864>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d104      	bne.n	800423c <HAL_ADC_ConfigChannel+0x7ac>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a34      	ldr	r2, [pc, #208]	@ (8004308 <HAL_ADC_ConfigChannel+0x878>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d047      	beq.n	80042cc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004244:	d004      	beq.n	8004250 <HAL_ADC_ConfigChannel+0x7c0>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a2a      	ldr	r2, [pc, #168]	@ (80042f4 <HAL_ADC_ConfigChannel+0x864>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d101      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x7c4>
 8004250:	4a29      	ldr	r2, [pc, #164]	@ (80042f8 <HAL_ADC_ConfigChannel+0x868>)
 8004252:	e000      	b.n	8004256 <HAL_ADC_ConfigChannel+0x7c6>
 8004254:	4a23      	ldr	r2, [pc, #140]	@ (80042e4 <HAL_ADC_ConfigChannel+0x854>)
 8004256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800425a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800425e:	4619      	mov	r1, r3
 8004260:	4610      	mov	r0, r2
 8004262:	f7fe fcda 	bl	8002c1a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004266:	e031      	b.n	80042cc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a27      	ldr	r2, [pc, #156]	@ (800430c <HAL_ADC_ConfigChannel+0x87c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d12d      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d127      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1c      	ldr	r2, [pc, #112]	@ (80042f4 <HAL_ADC_ConfigChannel+0x864>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d022      	beq.n	80042ce <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004290:	d004      	beq.n	800429c <HAL_ADC_ConfigChannel+0x80c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a17      	ldr	r2, [pc, #92]	@ (80042f4 <HAL_ADC_ConfigChannel+0x864>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d101      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x810>
 800429c:	4a16      	ldr	r2, [pc, #88]	@ (80042f8 <HAL_ADC_ConfigChannel+0x868>)
 800429e:	e000      	b.n	80042a2 <HAL_ADC_ConfigChannel+0x812>
 80042a0:	4a10      	ldr	r2, [pc, #64]	@ (80042e4 <HAL_ADC_ConfigChannel+0x854>)
 80042a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042aa:	4619      	mov	r1, r3
 80042ac:	4610      	mov	r0, r2
 80042ae:	f7fe fcb4 	bl	8002c1a <LL_ADC_SetCommonPathInternalCh>
 80042b2:	e00c      	b.n	80042ce <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b8:	f043 0220 	orr.w	r2, r3, #32
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80042c6:	e002      	b.n	80042ce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042c8:	bf00      	nop
 80042ca:	e000      	b.n	80042ce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80042d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80042da:	4618      	mov	r0, r3
 80042dc:	37d8      	adds	r7, #216	@ 0xd8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	50000700 	.word	0x50000700
 80042e8:	c3210000 	.word	0xc3210000
 80042ec:	90c00010 	.word	0x90c00010
 80042f0:	50000600 	.word	0x50000600
 80042f4:	50000100 	.word	0x50000100
 80042f8:	50000300 	.word	0x50000300
 80042fc:	20000000 	.word	0x20000000
 8004300:	053e2d63 	.word	0x053e2d63
 8004304:	c7520000 	.word	0xc7520000
 8004308:	50000500 	.word	0x50000500
 800430c:	cb840000 	.word	0xcb840000

08004310 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004318:	2300      	movs	r3, #0
 800431a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fe59 	bl	8002fd8 <LL_ADC_IsEnabled>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d176      	bne.n	800441a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	4b3c      	ldr	r3, [pc, #240]	@ (8004424 <ADC_Enable+0x114>)
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433e:	f043 0210 	orr.w	r2, r3, #16
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e062      	b.n	800441c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe fe28 	bl	8002fb0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004368:	d004      	beq.n	8004374 <ADC_Enable+0x64>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2e      	ldr	r2, [pc, #184]	@ (8004428 <ADC_Enable+0x118>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d101      	bne.n	8004378 <ADC_Enable+0x68>
 8004374:	4b2d      	ldr	r3, [pc, #180]	@ (800442c <ADC_Enable+0x11c>)
 8004376:	e000      	b.n	800437a <ADC_Enable+0x6a>
 8004378:	4b2d      	ldr	r3, [pc, #180]	@ (8004430 <ADC_Enable+0x120>)
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe fc60 	bl	8002c40 <LL_ADC_GetCommonPathInternalCh>
 8004380:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004386:	2b00      	cmp	r3, #0
 8004388:	d013      	beq.n	80043b2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800438a:	4b2a      	ldr	r3, [pc, #168]	@ (8004434 <ADC_Enable+0x124>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	099b      	lsrs	r3, r3, #6
 8004390:	4a29      	ldr	r2, [pc, #164]	@ (8004438 <ADC_Enable+0x128>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	099b      	lsrs	r3, r3, #6
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	4613      	mov	r3, r2
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80043a4:	e002      	b.n	80043ac <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f9      	bne.n	80043a6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80043b2:	f7fe fbf1 	bl	8002b98 <HAL_GetTick>
 80043b6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043b8:	e028      	b.n	800440c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe fe0a 	bl	8002fd8 <LL_ADC_IsEnabled>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d104      	bne.n	80043d4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fdee 	bl	8002fb0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80043d4:	f7fe fbe0 	bl	8002b98 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d914      	bls.n	800440c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d00d      	beq.n	800440c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f4:	f043 0210 	orr.w	r2, r3, #16
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004400:	f043 0201 	orr.w	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e007      	b.n	800441c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d1cf      	bne.n	80043ba <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	8000003f 	.word	0x8000003f
 8004428:	50000100 	.word	0x50000100
 800442c:	50000300 	.word	0x50000300
 8004430:	50000700 	.word	0x50000700
 8004434:	20000000 	.word	0x20000000
 8004438:	053e2d63 	.word	0x053e2d63

0800443c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004448:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004452:	2b00      	cmp	r3, #0
 8004454:	d14b      	bne.n	80044ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d021      	beq.n	80044b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f7fe fc8f 	bl	8002d98 <LL_ADC_REG_IsTriggerSourceSWStart>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d032      	beq.n	80044e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d12b      	bne.n	80044e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004492:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11f      	bne.n	80044e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044b2:	e018      	b.n	80044e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d111      	bne.n	80044e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d105      	bne.n	80044e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044de:	f043 0201 	orr.w	r2, r3, #1
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7fc f888 	bl	80005fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044ec:	e00e      	b.n	800450c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f2:	f003 0310 	and.w	r3, r3, #16
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff fabe 	bl	8003a7c <HAL_ADC_ErrorCallback>
}
 8004500:	e004      	b.n	800450c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4798      	blx	r3
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004520:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7ff fa96 	bl	8003a54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004542:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454e:	f043 0204 	orr.w	r2, r3, #4
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7ff fa90 	bl	8003a7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <LL_ADC_IsEnabled>:
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <LL_ADC_IsEnabled+0x18>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <LL_ADC_IsEnabled+0x1a>
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <LL_ADC_REG_IsConversionOngoing>:
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b04      	cmp	r3, #4
 800459c:	d101      	bne.n	80045a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b0a1      	sub	sp, #132	@ 0x84
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800462e:	2302      	movs	r3, #2
 8004630:	e0e7      	b.n	8004802 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800463a:	2300      	movs	r3, #0
 800463c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800463e:	2300      	movs	r3, #0
 8004640:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800464a:	d102      	bne.n	8004652 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800464c:	4b6f      	ldr	r3, [pc, #444]	@ (800480c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	e009      	b.n	8004666 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a6e      	ldr	r2, [pc, #440]	@ (8004810 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d102      	bne.n	8004662 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800465c:	4b6d      	ldr	r3, [pc, #436]	@ (8004814 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800465e:	60bb      	str	r3, [r7, #8]
 8004660:	e001      	b.n	8004666 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004662:	2300      	movs	r3, #0
 8004664:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004670:	f043 0220 	orr.w	r2, r3, #32
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0be      	b.n	8004802 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ff7f 	bl	800458a <LL_ADC_REG_IsConversionOngoing>
 800468c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff ff79 	bl	800458a <LL_ADC_REG_IsConversionOngoing>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	f040 80a0 	bne.w	80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80046a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f040 809c 	bne.w	80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046b0:	d004      	beq.n	80046bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a55      	ldr	r2, [pc, #340]	@ (800480c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d101      	bne.n	80046c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80046bc:	4b56      	ldr	r3, [pc, #344]	@ (8004818 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80046be:	e000      	b.n	80046c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80046c0:	4b56      	ldr	r3, [pc, #344]	@ (800481c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80046c2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d04b      	beq.n	8004764 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80046cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	6859      	ldr	r1, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046de:	035b      	lsls	r3, r3, #13
 80046e0:	430b      	orrs	r3, r1
 80046e2:	431a      	orrs	r2, r3
 80046e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046f0:	d004      	beq.n	80046fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a45      	ldr	r2, [pc, #276]	@ (800480c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d10f      	bne.n	800471c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80046fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004700:	f7ff ff30 	bl	8004564 <LL_ADC_IsEnabled>
 8004704:	4604      	mov	r4, r0
 8004706:	4841      	ldr	r0, [pc, #260]	@ (800480c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004708:	f7ff ff2c 	bl	8004564 <LL_ADC_IsEnabled>
 800470c:	4603      	mov	r3, r0
 800470e:	4323      	orrs	r3, r4
 8004710:	2b00      	cmp	r3, #0
 8004712:	bf0c      	ite	eq
 8004714:	2301      	moveq	r3, #1
 8004716:	2300      	movne	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	e012      	b.n	8004742 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800471c:	483c      	ldr	r0, [pc, #240]	@ (8004810 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800471e:	f7ff ff21 	bl	8004564 <LL_ADC_IsEnabled>
 8004722:	4604      	mov	r4, r0
 8004724:	483b      	ldr	r0, [pc, #236]	@ (8004814 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004726:	f7ff ff1d 	bl	8004564 <LL_ADC_IsEnabled>
 800472a:	4603      	mov	r3, r0
 800472c:	431c      	orrs	r4, r3
 800472e:	483c      	ldr	r0, [pc, #240]	@ (8004820 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004730:	f7ff ff18 	bl	8004564 <LL_ADC_IsEnabled>
 8004734:	4603      	mov	r3, r0
 8004736:	4323      	orrs	r3, r4
 8004738:	2b00      	cmp	r3, #0
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d056      	beq.n	80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004746:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800474e:	f023 030f 	bic.w	r3, r3, #15
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	6811      	ldr	r1, [r2, #0]
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	6892      	ldr	r2, [r2, #8]
 800475a:	430a      	orrs	r2, r1
 800475c:	431a      	orrs	r2, r3
 800475e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004760:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004762:	e047      	b.n	80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004764:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800476c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800476e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004778:	d004      	beq.n	8004784 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a23      	ldr	r2, [pc, #140]	@ (800480c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d10f      	bne.n	80047a4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004784:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004788:	f7ff feec 	bl	8004564 <LL_ADC_IsEnabled>
 800478c:	4604      	mov	r4, r0
 800478e:	481f      	ldr	r0, [pc, #124]	@ (800480c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004790:	f7ff fee8 	bl	8004564 <LL_ADC_IsEnabled>
 8004794:	4603      	mov	r3, r0
 8004796:	4323      	orrs	r3, r4
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e012      	b.n	80047ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80047a4:	481a      	ldr	r0, [pc, #104]	@ (8004810 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80047a6:	f7ff fedd 	bl	8004564 <LL_ADC_IsEnabled>
 80047aa:	4604      	mov	r4, r0
 80047ac:	4819      	ldr	r0, [pc, #100]	@ (8004814 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80047ae:	f7ff fed9 	bl	8004564 <LL_ADC_IsEnabled>
 80047b2:	4603      	mov	r3, r0
 80047b4:	431c      	orrs	r4, r3
 80047b6:	481a      	ldr	r0, [pc, #104]	@ (8004820 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80047b8:	f7ff fed4 	bl	8004564 <LL_ADC_IsEnabled>
 80047bc:	4603      	mov	r3, r0
 80047be:	4323      	orrs	r3, r4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d012      	beq.n	80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80047ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047d6:	f023 030f 	bic.w	r3, r3, #15
 80047da:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80047dc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047de:	e009      	b.n	80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e4:	f043 0220 	orr.w	r2, r3, #32
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80047f2:	e000      	b.n	80047f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80047fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004802:	4618      	mov	r0, r3
 8004804:	3784      	adds	r7, #132	@ 0x84
 8004806:	46bd      	mov	sp, r7
 8004808:	bd90      	pop	{r4, r7, pc}
 800480a:	bf00      	nop
 800480c:	50000100 	.word	0x50000100
 8004810:	50000400 	.word	0x50000400
 8004814:	50000500 	.word	0x50000500
 8004818:	50000300 	.word	0x50000300
 800481c:	50000700 	.word	0x50000700
 8004820:	50000600 	.word	0x50000600

08004824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004834:	4b0c      	ldr	r3, [pc, #48]	@ (8004868 <__NVIC_SetPriorityGrouping+0x44>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004840:	4013      	ands	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800484c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004856:	4a04      	ldr	r2, [pc, #16]	@ (8004868 <__NVIC_SetPriorityGrouping+0x44>)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	60d3      	str	r3, [r2, #12]
}
 800485c:	bf00      	nop
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004870:	4b04      	ldr	r3, [pc, #16]	@ (8004884 <__NVIC_GetPriorityGrouping+0x18>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	0a1b      	lsrs	r3, r3, #8
 8004876:	f003 0307 	and.w	r3, r3, #7
}
 800487a:	4618      	mov	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004896:	2b00      	cmp	r3, #0
 8004898:	db0b      	blt.n	80048b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	f003 021f 	and.w	r2, r3, #31
 80048a0:	4907      	ldr	r1, [pc, #28]	@ (80048c0 <__NVIC_EnableIRQ+0x38>)
 80048a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2001      	movs	r0, #1
 80048aa:	fa00 f202 	lsl.w	r2, r0, r2
 80048ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	e000e100 	.word	0xe000e100

080048c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	6039      	str	r1, [r7, #0]
 80048ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	db0a      	blt.n	80048ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	490c      	ldr	r1, [pc, #48]	@ (8004910 <__NVIC_SetPriority+0x4c>)
 80048de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e2:	0112      	lsls	r2, r2, #4
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	440b      	add	r3, r1
 80048e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048ec:	e00a      	b.n	8004904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	4908      	ldr	r1, [pc, #32]	@ (8004914 <__NVIC_SetPriority+0x50>)
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	3b04      	subs	r3, #4
 80048fc:	0112      	lsls	r2, r2, #4
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	440b      	add	r3, r1
 8004902:	761a      	strb	r2, [r3, #24]
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	e000e100 	.word	0xe000e100
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004918:	b480      	push	{r7}
 800491a:	b089      	sub	sp, #36	@ 0x24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f1c3 0307 	rsb	r3, r3, #7
 8004932:	2b04      	cmp	r3, #4
 8004934:	bf28      	it	cs
 8004936:	2304      	movcs	r3, #4
 8004938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	3304      	adds	r3, #4
 800493e:	2b06      	cmp	r3, #6
 8004940:	d902      	bls.n	8004948 <NVIC_EncodePriority+0x30>
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	3b03      	subs	r3, #3
 8004946:	e000      	b.n	800494a <NVIC_EncodePriority+0x32>
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800494c:	f04f 32ff 	mov.w	r2, #4294967295
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43da      	mvns	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	401a      	ands	r2, r3
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004960:	f04f 31ff 	mov.w	r1, #4294967295
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	fa01 f303 	lsl.w	r3, r1, r3
 800496a:	43d9      	mvns	r1, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004970:	4313      	orrs	r3, r2
         );
}
 8004972:	4618      	mov	r0, r3
 8004974:	3724      	adds	r7, #36	@ 0x24
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3b01      	subs	r3, #1
 800498c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004990:	d301      	bcc.n	8004996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004992:	2301      	movs	r3, #1
 8004994:	e00f      	b.n	80049b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004996:	4a0a      	ldr	r2, [pc, #40]	@ (80049c0 <SysTick_Config+0x40>)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3b01      	subs	r3, #1
 800499c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800499e:	210f      	movs	r1, #15
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	f7ff ff8e 	bl	80048c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049a8:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <SysTick_Config+0x40>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049ae:	4b04      	ldr	r3, [pc, #16]	@ (80049c0 <SysTick_Config+0x40>)
 80049b0:	2207      	movs	r2, #7
 80049b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	e000e010 	.word	0xe000e010

080049c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff ff29 	bl	8004824 <__NVIC_SetPriorityGrouping>
}
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b086      	sub	sp, #24
 80049de:	af00      	add	r7, sp, #0
 80049e0:	4603      	mov	r3, r0
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049e8:	f7ff ff40 	bl	800486c <__NVIC_GetPriorityGrouping>
 80049ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	6978      	ldr	r0, [r7, #20]
 80049f4:	f7ff ff90 	bl	8004918 <NVIC_EncodePriority>
 80049f8:	4602      	mov	r2, r0
 80049fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff ff5f 	bl	80048c4 <__NVIC_SetPriority>
}
 8004a06:	bf00      	nop
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	4603      	mov	r3, r0
 8004a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff ff33 	bl	8004888 <__NVIC_EnableIRQ>
}
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff ffa4 	bl	8004980 <SysTick_Config>
 8004a38:	4603      	mov	r3, r0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e014      	b.n	8004a7e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	791b      	ldrb	r3, [r3, #4]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d105      	bne.n	8004a6a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7fd fa4d 	bl	8001f04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	@ 0x28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <HAL_DAC_ConfigChannel+0x1c>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e1a1      	b.n	8004dec <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	795b      	ldrb	r3, [r3, #5]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_DAC_ConfigChannel+0x32>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e198      	b.n	8004dec <HAL_DAC_ConfigChannel+0x364>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d17a      	bne.n	8004bc4 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004ace:	f7fe f863 	bl	8002b98 <HAL_GetTick>
 8004ad2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d13d      	bne.n	8004b56 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ada:	e018      	b.n	8004b0e <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004adc:	f7fe f85c 	bl	8002b98 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d911      	bls.n	8004b0e <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f043 0208 	orr.w	r2, r3, #8
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2203      	movs	r2, #3
 8004b08:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e16e      	b.n	8004dec <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1df      	bne.n	8004adc <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b24:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b26:	e020      	b.n	8004b6a <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004b28:	f7fe f836 	bl	8002b98 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d90f      	bls.n	8004b56 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	da0a      	bge.n	8004b56 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f043 0208 	orr.w	r2, r3, #8
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2203      	movs	r2, #3
 8004b50:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e14a      	b.n	8004dec <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	dbe3      	blt.n	8004b28 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b68:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	ea02 0103 	and.w	r1, r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	21ff      	movs	r1, #255	@ 0xff
 8004ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8004baa:	43db      	mvns	r3, r3
 8004bac:	ea02 0103 	and.w	r1, r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	409a      	lsls	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d11d      	bne.n	8004c08 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	221f      	movs	r2, #31
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be4:	4013      	ands	r3, r2
 8004be6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c06:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2207      	movs	r2, #7
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c20:	4013      	ands	r3, r2
 8004c22:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d102      	bne.n	8004c32 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	623b      	str	r3, [r7, #32]
 8004c30:	e00f      	b.n	8004c52 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d102      	bne.n	8004c40 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	623b      	str	r3, [r7, #32]
 8004c3e:	e008      	b.n	8004c52 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	623b      	str	r3, [r7, #32]
 8004c4c:	e001      	b.n	8004c52 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	6a3a      	ldr	r2, [r7, #32]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c74:	4013      	ands	r3, r2
 8004c76:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	791b      	ldrb	r3, [r3, #4]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d102      	bne.n	8004c86 <HAL_DAC_ConfigChannel+0x1fe>
 8004c80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c84:	e000      	b.n	8004c88 <HAL_DAC_ConfigChannel+0x200>
 8004c86:	2300      	movs	r3, #0
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	795b      	ldrb	r3, [r3, #5]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d102      	bne.n	8004cb2 <HAL_DAC_ConfigChannel+0x22a>
 8004cac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cb0:	e000      	b.n	8004cb4 <HAL_DAC_ConfigChannel+0x22c>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d114      	bne.n	8004cf4 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004cca:	f001 fad7 	bl	800627c <HAL_RCC_GetHCLKFreq>
 8004cce:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4a48      	ldr	r2, [pc, #288]	@ (8004df4 <HAL_DAC_ConfigChannel+0x36c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d904      	bls.n	8004ce2 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce0:	e00f      	b.n	8004d02 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4a44      	ldr	r2, [pc, #272]	@ (8004df8 <HAL_DAC_ConfigChannel+0x370>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d90a      	bls.n	8004d00 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf2:	e006      	b.n	8004d02 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cfe:	e000      	b.n	8004d02 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004d00:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d10:	4313      	orrs	r3, r2
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6819      	ldr	r1, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	43da      	mvns	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	400a      	ands	r2, r1
 8004d38:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	43db      	mvns	r3, r3
 8004d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d54:	4013      	ands	r3, r2
 8004d56:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d76:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6819      	ldr	r1, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	22c0      	movs	r2, #192	@ 0xc0
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43da      	mvns	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	400a      	ands	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	089b      	lsrs	r3, r3, #2
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	089b      	lsrs	r3, r3, #2
 8004da6:	021b      	lsls	r3, r3, #8
 8004da8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8004dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	ea02 0103 	and.w	r1, r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004dea:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3728      	adds	r7, #40	@ 0x28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	09896800 	.word	0x09896800
 8004df8:	04c4b400 	.word	0x04c4b400

08004dfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e08d      	b.n	8004f2a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	4b47      	ldr	r3, [pc, #284]	@ (8004f34 <HAL_DMA_Init+0x138>)
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d80f      	bhi.n	8004e3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	4b45      	ldr	r3, [pc, #276]	@ (8004f38 <HAL_DMA_Init+0x13c>)
 8004e22:	4413      	add	r3, r2
 8004e24:	4a45      	ldr	r2, [pc, #276]	@ (8004f3c <HAL_DMA_Init+0x140>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	091b      	lsrs	r3, r3, #4
 8004e2c:	009a      	lsls	r2, r3, #2
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a42      	ldr	r2, [pc, #264]	@ (8004f40 <HAL_DMA_Init+0x144>)
 8004e36:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e38:	e00e      	b.n	8004e58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4b40      	ldr	r3, [pc, #256]	@ (8004f44 <HAL_DMA_Init+0x148>)
 8004e42:	4413      	add	r3, r2
 8004e44:	4a3d      	ldr	r2, [pc, #244]	@ (8004f3c <HAL_DMA_Init+0x140>)
 8004e46:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4a:	091b      	lsrs	r3, r3, #4
 8004e4c:	009a      	lsls	r2, r3, #2
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a3c      	ldr	r2, [pc, #240]	@ (8004f48 <HAL_DMA_Init+0x14c>)
 8004e56:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f9b6 	bl	800521c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eb8:	d102      	bne.n	8004ec0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ed4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d010      	beq.n	8004f00 <HAL_DMA_Init+0x104>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d80c      	bhi.n	8004f00 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f9d6 	bl	8005298 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004efc:	605a      	str	r2, [r3, #4]
 8004efe:	e008      	b.n	8004f12 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40020407 	.word	0x40020407
 8004f38:	bffdfff8 	.word	0xbffdfff8
 8004f3c:	cccccccd 	.word	0xcccccccd
 8004f40:	40020000 	.word	0x40020000
 8004f44:	bffdfbf8 	.word	0xbffdfbf8
 8004f48:	40020400 	.word	0x40020400

08004f4c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_DMA_Start_IT+0x20>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e066      	b.n	800503a <HAL_DMA_Start_IT+0xee>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d155      	bne.n	800502c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 f8fb 	bl	80051a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d008      	beq.n	8004fc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 020e 	orr.w	r2, r2, #14
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	e00f      	b.n	8004fe4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0204 	bic.w	r2, r2, #4
 8004fd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 020a 	orr.w	r2, r2, #10
 8004fe2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d007      	beq.n	8005002 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ffc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005000:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005014:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005018:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0201 	orr.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	e005      	b.n	8005038 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005034:	2302      	movs	r3, #2
 8005036:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005038:	7dfb      	ldrb	r3, [r7, #23]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	2204      	movs	r2, #4
 8005064:	409a      	lsls	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4013      	ands	r3, r2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d026      	beq.n	80050bc <HAL_DMA_IRQHandler+0x7a>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d021      	beq.n	80050bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d107      	bne.n	8005096 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0204 	bic.w	r2, r2, #4
 8005094:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	f003 021f 	and.w	r2, r3, #31
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	2104      	movs	r1, #4
 80050a4:	fa01 f202 	lsl.w	r2, r1, r2
 80050a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d071      	beq.n	8005196 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80050ba:	e06c      	b.n	8005196 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	2202      	movs	r2, #2
 80050c6:	409a      	lsls	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4013      	ands	r3, r2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d02e      	beq.n	800512e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d029      	beq.n	800512e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10b      	bne.n	8005100 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 020a 	bic.w	r2, r2, #10
 80050f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005104:	f003 021f 	and.w	r2, r3, #31
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510c:	2102      	movs	r1, #2
 800510e:	fa01 f202 	lsl.w	r2, r1, r2
 8005112:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d038      	beq.n	8005196 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800512c:	e033      	b.n	8005196 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005132:	f003 031f 	and.w	r3, r3, #31
 8005136:	2208      	movs	r2, #8
 8005138:	409a      	lsls	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4013      	ands	r3, r2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d02a      	beq.n	8005198 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d025      	beq.n	8005198 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 020e 	bic.w	r2, r2, #14
 800515a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005160:	f003 021f 	and.w	r2, r3, #31
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005168:	2101      	movs	r1, #1
 800516a:	fa01 f202 	lsl.w	r2, r1, r2
 800516e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518a:	2b00      	cmp	r3, #0
 800518c:	d004      	beq.n	8005198 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005196:	bf00      	nop
 8005198:	bf00      	nop
}
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d004      	beq.n	80051ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ce:	f003 021f 	and.w	r2, r3, #31
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	2101      	movs	r1, #1
 80051d8:	fa01 f202 	lsl.w	r2, r1, r2
 80051dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2b10      	cmp	r3, #16
 80051ec:	d108      	bne.n	8005200 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80051fe:	e007      	b.n	8005210 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	60da      	str	r2, [r3, #12]
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	4b16      	ldr	r3, [pc, #88]	@ (8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800522c:	429a      	cmp	r2, r3
 800522e:	d802      	bhi.n	8005236 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005230:	4b15      	ldr	r3, [pc, #84]	@ (8005288 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	e001      	b.n	800523a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005236:	4b15      	ldr	r3, [pc, #84]	@ (800528c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005238:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	3b08      	subs	r3, #8
 8005246:	4a12      	ldr	r2, [pc, #72]	@ (8005290 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005248:	fba2 2303 	umull	r2, r3, r2, r3
 800524c:	091b      	lsrs	r3, r3, #4
 800524e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005254:	089b      	lsrs	r3, r3, #2
 8005256:	009a      	lsls	r2, r3, #2
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4413      	add	r3, r2
 800525c:	461a      	mov	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a0b      	ldr	r2, [pc, #44]	@ (8005294 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005266:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	2201      	movs	r2, #1
 8005270:	409a      	lsls	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40020407 	.word	0x40020407
 8005288:	40020800 	.word	0x40020800
 800528c:	40020820 	.word	0x40020820
 8005290:	cccccccd 	.word	0xcccccccd
 8005294:	40020880 	.word	0x40020880

08005298 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4b0b      	ldr	r3, [pc, #44]	@ (80052d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	461a      	mov	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a08      	ldr	r2, [pc, #32]	@ (80052dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80052ba:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3b01      	subs	r3, #1
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	2201      	movs	r2, #1
 80052c6:	409a      	lsls	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80052cc:	bf00      	nop
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	1000823f 	.word	0x1000823f
 80052dc:	40020940 	.word	0x40020940

080052e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80052ee:	e15a      	b.n	80055a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	2101      	movs	r1, #1
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	fa01 f303 	lsl.w	r3, r1, r3
 80052fc:	4013      	ands	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 814c 	beq.w	80055a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	2b01      	cmp	r3, #1
 8005312:	d005      	beq.n	8005320 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800531c:	2b02      	cmp	r3, #2
 800531e:	d130      	bne.n	8005382 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	2203      	movs	r2, #3
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	43db      	mvns	r3, r3
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4013      	ands	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005356:	2201      	movs	r2, #1
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	43db      	mvns	r3, r3
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4013      	ands	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	091b      	lsrs	r3, r3, #4
 800536c:	f003 0201 	and.w	r2, r3, #1
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	2b03      	cmp	r3, #3
 800538c:	d017      	beq.n	80053be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	2203      	movs	r2, #3
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	43db      	mvns	r3, r3
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4013      	ands	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d123      	bne.n	8005412 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	08da      	lsrs	r2, r3, #3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3208      	adds	r2, #8
 80053d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	220f      	movs	r2, #15
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	43db      	mvns	r3, r3
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4013      	ands	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	08da      	lsrs	r2, r3, #3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3208      	adds	r2, #8
 800540c:	6939      	ldr	r1, [r7, #16]
 800540e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	2203      	movs	r2, #3
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	43db      	mvns	r3, r3
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4013      	ands	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f003 0203 	and.w	r2, r3, #3
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 80a6 	beq.w	80055a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005454:	4b5b      	ldr	r3, [pc, #364]	@ (80055c4 <HAL_GPIO_Init+0x2e4>)
 8005456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005458:	4a5a      	ldr	r2, [pc, #360]	@ (80055c4 <HAL_GPIO_Init+0x2e4>)
 800545a:	f043 0301 	orr.w	r3, r3, #1
 800545e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005460:	4b58      	ldr	r3, [pc, #352]	@ (80055c4 <HAL_GPIO_Init+0x2e4>)
 8005462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800546c:	4a56      	ldr	r2, [pc, #344]	@ (80055c8 <HAL_GPIO_Init+0x2e8>)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	089b      	lsrs	r3, r3, #2
 8005472:	3302      	adds	r3, #2
 8005474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005478:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	220f      	movs	r2, #15
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	43db      	mvns	r3, r3
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4013      	ands	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005496:	d01f      	beq.n	80054d8 <HAL_GPIO_Init+0x1f8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a4c      	ldr	r2, [pc, #304]	@ (80055cc <HAL_GPIO_Init+0x2ec>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d019      	beq.n	80054d4 <HAL_GPIO_Init+0x1f4>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a4b      	ldr	r2, [pc, #300]	@ (80055d0 <HAL_GPIO_Init+0x2f0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d013      	beq.n	80054d0 <HAL_GPIO_Init+0x1f0>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a4a      	ldr	r2, [pc, #296]	@ (80055d4 <HAL_GPIO_Init+0x2f4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00d      	beq.n	80054cc <HAL_GPIO_Init+0x1ec>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a49      	ldr	r2, [pc, #292]	@ (80055d8 <HAL_GPIO_Init+0x2f8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d007      	beq.n	80054c8 <HAL_GPIO_Init+0x1e8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a48      	ldr	r2, [pc, #288]	@ (80055dc <HAL_GPIO_Init+0x2fc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d101      	bne.n	80054c4 <HAL_GPIO_Init+0x1e4>
 80054c0:	2305      	movs	r3, #5
 80054c2:	e00a      	b.n	80054da <HAL_GPIO_Init+0x1fa>
 80054c4:	2306      	movs	r3, #6
 80054c6:	e008      	b.n	80054da <HAL_GPIO_Init+0x1fa>
 80054c8:	2304      	movs	r3, #4
 80054ca:	e006      	b.n	80054da <HAL_GPIO_Init+0x1fa>
 80054cc:	2303      	movs	r3, #3
 80054ce:	e004      	b.n	80054da <HAL_GPIO_Init+0x1fa>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e002      	b.n	80054da <HAL_GPIO_Init+0x1fa>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <HAL_GPIO_Init+0x1fa>
 80054d8:	2300      	movs	r3, #0
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	f002 0203 	and.w	r2, r2, #3
 80054e0:	0092      	lsls	r2, r2, #2
 80054e2:	4093      	lsls	r3, r2
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054ea:	4937      	ldr	r1, [pc, #220]	@ (80055c8 <HAL_GPIO_Init+0x2e8>)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	089b      	lsrs	r3, r3, #2
 80054f0:	3302      	adds	r3, #2
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054f8:	4b39      	ldr	r3, [pc, #228]	@ (80055e0 <HAL_GPIO_Init+0x300>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	43db      	mvns	r3, r3
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4013      	ands	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800551c:	4a30      	ldr	r2, [pc, #192]	@ (80055e0 <HAL_GPIO_Init+0x300>)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005522:	4b2f      	ldr	r3, [pc, #188]	@ (80055e0 <HAL_GPIO_Init+0x300>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	43db      	mvns	r3, r3
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4013      	ands	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005546:	4a26      	ldr	r2, [pc, #152]	@ (80055e0 <HAL_GPIO_Init+0x300>)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800554c:	4b24      	ldr	r3, [pc, #144]	@ (80055e0 <HAL_GPIO_Init+0x300>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	43db      	mvns	r3, r3
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4013      	ands	r3, r2
 800555a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005570:	4a1b      	ldr	r2, [pc, #108]	@ (80055e0 <HAL_GPIO_Init+0x300>)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005576:	4b1a      	ldr	r3, [pc, #104]	@ (80055e0 <HAL_GPIO_Init+0x300>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	43db      	mvns	r3, r3
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4013      	ands	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800559a:	4a11      	ldr	r2, [pc, #68]	@ (80055e0 <HAL_GPIO_Init+0x300>)
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	3301      	adds	r3, #1
 80055a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	fa22 f303 	lsr.w	r3, r2, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f47f ae9d 	bne.w	80052f0 <HAL_GPIO_Init+0x10>
  }
}
 80055b6:	bf00      	nop
 80055b8:	bf00      	nop
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	40021000 	.word	0x40021000
 80055c8:	40010000 	.word	0x40010000
 80055cc:	48000400 	.word	0x48000400
 80055d0:	48000800 	.word	0x48000800
 80055d4:	48000c00 	.word	0x48000c00
 80055d8:	48001000 	.word	0x48001000
 80055dc:	48001400 	.word	0x48001400
 80055e0:	40010400 	.word	0x40010400

080055e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	807b      	strh	r3, [r7, #2]
 80055f0:	4613      	mov	r3, r2
 80055f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055f4:	787b      	ldrb	r3, [r7, #1]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055fa:	887a      	ldrh	r2, [r7, #2]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005600:	e002      	b.n	8005608 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005602:	887a      	ldrh	r2, [r7, #2]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e0bb      	b.n	80057a2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b05      	cmp	r3, #5
 8005634:	d101      	bne.n	800563a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e0b3      	b.n	80057a2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d101      	bne.n	800564a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e0ab      	b.n	80057a2 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800564a:	4b58      	ldr	r3, [pc, #352]	@ (80057ac <HAL_OPAMP_Init+0x198>)
 800564c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800564e:	4a57      	ldr	r2, [pc, #348]	@ (80057ac <HAL_OPAMP_Init+0x198>)
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	6613      	str	r3, [r2, #96]	@ 0x60
 8005656:	4b55      	ldr	r3, [pc, #340]	@ (80057ac <HAL_OPAMP_Init+0x198>)
 8005658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	60bb      	str	r3, [r7, #8]
 8005660:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d103      	bne.n	8005676 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fc fc82 	bl	8001f80 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b40      	cmp	r3, #64	@ 0x40
 8005682:	d003      	beq.n	800568c <HAL_OPAMP_Init+0x78>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b60      	cmp	r3, #96	@ 0x60
 800568a:	d133      	bne.n	80056f4 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f023 0110 	bic.w	r1, r3, #16
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b41      	ldr	r3, [pc, #260]	@ (80057b0 <HAL_OPAMP_Init+0x19c>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6851      	ldr	r1, [r2, #4]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6892      	ldr	r2, [r2, #8]
 80056b4:	4311      	orrs	r1, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6912      	ldr	r2, [r2, #16]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	7d09      	ldrb	r1, [r1, #20]
 80056c0:	2901      	cmp	r1, #1
 80056c2:	d102      	bne.n	80056ca <HAL_OPAMP_Init+0xb6>
 80056c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80056c8:	e000      	b.n	80056cc <HAL_OPAMP_Init+0xb8>
 80056ca:	2100      	movs	r1, #0
 80056cc:	4311      	orrs	r1, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056d2:	4311      	orrs	r1, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80056d8:	4311      	orrs	r1, r2
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80056de:	04d2      	lsls	r2, r2, #19
 80056e0:	4311      	orrs	r1, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80056e6:	0612      	lsls	r2, r2, #24
 80056e8:	4311      	orrs	r1, r2
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6812      	ldr	r2, [r2, #0]
 80056ee:	430b      	orrs	r3, r1
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	e035      	b.n	8005760 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f023 0110 	bic.w	r1, r3, #16
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4b27      	ldr	r3, [pc, #156]	@ (80057b0 <HAL_OPAMP_Init+0x19c>)
 8005712:	4013      	ands	r3, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6851      	ldr	r1, [r2, #4]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6892      	ldr	r2, [r2, #8]
 800571c:	4311      	orrs	r1, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	68d2      	ldr	r2, [r2, #12]
 8005722:	4311      	orrs	r1, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6912      	ldr	r2, [r2, #16]
 8005728:	430a      	orrs	r2, r1
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	7d09      	ldrb	r1, [r1, #20]
 800572e:	2901      	cmp	r1, #1
 8005730:	d102      	bne.n	8005738 <HAL_OPAMP_Init+0x124>
 8005732:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005736:	e000      	b.n	800573a <HAL_OPAMP_Init+0x126>
 8005738:	2100      	movs	r1, #0
 800573a:	4311      	orrs	r1, r2
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005740:	4311      	orrs	r1, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005746:	4311      	orrs	r1, r2
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800574c:	04d2      	lsls	r2, r2, #19
 800574e:	4311      	orrs	r1, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005754:	0612      	lsls	r2, r2, #24
 8005756:	4311      	orrs	r1, r2
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	430b      	orrs	r3, r1
 800575e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	2b00      	cmp	r3, #0
 8005768:	db10      	blt.n	800578c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699a      	ldr	r2, [r3, #24]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d103      	bne.n	80057a0 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40021000 	.word	0x40021000
 80057b0:	e0003e11 	.word	0xe0003e11

080057b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d141      	bne.n	8005846 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057c2:	4b4b      	ldr	r3, [pc, #300]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ce:	d131      	bne.n	8005834 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057d0:	4b47      	ldr	r3, [pc, #284]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057d6:	4a46      	ldr	r2, [pc, #280]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057e0:	4b43      	ldr	r3, [pc, #268]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057e8:	4a41      	ldr	r2, [pc, #260]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057f0:	4b40      	ldr	r3, [pc, #256]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2232      	movs	r2, #50	@ 0x32
 80057f6:	fb02 f303 	mul.w	r3, r2, r3
 80057fa:	4a3f      	ldr	r2, [pc, #252]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005800:	0c9b      	lsrs	r3, r3, #18
 8005802:	3301      	adds	r3, #1
 8005804:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005806:	e002      	b.n	800580e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3b01      	subs	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800580e:	4b38      	ldr	r3, [pc, #224]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800581a:	d102      	bne.n	8005822 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f2      	bne.n	8005808 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005822:	4b33      	ldr	r3, [pc, #204]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800582a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800582e:	d158      	bne.n	80058e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e057      	b.n	80058e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005834:	4b2e      	ldr	r3, [pc, #184]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800583a:	4a2d      	ldr	r2, [pc, #180]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005840:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005844:	e04d      	b.n	80058e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800584c:	d141      	bne.n	80058d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800584e:	4b28      	ldr	r3, [pc, #160]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800585a:	d131      	bne.n	80058c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800585c:	4b24      	ldr	r3, [pc, #144]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800585e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005862:	4a23      	ldr	r2, [pc, #140]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005868:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800586c:	4b20      	ldr	r3, [pc, #128]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005874:	4a1e      	ldr	r2, [pc, #120]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800587a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800587c:	4b1d      	ldr	r3, [pc, #116]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2232      	movs	r2, #50	@ 0x32
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	4a1c      	ldr	r2, [pc, #112]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005888:	fba2 2303 	umull	r2, r3, r2, r3
 800588c:	0c9b      	lsrs	r3, r3, #18
 800588e:	3301      	adds	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005892:	e002      	b.n	800589a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3b01      	subs	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800589a:	4b15      	ldr	r3, [pc, #84]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058a6:	d102      	bne.n	80058ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f2      	bne.n	8005894 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058ae:	4b10      	ldr	r3, [pc, #64]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ba:	d112      	bne.n	80058e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e011      	b.n	80058e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058c0:	4b0b      	ldr	r3, [pc, #44]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058c6:	4a0a      	ldr	r2, [pc, #40]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058d0:	e007      	b.n	80058e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058d2:	4b07      	ldr	r3, [pc, #28]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058da:	4a05      	ldr	r2, [pc, #20]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	40007000 	.word	0x40007000
 80058f4:	20000000 	.word	0x20000000
 80058f8:	431bde83 	.word	0x431bde83

080058fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005900:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	4a04      	ldr	r2, [pc, #16]	@ (8005918 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005906:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800590a:	6093      	str	r3, [r2, #8]
}
 800590c:	bf00      	nop
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40007000 	.word	0x40007000

0800591c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e2fe      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d075      	beq.n	8005a26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800593a:	4b97      	ldr	r3, [pc, #604]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 030c 	and.w	r3, r3, #12
 8005942:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005944:	4b94      	ldr	r3, [pc, #592]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0303 	and.w	r3, r3, #3
 800594c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b0c      	cmp	r3, #12
 8005952:	d102      	bne.n	800595a <HAL_RCC_OscConfig+0x3e>
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b03      	cmp	r3, #3
 8005958:	d002      	beq.n	8005960 <HAL_RCC_OscConfig+0x44>
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d10b      	bne.n	8005978 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005960:	4b8d      	ldr	r3, [pc, #564]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d05b      	beq.n	8005a24 <HAL_RCC_OscConfig+0x108>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d157      	bne.n	8005a24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e2d9      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005980:	d106      	bne.n	8005990 <HAL_RCC_OscConfig+0x74>
 8005982:	4b85      	ldr	r3, [pc, #532]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a84      	ldr	r2, [pc, #528]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e01d      	b.n	80059cc <HAL_RCC_OscConfig+0xb0>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005998:	d10c      	bne.n	80059b4 <HAL_RCC_OscConfig+0x98>
 800599a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 80059a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a7b      	ldr	r2, [pc, #492]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 80059ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	e00b      	b.n	80059cc <HAL_RCC_OscConfig+0xb0>
 80059b4:	4b78      	ldr	r3, [pc, #480]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a77      	ldr	r2, [pc, #476]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 80059ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	4b75      	ldr	r3, [pc, #468]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a74      	ldr	r2, [pc, #464]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 80059c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d013      	beq.n	80059fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fd f8e0 	bl	8002b98 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059dc:	f7fd f8dc 	bl	8002b98 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b64      	cmp	r3, #100	@ 0x64
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e29e      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f0      	beq.n	80059dc <HAL_RCC_OscConfig+0xc0>
 80059fa:	e014      	b.n	8005a26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fc:	f7fd f8cc 	bl	8002b98 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a04:	f7fd f8c8 	bl	8002b98 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b64      	cmp	r3, #100	@ 0x64
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e28a      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a16:	4b60      	ldr	r3, [pc, #384]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f0      	bne.n	8005a04 <HAL_RCC_OscConfig+0xe8>
 8005a22:	e000      	b.n	8005a26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d075      	beq.n	8005b1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a32:	4b59      	ldr	r3, [pc, #356]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 030c 	and.w	r3, r3, #12
 8005a3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a3c:	4b56      	ldr	r3, [pc, #344]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b0c      	cmp	r3, #12
 8005a4a:	d102      	bne.n	8005a52 <HAL_RCC_OscConfig+0x136>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d002      	beq.n	8005a58 <HAL_RCC_OscConfig+0x13c>
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d11f      	bne.n	8005a98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a58:	4b4f      	ldr	r3, [pc, #316]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <HAL_RCC_OscConfig+0x154>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e25d      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a70:	4b49      	ldr	r3, [pc, #292]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	061b      	lsls	r3, r3, #24
 8005a7e:	4946      	ldr	r1, [pc, #280]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a84:	4b45      	ldr	r3, [pc, #276]	@ (8005b9c <HAL_RCC_OscConfig+0x280>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fd f839 	bl	8002b00 <HAL_InitTick>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d043      	beq.n	8005b1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e249      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d023      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a3c      	ldr	r2, [pc, #240]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aac:	f7fd f874 	bl	8002b98 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ab4:	f7fd f870 	bl	8002b98 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e232      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ac6:	4b34      	ldr	r3, [pc, #208]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0f0      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad2:	4b31      	ldr	r3, [pc, #196]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	061b      	lsls	r3, r3, #24
 8005ae0:	492d      	ldr	r1, [pc, #180]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	604b      	str	r3, [r1, #4]
 8005ae6:	e01a      	b.n	8005b1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a2a      	ldr	r2, [pc, #168]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005aee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af4:	f7fd f850 	bl	8002b98 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005afc:	f7fd f84c 	bl	8002b98 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e20e      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b0e:	4b22      	ldr	r3, [pc, #136]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1f0      	bne.n	8005afc <HAL_RCC_OscConfig+0x1e0>
 8005b1a:	e000      	b.n	8005b1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d041      	beq.n	8005bae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d01c      	beq.n	8005b6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b32:	4b19      	ldr	r3, [pc, #100]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b38:	4a17      	ldr	r2, [pc, #92]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b42:	f7fd f829 	bl	8002b98 <HAL_GetTick>
 8005b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b4a:	f7fd f825 	bl	8002b98 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e1e7      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0ef      	beq.n	8005b4a <HAL_RCC_OscConfig+0x22e>
 8005b6a:	e020      	b.n	8005bae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b72:	4a09      	ldr	r2, [pc, #36]	@ (8005b98 <HAL_RCC_OscConfig+0x27c>)
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7c:	f7fd f80c 	bl	8002b98 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b82:	e00d      	b.n	8005ba0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b84:	f7fd f808 	bl	8002b98 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d906      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e1ca      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
 8005b96:	bf00      	nop
 8005b98:	40021000 	.word	0x40021000
 8005b9c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ba0:	4b8c      	ldr	r3, [pc, #560]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1ea      	bne.n	8005b84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 80a6 	beq.w	8005d08 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bc0:	4b84      	ldr	r3, [pc, #528]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x2b4>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <HAL_RCC_OscConfig+0x2b6>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00d      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bd6:	4b7f      	ldr	r3, [pc, #508]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bda:	4a7e      	ldr	r2, [pc, #504]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005be2:	4b7c      	ldr	r3, [pc, #496]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bf2:	4b79      	ldr	r3, [pc, #484]	@ (8005dd8 <HAL_RCC_OscConfig+0x4bc>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d118      	bne.n	8005c30 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bfe:	4b76      	ldr	r3, [pc, #472]	@ (8005dd8 <HAL_RCC_OscConfig+0x4bc>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a75      	ldr	r2, [pc, #468]	@ (8005dd8 <HAL_RCC_OscConfig+0x4bc>)
 8005c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c0a:	f7fc ffc5 	bl	8002b98 <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c10:	e008      	b.n	8005c24 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c12:	f7fc ffc1 	bl	8002b98 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e183      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c24:	4b6c      	ldr	r3, [pc, #432]	@ (8005dd8 <HAL_RCC_OscConfig+0x4bc>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0f0      	beq.n	8005c12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d108      	bne.n	8005c4a <HAL_RCC_OscConfig+0x32e>
 8005c38:	4b66      	ldr	r3, [pc, #408]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3e:	4a65      	ldr	r2, [pc, #404]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c48:	e024      	b.n	8005c94 <HAL_RCC_OscConfig+0x378>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2b05      	cmp	r3, #5
 8005c50:	d110      	bne.n	8005c74 <HAL_RCC_OscConfig+0x358>
 8005c52:	4b60      	ldr	r3, [pc, #384]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c58:	4a5e      	ldr	r2, [pc, #376]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c5a:	f043 0304 	orr.w	r3, r3, #4
 8005c5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c62:	4b5c      	ldr	r3, [pc, #368]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c68:	4a5a      	ldr	r2, [pc, #360]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c72:	e00f      	b.n	8005c94 <HAL_RCC_OscConfig+0x378>
 8005c74:	4b57      	ldr	r3, [pc, #348]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7a:	4a56      	ldr	r2, [pc, #344]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c84:	4b53      	ldr	r3, [pc, #332]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c8a:	4a52      	ldr	r2, [pc, #328]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c8c:	f023 0304 	bic.w	r3, r3, #4
 8005c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d016      	beq.n	8005cca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9c:	f7fc ff7c 	bl	8002b98 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ca2:	e00a      	b.n	8005cba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca4:	f7fc ff78 	bl	8002b98 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e138      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cba:	4b46      	ldr	r3, [pc, #280]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0ed      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x388>
 8005cc8:	e015      	b.n	8005cf6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cca:	f7fc ff65 	bl	8002b98 <HAL_GetTick>
 8005cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cd0:	e00a      	b.n	8005ce8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd2:	f7fc ff61 	bl	8002b98 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e121      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1ed      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cf6:	7ffb      	ldrb	r3, [r7, #31]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d105      	bne.n	8005d08 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cfc:	4b35      	ldr	r3, [pc, #212]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d00:	4a34      	ldr	r2, [pc, #208]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d06:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d03c      	beq.n	8005d8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d01c      	beq.n	8005d56 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d22:	4a2c      	ldr	r2, [pc, #176]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2c:	f7fc ff34 	bl	8002b98 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d34:	f7fc ff30 	bl	8002b98 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e0f2      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d46:	4b23      	ldr	r3, [pc, #140]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0ef      	beq.n	8005d34 <HAL_RCC_OscConfig+0x418>
 8005d54:	e01b      	b.n	8005d8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d56:	4b1f      	ldr	r3, [pc, #124]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005d5e:	f023 0301 	bic.w	r3, r3, #1
 8005d62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d66:	f7fc ff17 	bl	8002b98 <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d6e:	f7fc ff13 	bl	8002b98 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e0d5      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d80:	4b14      	ldr	r3, [pc, #80]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1ef      	bne.n	8005d6e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 80c9 	beq.w	8005f2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d98:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 030c 	and.w	r3, r3, #12
 8005da0:	2b0c      	cmp	r3, #12
 8005da2:	f000 8083 	beq.w	8005eac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d15e      	bne.n	8005e6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dae:	4b09      	ldr	r3, [pc, #36]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a08      	ldr	r2, [pc, #32]	@ (8005dd4 <HAL_RCC_OscConfig+0x4b8>)
 8005db4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dba:	f7fc feed 	bl	8002b98 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dc0:	e00c      	b.n	8005ddc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc2:	f7fc fee9 	bl	8002b98 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d905      	bls.n	8005ddc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e0ab      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
 8005dd4:	40021000 	.word	0x40021000
 8005dd8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ddc:	4b55      	ldr	r3, [pc, #340]	@ (8005f34 <HAL_RCC_OscConfig+0x618>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1ec      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005de8:	4b52      	ldr	r3, [pc, #328]	@ (8005f34 <HAL_RCC_OscConfig+0x618>)
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	4b52      	ldr	r3, [pc, #328]	@ (8005f38 <HAL_RCC_OscConfig+0x61c>)
 8005dee:	4013      	ands	r3, r2
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6a11      	ldr	r1, [r2, #32]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005df8:	3a01      	subs	r2, #1
 8005dfa:	0112      	lsls	r2, r2, #4
 8005dfc:	4311      	orrs	r1, r2
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005e02:	0212      	lsls	r2, r2, #8
 8005e04:	4311      	orrs	r1, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e0a:	0852      	lsrs	r2, r2, #1
 8005e0c:	3a01      	subs	r2, #1
 8005e0e:	0552      	lsls	r2, r2, #21
 8005e10:	4311      	orrs	r1, r2
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e16:	0852      	lsrs	r2, r2, #1
 8005e18:	3a01      	subs	r2, #1
 8005e1a:	0652      	lsls	r2, r2, #25
 8005e1c:	4311      	orrs	r1, r2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e22:	06d2      	lsls	r2, r2, #27
 8005e24:	430a      	orrs	r2, r1
 8005e26:	4943      	ldr	r1, [pc, #268]	@ (8005f34 <HAL_RCC_OscConfig+0x618>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e2c:	4b41      	ldr	r3, [pc, #260]	@ (8005f34 <HAL_RCC_OscConfig+0x618>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a40      	ldr	r2, [pc, #256]	@ (8005f34 <HAL_RCC_OscConfig+0x618>)
 8005e32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e38:	4b3e      	ldr	r3, [pc, #248]	@ (8005f34 <HAL_RCC_OscConfig+0x618>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	4a3d      	ldr	r2, [pc, #244]	@ (8005f34 <HAL_RCC_OscConfig+0x618>)
 8005e3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e44:	f7fc fea8 	bl	8002b98 <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e4c:	f7fc fea4 	bl	8002b98 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e066      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e5e:	4b35      	ldr	r3, [pc, #212]	@ (8005f34 <HAL_RCC_OscConfig+0x618>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0f0      	beq.n	8005e4c <HAL_RCC_OscConfig+0x530>
 8005e6a:	e05e      	b.n	8005f2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e6c:	4b31      	ldr	r3, [pc, #196]	@ (8005f34 <HAL_RCC_OscConfig+0x618>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a30      	ldr	r2, [pc, #192]	@ (8005f34 <HAL_RCC_OscConfig+0x618>)
 8005e72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e78:	f7fc fe8e 	bl	8002b98 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e80:	f7fc fe8a 	bl	8002b98 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e04c      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e92:	4b28      	ldr	r3, [pc, #160]	@ (8005f34 <HAL_RCC_OscConfig+0x618>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e9e:	4b25      	ldr	r3, [pc, #148]	@ (8005f34 <HAL_RCC_OscConfig+0x618>)
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	4924      	ldr	r1, [pc, #144]	@ (8005f34 <HAL_RCC_OscConfig+0x618>)
 8005ea4:	4b25      	ldr	r3, [pc, #148]	@ (8005f3c <HAL_RCC_OscConfig+0x620>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	60cb      	str	r3, [r1, #12]
 8005eaa:	e03e      	b.n	8005f2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e039      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8005f34 <HAL_RCC_OscConfig+0x618>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f003 0203 	and.w	r2, r3, #3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d12c      	bne.n	8005f26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d123      	bne.n	8005f26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d11b      	bne.n	8005f26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d113      	bne.n	8005f26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f08:	085b      	lsrs	r3, r3, #1
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d109      	bne.n	8005f26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d001      	beq.n	8005f2a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3720      	adds	r7, #32
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40021000 	.word	0x40021000
 8005f38:	019f800c 	.word	0x019f800c
 8005f3c:	feeefffc 	.word	0xfeeefffc

08005f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e11e      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f58:	4b91      	ldr	r3, [pc, #580]	@ (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 030f 	and.w	r3, r3, #15
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d910      	bls.n	8005f88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f66:	4b8e      	ldr	r3, [pc, #568]	@ (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f023 020f 	bic.w	r2, r3, #15
 8005f6e:	498c      	ldr	r1, [pc, #560]	@ (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f76:	4b8a      	ldr	r3, [pc, #552]	@ (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d001      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e106      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d073      	beq.n	800607c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d129      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f9c:	4b81      	ldr	r3, [pc, #516]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0f4      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005fac:	f000 f99e 	bl	80062ec <RCC_GetSysClockFreqFromPLLSource>
 8005fb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	4a7c      	ldr	r2, [pc, #496]	@ (80061a8 <HAL_RCC_ClockConfig+0x268>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d93f      	bls.n	800603a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fba:	4b7a      	ldr	r3, [pc, #488]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d009      	beq.n	8005fda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d033      	beq.n	800603a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d12f      	bne.n	800603a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fda:	4b72      	ldr	r3, [pc, #456]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fe2:	4a70      	ldr	r2, [pc, #448]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fe8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005fea:	2380      	movs	r3, #128	@ 0x80
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	e024      	b.n	800603a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d107      	bne.n	8006008 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ff8:	4b6a      	ldr	r3, [pc, #424]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d109      	bne.n	8006018 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e0c6      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006008:	4b66      	ldr	r3, [pc, #408]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0be      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006018:	f000 f8ce 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 800601c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	4a61      	ldr	r2, [pc, #388]	@ (80061a8 <HAL_RCC_ClockConfig+0x268>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d909      	bls.n	800603a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006026:	4b5f      	ldr	r3, [pc, #380]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800602e:	4a5d      	ldr	r2, [pc, #372]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006034:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006036:	2380      	movs	r3, #128	@ 0x80
 8006038:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800603a:	4b5a      	ldr	r3, [pc, #360]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f023 0203 	bic.w	r2, r3, #3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	4957      	ldr	r1, [pc, #348]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006048:	4313      	orrs	r3, r2
 800604a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800604c:	f7fc fda4 	bl	8002b98 <HAL_GetTick>
 8006050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006052:	e00a      	b.n	800606a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006054:	f7fc fda0 	bl	8002b98 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006062:	4293      	cmp	r3, r2
 8006064:	d901      	bls.n	800606a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e095      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800606a:	4b4e      	ldr	r3, [pc, #312]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 020c 	and.w	r2, r3, #12
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	429a      	cmp	r2, r3
 800607a:	d1eb      	bne.n	8006054 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d023      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d005      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006094:	4b43      	ldr	r3, [pc, #268]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	4a42      	ldr	r2, [pc, #264]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800609a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800609e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d007      	beq.n	80060bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80060ac:	4b3d      	ldr	r3, [pc, #244]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80060b4:	4a3b      	ldr	r2, [pc, #236]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80060ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060bc:	4b39      	ldr	r3, [pc, #228]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	4936      	ldr	r1, [pc, #216]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	608b      	str	r3, [r1, #8]
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2b80      	cmp	r3, #128	@ 0x80
 80060d4:	d105      	bne.n	80060e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060d6:	4b33      	ldr	r3, [pc, #204]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	4a32      	ldr	r2, [pc, #200]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060e2:	4b2f      	ldr	r3, [pc, #188]	@ (80061a0 <HAL_RCC_ClockConfig+0x260>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d21d      	bcs.n	800612c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f0:	4b2b      	ldr	r3, [pc, #172]	@ (80061a0 <HAL_RCC_ClockConfig+0x260>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f023 020f 	bic.w	r2, r3, #15
 80060f8:	4929      	ldr	r1, [pc, #164]	@ (80061a0 <HAL_RCC_ClockConfig+0x260>)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006100:	f7fc fd4a 	bl	8002b98 <HAL_GetTick>
 8006104:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006106:	e00a      	b.n	800611e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006108:	f7fc fd46 	bl	8002b98 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006116:	4293      	cmp	r3, r2
 8006118:	d901      	bls.n	800611e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e03b      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800611e:	4b20      	ldr	r3, [pc, #128]	@ (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d1ed      	bne.n	8006108 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	d008      	beq.n	800614a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006138:	4b1a      	ldr	r3, [pc, #104]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	4917      	ldr	r1, [pc, #92]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006146:	4313      	orrs	r3, r2
 8006148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d009      	beq.n	800616a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006156:	4b13      	ldr	r3, [pc, #76]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	490f      	ldr	r1, [pc, #60]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006166:	4313      	orrs	r3, r2
 8006168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800616a:	f000 f825 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 800616e:	4602      	mov	r2, r0
 8006170:	4b0c      	ldr	r3, [pc, #48]	@ (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	091b      	lsrs	r3, r3, #4
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	490c      	ldr	r1, [pc, #48]	@ (80061ac <HAL_RCC_ClockConfig+0x26c>)
 800617c:	5ccb      	ldrb	r3, [r1, r3]
 800617e:	f003 031f 	and.w	r3, r3, #31
 8006182:	fa22 f303 	lsr.w	r3, r2, r3
 8006186:	4a0a      	ldr	r2, [pc, #40]	@ (80061b0 <HAL_RCC_ClockConfig+0x270>)
 8006188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800618a:	4b0a      	ldr	r3, [pc, #40]	@ (80061b4 <HAL_RCC_ClockConfig+0x274>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4618      	mov	r0, r3
 8006190:	f7fc fcb6 	bl	8002b00 <HAL_InitTick>
 8006194:	4603      	mov	r3, r0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40022000 	.word	0x40022000
 80061a4:	40021000 	.word	0x40021000
 80061a8:	04c4b400 	.word	0x04c4b400
 80061ac:	08009ef4 	.word	0x08009ef4
 80061b0:	20000000 	.word	0x20000000
 80061b4:	20000004 	.word	0x20000004

080061b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80061be:	4b2c      	ldr	r3, [pc, #176]	@ (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 030c 	and.w	r3, r3, #12
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d102      	bne.n	80061d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061ca:	4b2a      	ldr	r3, [pc, #168]	@ (8006274 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	e047      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80061d0:	4b27      	ldr	r3, [pc, #156]	@ (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f003 030c 	and.w	r3, r3, #12
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d102      	bne.n	80061e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061dc:	4b26      	ldr	r3, [pc, #152]	@ (8006278 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	e03e      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80061e2:	4b23      	ldr	r3, [pc, #140]	@ (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 030c 	and.w	r3, r3, #12
 80061ea:	2b0c      	cmp	r3, #12
 80061ec:	d136      	bne.n	800625c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061ee:	4b20      	ldr	r3, [pc, #128]	@ (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	091b      	lsrs	r3, r3, #4
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	3301      	adds	r3, #1
 8006204:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b03      	cmp	r3, #3
 800620a:	d10c      	bne.n	8006226 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800620c:	4a1a      	ldr	r2, [pc, #104]	@ (8006278 <HAL_RCC_GetSysClockFreq+0xc0>)
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	4a16      	ldr	r2, [pc, #88]	@ (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006216:	68d2      	ldr	r2, [r2, #12]
 8006218:	0a12      	lsrs	r2, r2, #8
 800621a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	617b      	str	r3, [r7, #20]
      break;
 8006224:	e00c      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006226:	4a13      	ldr	r2, [pc, #76]	@ (8006274 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	fbb2 f3f3 	udiv	r3, r2, r3
 800622e:	4a10      	ldr	r2, [pc, #64]	@ (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006230:	68d2      	ldr	r2, [r2, #12]
 8006232:	0a12      	lsrs	r2, r2, #8
 8006234:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006238:	fb02 f303 	mul.w	r3, r2, r3
 800623c:	617b      	str	r3, [r7, #20]
      break;
 800623e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006240:	4b0b      	ldr	r3, [pc, #44]	@ (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	0e5b      	lsrs	r3, r3, #25
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	3301      	adds	r3, #1
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	fbb2 f3f3 	udiv	r3, r2, r3
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	e001      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006260:	693b      	ldr	r3, [r7, #16]
}
 8006262:	4618      	mov	r0, r3
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40021000 	.word	0x40021000
 8006274:	00f42400 	.word	0x00f42400
 8006278:	007a1200 	.word	0x007a1200

0800627c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006280:	4b03      	ldr	r3, [pc, #12]	@ (8006290 <HAL_RCC_GetHCLKFreq+0x14>)
 8006282:	681b      	ldr	r3, [r3, #0]
}
 8006284:	4618      	mov	r0, r3
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	20000000 	.word	0x20000000

08006294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006298:	f7ff fff0 	bl	800627c <HAL_RCC_GetHCLKFreq>
 800629c:	4602      	mov	r2, r0
 800629e:	4b06      	ldr	r3, [pc, #24]	@ (80062b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	0a1b      	lsrs	r3, r3, #8
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	4904      	ldr	r1, [pc, #16]	@ (80062bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80062aa:	5ccb      	ldrb	r3, [r1, r3]
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40021000 	.word	0x40021000
 80062bc:	08009f04 	.word	0x08009f04

080062c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062c4:	f7ff ffda 	bl	800627c <HAL_RCC_GetHCLKFreq>
 80062c8:	4602      	mov	r2, r0
 80062ca:	4b06      	ldr	r3, [pc, #24]	@ (80062e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	0adb      	lsrs	r3, r3, #11
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	4904      	ldr	r1, [pc, #16]	@ (80062e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062d6:	5ccb      	ldrb	r3, [r1, r3]
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40021000 	.word	0x40021000
 80062e8:	08009f04 	.word	0x08009f04

080062ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062f2:	4b1e      	ldr	r3, [pc, #120]	@ (800636c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062fc:	4b1b      	ldr	r3, [pc, #108]	@ (800636c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	091b      	lsrs	r3, r3, #4
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	3301      	adds	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b03      	cmp	r3, #3
 800630e:	d10c      	bne.n	800632a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006310:	4a17      	ldr	r2, [pc, #92]	@ (8006370 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	fbb2 f3f3 	udiv	r3, r2, r3
 8006318:	4a14      	ldr	r2, [pc, #80]	@ (800636c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800631a:	68d2      	ldr	r2, [r2, #12]
 800631c:	0a12      	lsrs	r2, r2, #8
 800631e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006322:	fb02 f303 	mul.w	r3, r2, r3
 8006326:	617b      	str	r3, [r7, #20]
    break;
 8006328:	e00c      	b.n	8006344 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800632a:	4a12      	ldr	r2, [pc, #72]	@ (8006374 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006332:	4a0e      	ldr	r2, [pc, #56]	@ (800636c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006334:	68d2      	ldr	r2, [r2, #12]
 8006336:	0a12      	lsrs	r2, r2, #8
 8006338:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800633c:	fb02 f303 	mul.w	r3, r2, r3
 8006340:	617b      	str	r3, [r7, #20]
    break;
 8006342:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006344:	4b09      	ldr	r3, [pc, #36]	@ (800636c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	0e5b      	lsrs	r3, r3, #25
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	3301      	adds	r3, #1
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	fbb2 f3f3 	udiv	r3, r2, r3
 800635c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800635e:	687b      	ldr	r3, [r7, #4]
}
 8006360:	4618      	mov	r0, r3
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	40021000 	.word	0x40021000
 8006370:	007a1200 	.word	0x007a1200
 8006374:	00f42400 	.word	0x00f42400

08006378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006380:	2300      	movs	r3, #0
 8006382:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006384:	2300      	movs	r3, #0
 8006386:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 8098 	beq.w	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006396:	2300      	movs	r3, #0
 8006398:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800639a:	4b43      	ldr	r3, [pc, #268]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800639c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10d      	bne.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063a6:	4b40      	ldr	r3, [pc, #256]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063aa:	4a3f      	ldr	r2, [pc, #252]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80063b2:	4b3d      	ldr	r3, [pc, #244]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ba:	60bb      	str	r3, [r7, #8]
 80063bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063be:	2301      	movs	r3, #1
 80063c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063c2:	4b3a      	ldr	r3, [pc, #232]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a39      	ldr	r2, [pc, #228]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063ce:	f7fc fbe3 	bl	8002b98 <HAL_GetTick>
 80063d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063d4:	e009      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063d6:	f7fc fbdf 	bl	8002b98 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d902      	bls.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	74fb      	strb	r3, [r7, #19]
        break;
 80063e8:	e005      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063ea:	4b30      	ldr	r3, [pc, #192]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0ef      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80063f6:	7cfb      	ldrb	r3, [r7, #19]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d159      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063fc:	4b2a      	ldr	r3, [pc, #168]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006406:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d01e      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	429a      	cmp	r2, r3
 8006416:	d019      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006418:	4b23      	ldr	r3, [pc, #140]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800641e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006422:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006424:	4b20      	ldr	r3, [pc, #128]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800642a:	4a1f      	ldr	r2, [pc, #124]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800642c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006434:	4b1c      	ldr	r3, [pc, #112]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643a:	4a1b      	ldr	r2, [pc, #108]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800643c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006444:	4a18      	ldr	r2, [pc, #96]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d016      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006456:	f7fc fb9f 	bl	8002b98 <HAL_GetTick>
 800645a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800645c:	e00b      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800645e:	f7fc fb9b 	bl	8002b98 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800646c:	4293      	cmp	r3, r2
 800646e:	d902      	bls.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	74fb      	strb	r3, [r7, #19]
            break;
 8006474:	e006      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006476:	4b0c      	ldr	r3, [pc, #48]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0ec      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006484:	7cfb      	ldrb	r3, [r7, #19]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800648a:	4b07      	ldr	r3, [pc, #28]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800648c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006490:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006498:	4903      	ldr	r1, [pc, #12]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80064a0:	e008      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064a2:	7cfb      	ldrb	r3, [r7, #19]
 80064a4:	74bb      	strb	r3, [r7, #18]
 80064a6:	e005      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064a8:	40021000 	.word	0x40021000
 80064ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b0:	7cfb      	ldrb	r3, [r7, #19]
 80064b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064b4:	7c7b      	ldrb	r3, [r7, #17]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d105      	bne.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ba:	4ba7      	ldr	r3, [pc, #668]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064be:	4aa6      	ldr	r2, [pc, #664]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064d2:	4ba1      	ldr	r3, [pc, #644]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d8:	f023 0203 	bic.w	r2, r3, #3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	499d      	ldr	r1, [pc, #628]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064f4:	4b98      	ldr	r3, [pc, #608]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064fa:	f023 020c 	bic.w	r2, r3, #12
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	4995      	ldr	r1, [pc, #596]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006504:	4313      	orrs	r3, r2
 8006506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006516:	4b90      	ldr	r3, [pc, #576]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	498c      	ldr	r1, [pc, #560]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0308 	and.w	r3, r3, #8
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006538:	4b87      	ldr	r3, [pc, #540]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	4984      	ldr	r1, [pc, #528]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006548:	4313      	orrs	r3, r2
 800654a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0310 	and.w	r3, r3, #16
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800655a:	4b7f      	ldr	r3, [pc, #508]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006560:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	497b      	ldr	r1, [pc, #492]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800656a:	4313      	orrs	r3, r2
 800656c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00a      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800657c:	4b76      	ldr	r3, [pc, #472]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006582:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	4973      	ldr	r1, [pc, #460]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658c:	4313      	orrs	r3, r2
 800658e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800659e:	4b6e      	ldr	r3, [pc, #440]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	496a      	ldr	r1, [pc, #424]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065c0:	4b65      	ldr	r3, [pc, #404]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	4962      	ldr	r1, [pc, #392]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065e2:	4b5d      	ldr	r3, [pc, #372]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f0:	4959      	ldr	r1, [pc, #356]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006604:	4b54      	ldr	r3, [pc, #336]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006606:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800660a:	f023 0203 	bic.w	r2, r3, #3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006612:	4951      	ldr	r1, [pc, #324]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006626:	4b4c      	ldr	r3, [pc, #304]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006634:	4948      	ldr	r1, [pc, #288]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006636:	4313      	orrs	r3, r2
 8006638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006644:	2b00      	cmp	r3, #0
 8006646:	d015      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006648:	4b43      	ldr	r3, [pc, #268]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800664a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800664e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006656:	4940      	ldr	r1, [pc, #256]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006658:	4313      	orrs	r3, r2
 800665a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006662:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006666:	d105      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006668:	4b3b      	ldr	r3, [pc, #236]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	4a3a      	ldr	r2, [pc, #232]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006672:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800667c:	2b00      	cmp	r3, #0
 800667e:	d015      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006680:	4b35      	ldr	r3, [pc, #212]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006686:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800668e:	4932      	ldr	r1, [pc, #200]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006690:	4313      	orrs	r3, r2
 8006692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800669a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800669e:	d105      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066aa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d015      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066b8:	4b27      	ldr	r3, [pc, #156]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c6:	4924      	ldr	r1, [pc, #144]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066d6:	d105      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d015      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066f0:	4b19      	ldr	r3, [pc, #100]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fe:	4916      	ldr	r1, [pc, #88]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006700:	4313      	orrs	r3, r2
 8006702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800670a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800670e:	d105      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006710:	4b11      	ldr	r3, [pc, #68]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	4a10      	ldr	r2, [pc, #64]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006716:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800671a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d019      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006728:	4b0b      	ldr	r3, [pc, #44]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800672e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006736:	4908      	ldr	r1, [pc, #32]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006742:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006746:	d109      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006748:	4b03      	ldr	r3, [pc, #12]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	4a02      	ldr	r2, [pc, #8]	@ (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800674e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006752:	60d3      	str	r3, [r2, #12]
 8006754:	e002      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006756:	bf00      	nop
 8006758:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d015      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006768:	4b29      	ldr	r3, [pc, #164]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800676a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800676e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006776:	4926      	ldr	r1, [pc, #152]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006778:	4313      	orrs	r3, r2
 800677a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006782:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006786:	d105      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006788:	4b21      	ldr	r3, [pc, #132]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	4a20      	ldr	r2, [pc, #128]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800678e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006792:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d015      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80067a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ae:	4918      	ldr	r1, [pc, #96]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067be:	d105      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067c0:	4b13      	ldr	r3, [pc, #76]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	4a12      	ldr	r2, [pc, #72]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d015      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067e6:	490a      	ldr	r1, [pc, #40]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067f6:	d105      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067f8:	4b05      	ldr	r3, [pc, #20]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	4a04      	ldr	r2, [pc, #16]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006802:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006804:	7cbb      	ldrb	r3, [r7, #18]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40021000 	.word	0x40021000

08006814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e09d      	b.n	8006962 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682a:	2b00      	cmp	r3, #0
 800682c:	d108      	bne.n	8006840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006836:	d009      	beq.n	800684c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	61da      	str	r2, [r3, #28]
 800683e:	e005      	b.n	800684c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d106      	bne.n	800686c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fb fc1a 	bl	80020a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006882:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800688c:	d902      	bls.n	8006894 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e002      	b.n	800689a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006898:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80068a2:	d007      	beq.n	80068b4 <HAL_SPI_Init+0xa0>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068ac:	d002      	beq.n	80068b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068ec:	431a      	orrs	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f6:	ea42 0103 	orr.w	r1, r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	0c1b      	lsrs	r3, r3, #16
 8006910:	f003 0204 	and.w	r2, r3, #4
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006930:	ea42 0103 	orr.w	r1, r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006950:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e049      	b.n	8006a10 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fb fbc9 	bl	8002128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f000 fd77 	bl	800749c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e049      	b.n	8006abe <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f841 	bl	8006ac6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3304      	adds	r3, #4
 8006a54:	4619      	mov	r1, r3
 8006a56:	4610      	mov	r0, r2
 8006a58:	f000 fd20 	bl	800749c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e049      	b.n	8006b80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d106      	bne.n	8006b06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f841 	bl	8006b88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3304      	adds	r3, #4
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f000 fcbf 	bl	800749c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e049      	b.n	8006c42 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fb fcba 	bl	800253c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4610      	mov	r0, r2
 8006bdc:	f000 fc5e 	bl	800749c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b086      	sub	sp, #24
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e097      	b.n	8006d8e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f88f 	bl	8006d96 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6812      	ldr	r2, [r2, #0]
 8006c8a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006c8e:	f023 0307 	bic.w	r3, r3, #7
 8006c92:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	f000 fbfc 	bl	800749c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ccc:	f023 0303 	bic.w	r3, r3, #3
 8006cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	021b      	lsls	r3, r3, #8
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006cea:	f023 030c 	bic.w	r3, r3, #12
 8006cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006cf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	021b      	lsls	r3, r3, #8
 8006d06:	4313      	orrs	r3, r2
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	011a      	lsls	r2, r3, #4
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	031b      	lsls	r3, r3, #12
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006d28:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006d30:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
	...

08006dac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <HAL_TIM_OC_ConfigChannel+0x1e>
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	e066      	b.n	8006e98 <HAL_TIM_OC_ConfigChannel+0xec>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b14      	cmp	r3, #20
 8006dd6:	d857      	bhi.n	8006e88 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8006de0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006e35 	.word	0x08006e35
 8006de4:	08006e89 	.word	0x08006e89
 8006de8:	08006e89 	.word	0x08006e89
 8006dec:	08006e89 	.word	0x08006e89
 8006df0:	08006e43 	.word	0x08006e43
 8006df4:	08006e89 	.word	0x08006e89
 8006df8:	08006e89 	.word	0x08006e89
 8006dfc:	08006e89 	.word	0x08006e89
 8006e00:	08006e51 	.word	0x08006e51
 8006e04:	08006e89 	.word	0x08006e89
 8006e08:	08006e89 	.word	0x08006e89
 8006e0c:	08006e89 	.word	0x08006e89
 8006e10:	08006e5f 	.word	0x08006e5f
 8006e14:	08006e89 	.word	0x08006e89
 8006e18:	08006e89 	.word	0x08006e89
 8006e1c:	08006e89 	.word	0x08006e89
 8006e20:	08006e6d 	.word	0x08006e6d
 8006e24:	08006e89 	.word	0x08006e89
 8006e28:	08006e89 	.word	0x08006e89
 8006e2c:	08006e89 	.word	0x08006e89
 8006e30:	08006e7b 	.word	0x08006e7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fbe2 	bl	8007604 <TIM_OC1_SetConfig>
      break;
 8006e40:	e025      	b.n	8006e8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68b9      	ldr	r1, [r7, #8]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fc75 	bl	8007738 <TIM_OC2_SetConfig>
      break;
 8006e4e:	e01e      	b.n	8006e8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fd02 	bl	8007860 <TIM_OC3_SetConfig>
      break;
 8006e5c:	e017      	b.n	8006e8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68b9      	ldr	r1, [r7, #8]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fd8d 	bl	8007984 <TIM_OC4_SetConfig>
      break;
 8006e6a:	e010      	b.n	8006e8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68b9      	ldr	r1, [r7, #8]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fe1a 	bl	8007aac <TIM_OC5_SetConfig>
      break;
 8006e78:	e009      	b.n	8006e8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68b9      	ldr	r1, [r7, #8]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 fe7d 	bl	8007b80 <TIM_OC6_SetConfig>
      break;
 8006e86:	e002      	b.n	8006e8e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_TIM_IC_ConfigChannel+0x1e>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e088      	b.n	8006fd0 <HAL_TIM_IC_ConfigChannel+0x130>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d11b      	bne.n	8006f04 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006edc:	f000 ff92 	bl	8007e04 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 020c 	bic.w	r2, r2, #12
 8006eee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6999      	ldr	r1, [r3, #24]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	619a      	str	r2, [r3, #24]
 8006f02:	e060      	b.n	8006fc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d11c      	bne.n	8006f44 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006f1a:	f001 f816 	bl	8007f4a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	699a      	ldr	r2, [r3, #24]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006f2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6999      	ldr	r1, [r3, #24]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	021a      	lsls	r2, r3, #8
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	619a      	str	r2, [r3, #24]
 8006f42:	e040      	b.n	8006fc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b08      	cmp	r3, #8
 8006f48:	d11b      	bne.n	8006f82 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006f5a:	f001 f863 	bl	8008024 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69da      	ldr	r2, [r3, #28]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 020c 	bic.w	r2, r2, #12
 8006f6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69d9      	ldr	r1, [r3, #28]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	61da      	str	r2, [r3, #28]
 8006f80:	e021      	b.n	8006fc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b0c      	cmp	r3, #12
 8006f86:	d11c      	bne.n	8006fc2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006f98:	f001 f880 	bl	800809c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	69da      	ldr	r2, [r3, #28]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006faa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	69d9      	ldr	r1, [r3, #28]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	021a      	lsls	r2, r3, #8
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	61da      	str	r2, [r3, #28]
 8006fc0:	e001      	b.n	8006fc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d101      	bne.n	8006ff6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	e0ff      	b.n	80071f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b14      	cmp	r3, #20
 8007002:	f200 80f0 	bhi.w	80071e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007006:	a201      	add	r2, pc, #4	@ (adr r2, 800700c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700c:	08007061 	.word	0x08007061
 8007010:	080071e7 	.word	0x080071e7
 8007014:	080071e7 	.word	0x080071e7
 8007018:	080071e7 	.word	0x080071e7
 800701c:	080070a1 	.word	0x080070a1
 8007020:	080071e7 	.word	0x080071e7
 8007024:	080071e7 	.word	0x080071e7
 8007028:	080071e7 	.word	0x080071e7
 800702c:	080070e3 	.word	0x080070e3
 8007030:	080071e7 	.word	0x080071e7
 8007034:	080071e7 	.word	0x080071e7
 8007038:	080071e7 	.word	0x080071e7
 800703c:	08007123 	.word	0x08007123
 8007040:	080071e7 	.word	0x080071e7
 8007044:	080071e7 	.word	0x080071e7
 8007048:	080071e7 	.word	0x080071e7
 800704c:	08007165 	.word	0x08007165
 8007050:	080071e7 	.word	0x080071e7
 8007054:	080071e7 	.word	0x080071e7
 8007058:	080071e7 	.word	0x080071e7
 800705c:	080071a5 	.word	0x080071a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68b9      	ldr	r1, [r7, #8]
 8007066:	4618      	mov	r0, r3
 8007068:	f000 facc 	bl	8007604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699a      	ldr	r2, [r3, #24]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0208 	orr.w	r2, r2, #8
 800707a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699a      	ldr	r2, [r3, #24]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0204 	bic.w	r2, r2, #4
 800708a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6999      	ldr	r1, [r3, #24]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	619a      	str	r2, [r3, #24]
      break;
 800709e:	e0a5      	b.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68b9      	ldr	r1, [r7, #8]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fb46 	bl	8007738 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	699a      	ldr	r2, [r3, #24]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699a      	ldr	r2, [r3, #24]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6999      	ldr	r1, [r3, #24]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	021a      	lsls	r2, r3, #8
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	619a      	str	r2, [r3, #24]
      break;
 80070e0:	e084      	b.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68b9      	ldr	r1, [r7, #8]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 fbb9 	bl	8007860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69da      	ldr	r2, [r3, #28]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f042 0208 	orr.w	r2, r2, #8
 80070fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69da      	ldr	r2, [r3, #28]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0204 	bic.w	r2, r2, #4
 800710c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69d9      	ldr	r1, [r3, #28]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	691a      	ldr	r2, [r3, #16]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	61da      	str	r2, [r3, #28]
      break;
 8007120:	e064      	b.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68b9      	ldr	r1, [r7, #8]
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fc2b 	bl	8007984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69da      	ldr	r2, [r3, #28]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800713c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69da      	ldr	r2, [r3, #28]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800714c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69d9      	ldr	r1, [r3, #28]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	021a      	lsls	r2, r3, #8
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	61da      	str	r2, [r3, #28]
      break;
 8007162:	e043      	b.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	4618      	mov	r0, r3
 800716c:	f000 fc9e 	bl	8007aac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0208 	orr.w	r2, r2, #8
 800717e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0204 	bic.w	r2, r2, #4
 800718e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	691a      	ldr	r2, [r3, #16]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80071a2:	e023      	b.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68b9      	ldr	r1, [r7, #8]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 fce8 	bl	8007b80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	021a      	lsls	r2, r3, #8
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80071e4:	e002      	b.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	75fb      	strb	r3, [r7, #23]
      break;
 80071ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop

08007200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007214:	2b01      	cmp	r3, #1
 8007216:	d101      	bne.n	800721c <HAL_TIM_ConfigClockSource+0x1c>
 8007218:	2302      	movs	r3, #2
 800721a:	e0ee      	b.n	80073fa <HAL_TIM_ConfigClockSource+0x1fa>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800723a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800723e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007246:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a6b      	ldr	r2, [pc, #428]	@ (8007404 <HAL_TIM_ConfigClockSource+0x204>)
 8007256:	4293      	cmp	r3, r2
 8007258:	f000 80b9 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x1ce>
 800725c:	4a69      	ldr	r2, [pc, #420]	@ (8007404 <HAL_TIM_ConfigClockSource+0x204>)
 800725e:	4293      	cmp	r3, r2
 8007260:	f200 80be 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 8007264:	4a68      	ldr	r2, [pc, #416]	@ (8007408 <HAL_TIM_ConfigClockSource+0x208>)
 8007266:	4293      	cmp	r3, r2
 8007268:	f000 80b1 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x1ce>
 800726c:	4a66      	ldr	r2, [pc, #408]	@ (8007408 <HAL_TIM_ConfigClockSource+0x208>)
 800726e:	4293      	cmp	r3, r2
 8007270:	f200 80b6 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 8007274:	4a65      	ldr	r2, [pc, #404]	@ (800740c <HAL_TIM_ConfigClockSource+0x20c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	f000 80a9 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x1ce>
 800727c:	4a63      	ldr	r2, [pc, #396]	@ (800740c <HAL_TIM_ConfigClockSource+0x20c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	f200 80ae 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 8007284:	4a62      	ldr	r2, [pc, #392]	@ (8007410 <HAL_TIM_ConfigClockSource+0x210>)
 8007286:	4293      	cmp	r3, r2
 8007288:	f000 80a1 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x1ce>
 800728c:	4a60      	ldr	r2, [pc, #384]	@ (8007410 <HAL_TIM_ConfigClockSource+0x210>)
 800728e:	4293      	cmp	r3, r2
 8007290:	f200 80a6 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 8007294:	4a5f      	ldr	r2, [pc, #380]	@ (8007414 <HAL_TIM_ConfigClockSource+0x214>)
 8007296:	4293      	cmp	r3, r2
 8007298:	f000 8099 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x1ce>
 800729c:	4a5d      	ldr	r2, [pc, #372]	@ (8007414 <HAL_TIM_ConfigClockSource+0x214>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	f200 809e 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 80072a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80072a8:	f000 8091 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x1ce>
 80072ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80072b0:	f200 8096 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 80072b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072b8:	f000 8089 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x1ce>
 80072bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072c0:	f200 808e 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 80072c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072c8:	d03e      	beq.n	8007348 <HAL_TIM_ConfigClockSource+0x148>
 80072ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ce:	f200 8087 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 80072d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072d6:	f000 8086 	beq.w	80073e6 <HAL_TIM_ConfigClockSource+0x1e6>
 80072da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072de:	d87f      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 80072e0:	2b70      	cmp	r3, #112	@ 0x70
 80072e2:	d01a      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x11a>
 80072e4:	2b70      	cmp	r3, #112	@ 0x70
 80072e6:	d87b      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 80072e8:	2b60      	cmp	r3, #96	@ 0x60
 80072ea:	d050      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x18e>
 80072ec:	2b60      	cmp	r3, #96	@ 0x60
 80072ee:	d877      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 80072f0:	2b50      	cmp	r3, #80	@ 0x50
 80072f2:	d03c      	beq.n	800736e <HAL_TIM_ConfigClockSource+0x16e>
 80072f4:	2b50      	cmp	r3, #80	@ 0x50
 80072f6:	d873      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 80072f8:	2b40      	cmp	r3, #64	@ 0x40
 80072fa:	d058      	beq.n	80073ae <HAL_TIM_ConfigClockSource+0x1ae>
 80072fc:	2b40      	cmp	r3, #64	@ 0x40
 80072fe:	d86f      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 8007300:	2b30      	cmp	r3, #48	@ 0x30
 8007302:	d064      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x1ce>
 8007304:	2b30      	cmp	r3, #48	@ 0x30
 8007306:	d86b      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 8007308:	2b20      	cmp	r3, #32
 800730a:	d060      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x1ce>
 800730c:	2b20      	cmp	r3, #32
 800730e:	d867      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d05c      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x1ce>
 8007314:	2b10      	cmp	r3, #16
 8007316:	d05a      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x1ce>
 8007318:	e062      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800732a:	f000 ff11 	bl	8008150 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800733c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	609a      	str	r2, [r3, #8]
      break;
 8007346:	e04f      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007358:	f000 fefa 	bl	8008150 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689a      	ldr	r2, [r3, #8]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800736a:	609a      	str	r2, [r3, #8]
      break;
 800736c:	e03c      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800737a:	461a      	mov	r2, r3
 800737c:	f000 fdb6 	bl	8007eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2150      	movs	r1, #80	@ 0x50
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fec5 	bl	8008116 <TIM_ITRx_SetConfig>
      break;
 800738c:	e02c      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800739a:	461a      	mov	r2, r3
 800739c:	f000 fe12 	bl	8007fc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2160      	movs	r1, #96	@ 0x60
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 feb5 	bl	8008116 <TIM_ITRx_SetConfig>
      break;
 80073ac:	e01c      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ba:	461a      	mov	r2, r3
 80073bc:	f000 fd96 	bl	8007eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2140      	movs	r1, #64	@ 0x40
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 fea5 	bl	8008116 <TIM_ITRx_SetConfig>
      break;
 80073cc:	e00c      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4619      	mov	r1, r3
 80073d8:	4610      	mov	r0, r2
 80073da:	f000 fe9c 	bl	8008116 <TIM_ITRx_SetConfig>
      break;
 80073de:	e003      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	73fb      	strb	r3, [r7, #15]
      break;
 80073e4:	e000      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80073e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	00100070 	.word	0x00100070
 8007408:	00100050 	.word	0x00100050
 800740c:	00100040 	.word	0x00100040
 8007410:	00100030 	.word	0x00100030
 8007414:	00100020 	.word	0x00100020

08007418 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007428:	2b01      	cmp	r3, #1
 800742a:	d101      	bne.n	8007430 <HAL_TIM_SlaveConfigSynchro+0x18>
 800742c:	2302      	movs	r3, #2
 800742e:	e031      	b.n	8007494 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2202      	movs	r2, #2
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fc08 	bl	8007c58 <TIM_SlaveTimer_SetConfig>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d009      	beq.n	8007462 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e018      	b.n	8007494 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68da      	ldr	r2, [r3, #12]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007470:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007480:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a4c      	ldr	r2, [pc, #304]	@ (80075e0 <TIM_Base_SetConfig+0x144>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d017      	beq.n	80074e4 <TIM_Base_SetConfig+0x48>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ba:	d013      	beq.n	80074e4 <TIM_Base_SetConfig+0x48>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a49      	ldr	r2, [pc, #292]	@ (80075e4 <TIM_Base_SetConfig+0x148>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00f      	beq.n	80074e4 <TIM_Base_SetConfig+0x48>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a48      	ldr	r2, [pc, #288]	@ (80075e8 <TIM_Base_SetConfig+0x14c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00b      	beq.n	80074e4 <TIM_Base_SetConfig+0x48>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a47      	ldr	r2, [pc, #284]	@ (80075ec <TIM_Base_SetConfig+0x150>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d007      	beq.n	80074e4 <TIM_Base_SetConfig+0x48>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a46      	ldr	r2, [pc, #280]	@ (80075f0 <TIM_Base_SetConfig+0x154>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d003      	beq.n	80074e4 <TIM_Base_SetConfig+0x48>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a45      	ldr	r2, [pc, #276]	@ (80075f4 <TIM_Base_SetConfig+0x158>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d108      	bne.n	80074f6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a39      	ldr	r2, [pc, #228]	@ (80075e0 <TIM_Base_SetConfig+0x144>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d023      	beq.n	8007546 <TIM_Base_SetConfig+0xaa>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007504:	d01f      	beq.n	8007546 <TIM_Base_SetConfig+0xaa>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a36      	ldr	r2, [pc, #216]	@ (80075e4 <TIM_Base_SetConfig+0x148>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d01b      	beq.n	8007546 <TIM_Base_SetConfig+0xaa>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a35      	ldr	r2, [pc, #212]	@ (80075e8 <TIM_Base_SetConfig+0x14c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d017      	beq.n	8007546 <TIM_Base_SetConfig+0xaa>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a34      	ldr	r2, [pc, #208]	@ (80075ec <TIM_Base_SetConfig+0x150>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d013      	beq.n	8007546 <TIM_Base_SetConfig+0xaa>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a33      	ldr	r2, [pc, #204]	@ (80075f0 <TIM_Base_SetConfig+0x154>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00f      	beq.n	8007546 <TIM_Base_SetConfig+0xaa>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a33      	ldr	r2, [pc, #204]	@ (80075f8 <TIM_Base_SetConfig+0x15c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00b      	beq.n	8007546 <TIM_Base_SetConfig+0xaa>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a32      	ldr	r2, [pc, #200]	@ (80075fc <TIM_Base_SetConfig+0x160>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d007      	beq.n	8007546 <TIM_Base_SetConfig+0xaa>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a31      	ldr	r2, [pc, #196]	@ (8007600 <TIM_Base_SetConfig+0x164>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d003      	beq.n	8007546 <TIM_Base_SetConfig+0xaa>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a2c      	ldr	r2, [pc, #176]	@ (80075f4 <TIM_Base_SetConfig+0x158>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d108      	bne.n	8007558 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800754c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a18      	ldr	r2, [pc, #96]	@ (80075e0 <TIM_Base_SetConfig+0x144>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d013      	beq.n	80075ac <TIM_Base_SetConfig+0x110>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a1a      	ldr	r2, [pc, #104]	@ (80075f0 <TIM_Base_SetConfig+0x154>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00f      	beq.n	80075ac <TIM_Base_SetConfig+0x110>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a1a      	ldr	r2, [pc, #104]	@ (80075f8 <TIM_Base_SetConfig+0x15c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d00b      	beq.n	80075ac <TIM_Base_SetConfig+0x110>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a19      	ldr	r2, [pc, #100]	@ (80075fc <TIM_Base_SetConfig+0x160>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d007      	beq.n	80075ac <TIM_Base_SetConfig+0x110>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a18      	ldr	r2, [pc, #96]	@ (8007600 <TIM_Base_SetConfig+0x164>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d003      	beq.n	80075ac <TIM_Base_SetConfig+0x110>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a13      	ldr	r2, [pc, #76]	@ (80075f4 <TIM_Base_SetConfig+0x158>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d103      	bne.n	80075b4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d105      	bne.n	80075d2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f023 0201 	bic.w	r2, r3, #1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	611a      	str	r2, [r3, #16]
  }
}
 80075d2:	bf00      	nop
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	40012c00 	.word	0x40012c00
 80075e4:	40000400 	.word	0x40000400
 80075e8:	40000800 	.word	0x40000800
 80075ec:	40000c00 	.word	0x40000c00
 80075f0:	40013400 	.word	0x40013400
 80075f4:	40015000 	.word	0x40015000
 80075f8:	40014000 	.word	0x40014000
 80075fc:	40014400 	.word	0x40014400
 8007600:	40014800 	.word	0x40014800

08007604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	f023 0201 	bic.w	r2, r3, #1
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0303 	bic.w	r3, r3, #3
 800763e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f023 0302 	bic.w	r3, r3, #2
 8007650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a30      	ldr	r2, [pc, #192]	@ (8007720 <TIM_OC1_SetConfig+0x11c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d013      	beq.n	800768c <TIM_OC1_SetConfig+0x88>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a2f      	ldr	r2, [pc, #188]	@ (8007724 <TIM_OC1_SetConfig+0x120>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00f      	beq.n	800768c <TIM_OC1_SetConfig+0x88>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a2e      	ldr	r2, [pc, #184]	@ (8007728 <TIM_OC1_SetConfig+0x124>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00b      	beq.n	800768c <TIM_OC1_SetConfig+0x88>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a2d      	ldr	r2, [pc, #180]	@ (800772c <TIM_OC1_SetConfig+0x128>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d007      	beq.n	800768c <TIM_OC1_SetConfig+0x88>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a2c      	ldr	r2, [pc, #176]	@ (8007730 <TIM_OC1_SetConfig+0x12c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d003      	beq.n	800768c <TIM_OC1_SetConfig+0x88>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a2b      	ldr	r2, [pc, #172]	@ (8007734 <TIM_OC1_SetConfig+0x130>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d10c      	bne.n	80076a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f023 0308 	bic.w	r3, r3, #8
 8007692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f023 0304 	bic.w	r3, r3, #4
 80076a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007720 <TIM_OC1_SetConfig+0x11c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d013      	beq.n	80076d6 <TIM_OC1_SetConfig+0xd2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007724 <TIM_OC1_SetConfig+0x120>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00f      	beq.n	80076d6 <TIM_OC1_SetConfig+0xd2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a1b      	ldr	r2, [pc, #108]	@ (8007728 <TIM_OC1_SetConfig+0x124>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d00b      	beq.n	80076d6 <TIM_OC1_SetConfig+0xd2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a1a      	ldr	r2, [pc, #104]	@ (800772c <TIM_OC1_SetConfig+0x128>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d007      	beq.n	80076d6 <TIM_OC1_SetConfig+0xd2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a19      	ldr	r2, [pc, #100]	@ (8007730 <TIM_OC1_SetConfig+0x12c>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d003      	beq.n	80076d6 <TIM_OC1_SetConfig+0xd2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a18      	ldr	r2, [pc, #96]	@ (8007734 <TIM_OC1_SetConfig+0x130>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d111      	bne.n	80076fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	621a      	str	r2, [r3, #32]
}
 8007714:	bf00      	nop
 8007716:	371c      	adds	r7, #28
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	40012c00 	.word	0x40012c00
 8007724:	40013400 	.word	0x40013400
 8007728:	40014000 	.word	0x40014000
 800772c:	40014400 	.word	0x40014400
 8007730:	40014800 	.word	0x40014800
 8007734:	40015000 	.word	0x40015000

08007738 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	f023 0210 	bic.w	r2, r3, #16
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800776a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4313      	orrs	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f023 0320 	bic.w	r3, r3, #32
 8007786:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	011b      	lsls	r3, r3, #4
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4313      	orrs	r3, r2
 8007792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a2c      	ldr	r2, [pc, #176]	@ (8007848 <TIM_OC2_SetConfig+0x110>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d007      	beq.n	80077ac <TIM_OC2_SetConfig+0x74>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a2b      	ldr	r2, [pc, #172]	@ (800784c <TIM_OC2_SetConfig+0x114>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d003      	beq.n	80077ac <TIM_OC2_SetConfig+0x74>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007850 <TIM_OC2_SetConfig+0x118>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d10d      	bne.n	80077c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	011b      	lsls	r3, r3, #4
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4313      	orrs	r3, r2
 80077be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a1f      	ldr	r2, [pc, #124]	@ (8007848 <TIM_OC2_SetConfig+0x110>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d013      	beq.n	80077f8 <TIM_OC2_SetConfig+0xc0>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a1e      	ldr	r2, [pc, #120]	@ (800784c <TIM_OC2_SetConfig+0x114>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00f      	beq.n	80077f8 <TIM_OC2_SetConfig+0xc0>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a1e      	ldr	r2, [pc, #120]	@ (8007854 <TIM_OC2_SetConfig+0x11c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00b      	beq.n	80077f8 <TIM_OC2_SetConfig+0xc0>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a1d      	ldr	r2, [pc, #116]	@ (8007858 <TIM_OC2_SetConfig+0x120>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d007      	beq.n	80077f8 <TIM_OC2_SetConfig+0xc0>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a1c      	ldr	r2, [pc, #112]	@ (800785c <TIM_OC2_SetConfig+0x124>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d003      	beq.n	80077f8 <TIM_OC2_SetConfig+0xc0>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a17      	ldr	r2, [pc, #92]	@ (8007850 <TIM_OC2_SetConfig+0x118>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d113      	bne.n	8007820 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4313      	orrs	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	621a      	str	r2, [r3, #32]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	40012c00 	.word	0x40012c00
 800784c:	40013400 	.word	0x40013400
 8007850:	40015000 	.word	0x40015000
 8007854:	40014000 	.word	0x40014000
 8007858:	40014400 	.word	0x40014400
 800785c:	40014800 	.word	0x40014800

08007860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800788e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0303 	bic.w	r3, r3, #3
 800789a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	021b      	lsls	r3, r3, #8
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a2b      	ldr	r2, [pc, #172]	@ (800796c <TIM_OC3_SetConfig+0x10c>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d007      	beq.n	80078d2 <TIM_OC3_SetConfig+0x72>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007970 <TIM_OC3_SetConfig+0x110>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d003      	beq.n	80078d2 <TIM_OC3_SetConfig+0x72>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a29      	ldr	r2, [pc, #164]	@ (8007974 <TIM_OC3_SetConfig+0x114>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d10d      	bne.n	80078ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	021b      	lsls	r3, r3, #8
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80078ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a1e      	ldr	r2, [pc, #120]	@ (800796c <TIM_OC3_SetConfig+0x10c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d013      	beq.n	800791e <TIM_OC3_SetConfig+0xbe>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007970 <TIM_OC3_SetConfig+0x110>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00f      	beq.n	800791e <TIM_OC3_SetConfig+0xbe>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a1d      	ldr	r2, [pc, #116]	@ (8007978 <TIM_OC3_SetConfig+0x118>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d00b      	beq.n	800791e <TIM_OC3_SetConfig+0xbe>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a1c      	ldr	r2, [pc, #112]	@ (800797c <TIM_OC3_SetConfig+0x11c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d007      	beq.n	800791e <TIM_OC3_SetConfig+0xbe>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a1b      	ldr	r2, [pc, #108]	@ (8007980 <TIM_OC3_SetConfig+0x120>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d003      	beq.n	800791e <TIM_OC3_SetConfig+0xbe>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a16      	ldr	r2, [pc, #88]	@ (8007974 <TIM_OC3_SetConfig+0x114>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d113      	bne.n	8007946 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800792c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	011b      	lsls	r3, r3, #4
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	4313      	orrs	r3, r2
 8007938:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	4313      	orrs	r3, r2
 8007944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	621a      	str	r2, [r3, #32]
}
 8007960:	bf00      	nop
 8007962:	371c      	adds	r7, #28
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	40012c00 	.word	0x40012c00
 8007970:	40013400 	.word	0x40013400
 8007974:	40015000 	.word	0x40015000
 8007978:	40014000 	.word	0x40014000
 800797c:	40014400 	.word	0x40014400
 8007980:	40014800 	.word	0x40014800

08007984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007984:	b480      	push	{r7}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	021b      	lsls	r3, r3, #8
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80079d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	031b      	lsls	r3, r3, #12
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	4313      	orrs	r3, r2
 80079de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a2c      	ldr	r2, [pc, #176]	@ (8007a94 <TIM_OC4_SetConfig+0x110>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d007      	beq.n	80079f8 <TIM_OC4_SetConfig+0x74>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a2b      	ldr	r2, [pc, #172]	@ (8007a98 <TIM_OC4_SetConfig+0x114>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d003      	beq.n	80079f8 <TIM_OC4_SetConfig+0x74>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a2a      	ldr	r2, [pc, #168]	@ (8007a9c <TIM_OC4_SetConfig+0x118>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d10d      	bne.n	8007a14 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	031b      	lsls	r3, r3, #12
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a1f      	ldr	r2, [pc, #124]	@ (8007a94 <TIM_OC4_SetConfig+0x110>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d013      	beq.n	8007a44 <TIM_OC4_SetConfig+0xc0>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007a98 <TIM_OC4_SetConfig+0x114>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d00f      	beq.n	8007a44 <TIM_OC4_SetConfig+0xc0>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a1e      	ldr	r2, [pc, #120]	@ (8007aa0 <TIM_OC4_SetConfig+0x11c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d00b      	beq.n	8007a44 <TIM_OC4_SetConfig+0xc0>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8007aa4 <TIM_OC4_SetConfig+0x120>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d007      	beq.n	8007a44 <TIM_OC4_SetConfig+0xc0>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a1c      	ldr	r2, [pc, #112]	@ (8007aa8 <TIM_OC4_SetConfig+0x124>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d003      	beq.n	8007a44 <TIM_OC4_SetConfig+0xc0>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a17      	ldr	r2, [pc, #92]	@ (8007a9c <TIM_OC4_SetConfig+0x118>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d113      	bne.n	8007a6c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a4a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a52:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	019b      	lsls	r3, r3, #6
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	019b      	lsls	r3, r3, #6
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	621a      	str	r2, [r3, #32]
}
 8007a86:	bf00      	nop
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	40012c00 	.word	0x40012c00
 8007a98:	40013400 	.word	0x40013400
 8007a9c:	40015000 	.word	0x40015000
 8007aa0:	40014000 	.word	0x40014000
 8007aa4:	40014400 	.word	0x40014400
 8007aa8:	40014800 	.word	0x40014800

08007aac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007af0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	041b      	lsls	r3, r3, #16
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a19      	ldr	r2, [pc, #100]	@ (8007b68 <TIM_OC5_SetConfig+0xbc>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d013      	beq.n	8007b2e <TIM_OC5_SetConfig+0x82>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a18      	ldr	r2, [pc, #96]	@ (8007b6c <TIM_OC5_SetConfig+0xc0>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d00f      	beq.n	8007b2e <TIM_OC5_SetConfig+0x82>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a17      	ldr	r2, [pc, #92]	@ (8007b70 <TIM_OC5_SetConfig+0xc4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00b      	beq.n	8007b2e <TIM_OC5_SetConfig+0x82>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a16      	ldr	r2, [pc, #88]	@ (8007b74 <TIM_OC5_SetConfig+0xc8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d007      	beq.n	8007b2e <TIM_OC5_SetConfig+0x82>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a15      	ldr	r2, [pc, #84]	@ (8007b78 <TIM_OC5_SetConfig+0xcc>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d003      	beq.n	8007b2e <TIM_OC5_SetConfig+0x82>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a14      	ldr	r2, [pc, #80]	@ (8007b7c <TIM_OC5_SetConfig+0xd0>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d109      	bne.n	8007b42 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	021b      	lsls	r3, r3, #8
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	621a      	str	r2, [r3, #32]
}
 8007b5c:	bf00      	nop
 8007b5e:	371c      	adds	r7, #28
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	40012c00 	.word	0x40012c00
 8007b6c:	40013400 	.word	0x40013400
 8007b70:	40014000 	.word	0x40014000
 8007b74:	40014400 	.word	0x40014400
 8007b78:	40014800 	.word	0x40014800
 8007b7c:	40015000 	.word	0x40015000

08007b80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007bae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	021b      	lsls	r3, r3, #8
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	051b      	lsls	r3, r3, #20
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8007c40 <TIM_OC6_SetConfig+0xc0>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d013      	beq.n	8007c04 <TIM_OC6_SetConfig+0x84>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a19      	ldr	r2, [pc, #100]	@ (8007c44 <TIM_OC6_SetConfig+0xc4>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d00f      	beq.n	8007c04 <TIM_OC6_SetConfig+0x84>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a18      	ldr	r2, [pc, #96]	@ (8007c48 <TIM_OC6_SetConfig+0xc8>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d00b      	beq.n	8007c04 <TIM_OC6_SetConfig+0x84>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a17      	ldr	r2, [pc, #92]	@ (8007c4c <TIM_OC6_SetConfig+0xcc>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d007      	beq.n	8007c04 <TIM_OC6_SetConfig+0x84>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a16      	ldr	r2, [pc, #88]	@ (8007c50 <TIM_OC6_SetConfig+0xd0>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d003      	beq.n	8007c04 <TIM_OC6_SetConfig+0x84>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a15      	ldr	r2, [pc, #84]	@ (8007c54 <TIM_OC6_SetConfig+0xd4>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d109      	bne.n	8007c18 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	029b      	lsls	r3, r3, #10
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	621a      	str	r2, [r3, #32]
}
 8007c32:	bf00      	nop
 8007c34:	371c      	adds	r7, #28
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	40012c00 	.word	0x40012c00
 8007c44:	40013400 	.word	0x40013400
 8007c48:	40014000 	.word	0x40014000
 8007c4c:	40014400 	.word	0x40014400
 8007c50:	40014800 	.word	0x40014800
 8007c54:	40015000 	.word	0x40015000

08007c58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c78:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c8a:	f023 0307 	bic.w	r3, r3, #7
 8007c8e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	4a52      	ldr	r2, [pc, #328]	@ (8007df0 <TIM_SlaveTimer_SetConfig+0x198>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	f000 809a 	beq.w	8007de2 <TIM_SlaveTimer_SetConfig+0x18a>
 8007cae:	4a50      	ldr	r2, [pc, #320]	@ (8007df0 <TIM_SlaveTimer_SetConfig+0x198>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	f200 8093 	bhi.w	8007ddc <TIM_SlaveTimer_SetConfig+0x184>
 8007cb6:	4a4f      	ldr	r2, [pc, #316]	@ (8007df4 <TIM_SlaveTimer_SetConfig+0x19c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	f000 8092 	beq.w	8007de2 <TIM_SlaveTimer_SetConfig+0x18a>
 8007cbe:	4a4d      	ldr	r2, [pc, #308]	@ (8007df4 <TIM_SlaveTimer_SetConfig+0x19c>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	f200 808b 	bhi.w	8007ddc <TIM_SlaveTimer_SetConfig+0x184>
 8007cc6:	4a4c      	ldr	r2, [pc, #304]	@ (8007df8 <TIM_SlaveTimer_SetConfig+0x1a0>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	f000 808a 	beq.w	8007de2 <TIM_SlaveTimer_SetConfig+0x18a>
 8007cce:	4a4a      	ldr	r2, [pc, #296]	@ (8007df8 <TIM_SlaveTimer_SetConfig+0x1a0>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	f200 8083 	bhi.w	8007ddc <TIM_SlaveTimer_SetConfig+0x184>
 8007cd6:	4a49      	ldr	r2, [pc, #292]	@ (8007dfc <TIM_SlaveTimer_SetConfig+0x1a4>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	f000 8082 	beq.w	8007de2 <TIM_SlaveTimer_SetConfig+0x18a>
 8007cde:	4a47      	ldr	r2, [pc, #284]	@ (8007dfc <TIM_SlaveTimer_SetConfig+0x1a4>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d87b      	bhi.n	8007ddc <TIM_SlaveTimer_SetConfig+0x184>
 8007ce4:	4a46      	ldr	r2, [pc, #280]	@ (8007e00 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d07b      	beq.n	8007de2 <TIM_SlaveTimer_SetConfig+0x18a>
 8007cea:	4a45      	ldr	r2, [pc, #276]	@ (8007e00 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d875      	bhi.n	8007ddc <TIM_SlaveTimer_SetConfig+0x184>
 8007cf0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007cf4:	d075      	beq.n	8007de2 <TIM_SlaveTimer_SetConfig+0x18a>
 8007cf6:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007cfa:	d86f      	bhi.n	8007ddc <TIM_SlaveTimer_SetConfig+0x184>
 8007cfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d00:	d06f      	beq.n	8007de2 <TIM_SlaveTimer_SetConfig+0x18a>
 8007d02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d06:	d869      	bhi.n	8007ddc <TIM_SlaveTimer_SetConfig+0x184>
 8007d08:	2b70      	cmp	r3, #112	@ 0x70
 8007d0a:	d01a      	beq.n	8007d42 <TIM_SlaveTimer_SetConfig+0xea>
 8007d0c:	2b70      	cmp	r3, #112	@ 0x70
 8007d0e:	d865      	bhi.n	8007ddc <TIM_SlaveTimer_SetConfig+0x184>
 8007d10:	2b60      	cmp	r3, #96	@ 0x60
 8007d12:	d059      	beq.n	8007dc8 <TIM_SlaveTimer_SetConfig+0x170>
 8007d14:	2b60      	cmp	r3, #96	@ 0x60
 8007d16:	d861      	bhi.n	8007ddc <TIM_SlaveTimer_SetConfig+0x184>
 8007d18:	2b50      	cmp	r3, #80	@ 0x50
 8007d1a:	d04b      	beq.n	8007db4 <TIM_SlaveTimer_SetConfig+0x15c>
 8007d1c:	2b50      	cmp	r3, #80	@ 0x50
 8007d1e:	d85d      	bhi.n	8007ddc <TIM_SlaveTimer_SetConfig+0x184>
 8007d20:	2b40      	cmp	r3, #64	@ 0x40
 8007d22:	d019      	beq.n	8007d58 <TIM_SlaveTimer_SetConfig+0x100>
 8007d24:	2b40      	cmp	r3, #64	@ 0x40
 8007d26:	d859      	bhi.n	8007ddc <TIM_SlaveTimer_SetConfig+0x184>
 8007d28:	2b30      	cmp	r3, #48	@ 0x30
 8007d2a:	d05a      	beq.n	8007de2 <TIM_SlaveTimer_SetConfig+0x18a>
 8007d2c:	2b30      	cmp	r3, #48	@ 0x30
 8007d2e:	d855      	bhi.n	8007ddc <TIM_SlaveTimer_SetConfig+0x184>
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	d056      	beq.n	8007de2 <TIM_SlaveTimer_SetConfig+0x18a>
 8007d34:	2b20      	cmp	r3, #32
 8007d36:	d851      	bhi.n	8007ddc <TIM_SlaveTimer_SetConfig+0x184>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d052      	beq.n	8007de2 <TIM_SlaveTimer_SetConfig+0x18a>
 8007d3c:	2b10      	cmp	r3, #16
 8007d3e:	d050      	beq.n	8007de2 <TIM_SlaveTimer_SetConfig+0x18a>
 8007d40:	e04c      	b.n	8007ddc <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007d52:	f000 f9fd 	bl	8008150 <TIM_ETR_SetConfig>
      break;
 8007d56:	e045      	b.n	8007de4 <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b05      	cmp	r3, #5
 8007d5e:	d004      	beq.n	8007d6a <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8007d64:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8007d68:	d101      	bne.n	8007d6e <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e03b      	b.n	8007de6 <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6a1a      	ldr	r2, [r3, #32]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0201 	bic.w	r2, r2, #1
 8007d84:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d94:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	621a      	str	r2, [r3, #32]
      break;
 8007db2:	e017      	b.n	8007de4 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	f000 f893 	bl	8007eec <TIM_TI1_ConfigInputStage>
      break;
 8007dc6:	e00d      	b.n	8007de4 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f000 f8f5 	bl	8007fc4 <TIM_TI2_ConfigInputStage>
      break;
 8007dda:	e003      	b.n	8007de4 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	75fb      	strb	r3, [r7, #23]
      break;
 8007de0:	e000      	b.n	8007de4 <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 8007de2:	bf00      	nop
  }

  return status;
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	00100070 	.word	0x00100070
 8007df4:	00100050 	.word	0x00100050
 8007df8:	00100040 	.word	0x00100040
 8007dfc:	00100030 	.word	0x00100030
 8007e00:	00100020 	.word	0x00100020

08007e04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	f023 0201 	bic.w	r2, r3, #1
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a28      	ldr	r2, [pc, #160]	@ (8007ed0 <TIM_TI1_SetConfig+0xcc>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d01b      	beq.n	8007e6a <TIM_TI1_SetConfig+0x66>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e38:	d017      	beq.n	8007e6a <TIM_TI1_SetConfig+0x66>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4a25      	ldr	r2, [pc, #148]	@ (8007ed4 <TIM_TI1_SetConfig+0xd0>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d013      	beq.n	8007e6a <TIM_TI1_SetConfig+0x66>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4a24      	ldr	r2, [pc, #144]	@ (8007ed8 <TIM_TI1_SetConfig+0xd4>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00f      	beq.n	8007e6a <TIM_TI1_SetConfig+0x66>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4a23      	ldr	r2, [pc, #140]	@ (8007edc <TIM_TI1_SetConfig+0xd8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d00b      	beq.n	8007e6a <TIM_TI1_SetConfig+0x66>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4a22      	ldr	r2, [pc, #136]	@ (8007ee0 <TIM_TI1_SetConfig+0xdc>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d007      	beq.n	8007e6a <TIM_TI1_SetConfig+0x66>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4a21      	ldr	r2, [pc, #132]	@ (8007ee4 <TIM_TI1_SetConfig+0xe0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d003      	beq.n	8007e6a <TIM_TI1_SetConfig+0x66>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4a20      	ldr	r2, [pc, #128]	@ (8007ee8 <TIM_TI1_SetConfig+0xe4>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d101      	bne.n	8007e6e <TIM_TI1_SetConfig+0x6a>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <TIM_TI1_SetConfig+0x6c>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d008      	beq.n	8007e86 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f023 0303 	bic.w	r3, r3, #3
 8007e7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	e003      	b.n	8007e8e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f043 0301 	orr.w	r3, r3, #1
 8007e8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	011b      	lsls	r3, r3, #4
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f023 030a 	bic.w	r3, r3, #10
 8007ea8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f003 030a 	and.w	r3, r3, #10
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	621a      	str	r2, [r3, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	371c      	adds	r7, #28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	40012c00 	.word	0x40012c00
 8007ed4:	40000400 	.word	0x40000400
 8007ed8:	40000800 	.word	0x40000800
 8007edc:	40000c00 	.word	0x40000c00
 8007ee0:	40013400 	.word	0x40013400
 8007ee4:	40014000 	.word	0x40014000
 8007ee8:	40015000 	.word	0x40015000

08007eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	f023 0201 	bic.w	r2, r3, #1
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	011b      	lsls	r3, r3, #4
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f023 030a 	bic.w	r3, r3, #10
 8007f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	621a      	str	r2, [r3, #32]
}
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b087      	sub	sp, #28
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	607a      	str	r2, [r7, #4]
 8007f56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	f023 0210 	bic.w	r2, r3, #16
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	021b      	lsls	r3, r3, #8
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	031b      	lsls	r3, r3, #12
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	621a      	str	r2, [r3, #32]
}
 8007fb8:	bf00      	nop
 8007fba:	371c      	adds	r7, #28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	f023 0210 	bic.w	r2, r3, #16
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	031b      	lsls	r3, r3, #12
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008000:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	011b      	lsls	r3, r3, #4
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	4313      	orrs	r3, r2
 800800a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	621a      	str	r2, [r3, #32]
}
 8008018:	bf00      	nop
 800801a:	371c      	adds	r7, #28
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f023 0303 	bic.w	r3, r3, #3
 8008050:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4313      	orrs	r3, r2
 8008058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008060:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	011b      	lsls	r3, r3, #4
 8008066:	b2db      	uxtb	r3, r3
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4313      	orrs	r3, r2
 800806c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008074:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	021b      	lsls	r3, r3, #8
 800807a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	4313      	orrs	r3, r2
 8008082:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	621a      	str	r2, [r3, #32]
}
 8008090:	bf00      	nop
 8008092:	371c      	adds	r7, #28
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	69db      	ldr	r3, [r3, #28]
 80080c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	021b      	lsls	r3, r3, #8
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80080da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	031b      	lsls	r3, r3, #12
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80080ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	031b      	lsls	r3, r3, #12
 80080f4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	621a      	str	r2, [r3, #32]
}
 800810a:	bf00      	nop
 800810c:	371c      	adds	r7, #28
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008116:	b480      	push	{r7}
 8008118:	b085      	sub	sp, #20
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800812c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4313      	orrs	r3, r2
 8008138:	f043 0307 	orr.w	r3, r3, #7
 800813c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	609a      	str	r2, [r3, #8]
}
 8008144:	bf00      	nop
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
 800815c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800816a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	021a      	lsls	r2, r3, #8
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	431a      	orrs	r2, r3
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	4313      	orrs	r3, r2
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	4313      	orrs	r3, r2
 800817c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	609a      	str	r2, [r3, #8]
}
 8008184:	bf00      	nop
 8008186:	371c      	adds	r7, #28
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08a      	sub	sp, #40	@ 0x28
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e0a0      	b.n	80082e6 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d106      	bne.n	80081be <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f898 	bl	80082ee <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2202      	movs	r2, #2
 80081c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3304      	adds	r3, #4
 80081ce:	4619      	mov	r1, r3
 80081d0:	4610      	mov	r0, r2
 80081d2:	f7ff f963 	bl	800749c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6818      	ldr	r0, [r3, #0]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	6819      	ldr	r1, [r3, #0]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	2203      	movs	r2, #3
 80081e4:	f7ff fe0e 	bl	8007e04 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 020c 	bic.w	r2, r2, #12
 80081f6:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6999      	ldr	r1, [r3, #24]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008218:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	6812      	ldr	r2, [r2, #0]
 8008224:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008228:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800822c:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689a      	ldr	r2, [r3, #8]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800823c:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	6812      	ldr	r2, [r2, #0]
 8008248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800824c:	f023 0307 	bic.w	r3, r3, #7
 8008250:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f042 0204 	orr.w	r2, r2, #4
 8008260:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8008262:	2300      	movs	r3, #0
 8008264:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008266:	2300      	movs	r3, #0
 8008268:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800826a:	2370      	movs	r3, #112	@ 0x70
 800826c:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800826e:	2300      	movs	r3, #0
 8008270:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008272:	2300      	movs	r3, #0
 8008274:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008276:	2300      	movs	r3, #0
 8008278:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f107 020c 	add.w	r2, r7, #12
 8008288:	4611      	mov	r1, r2
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff fa54 	bl	8007738 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	6812      	ldr	r2, [r2, #0]
 800829a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800829e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a2:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80082b2:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3728      	adds	r7, #40	@ 0x28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
	...

08008304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008314:	2b01      	cmp	r3, #1
 8008316:	d101      	bne.n	800831c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008318:	2302      	movs	r3, #2
 800831a:	e074      	b.n	8008406 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a34      	ldr	r2, [pc, #208]	@ (8008414 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d009      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a33      	ldr	r2, [pc, #204]	@ (8008418 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d004      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a31      	ldr	r2, [pc, #196]	@ (800841c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d108      	bne.n	800836c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008360:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	4313      	orrs	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a21      	ldr	r2, [pc, #132]	@ (8008414 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d022      	beq.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800839c:	d01d      	beq.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008420 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d018      	beq.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008424 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d013      	beq.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008428 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00e      	beq.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a15      	ldr	r2, [pc, #84]	@ (8008418 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d009      	beq.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a18      	ldr	r2, [pc, #96]	@ (800842c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d004      	beq.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a11      	ldr	r2, [pc, #68]	@ (800841c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d10c      	bne.n	80083f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40012c00 	.word	0x40012c00
 8008418:	40013400 	.word	0x40013400
 800841c:	40015000 	.word	0x40015000
 8008420:	40000400 	.word	0x40000400
 8008424:	40000800 	.word	0x40000800
 8008428:	40000c00 	.word	0x40000c00
 800842c:	40014000 	.word	0x40014000

08008430 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008444:	2b01      	cmp	r3, #1
 8008446:	d101      	bne.n	800844c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008448:	2302      	movs	r3, #2
 800844a:	e078      	b.n	800853e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	4313      	orrs	r3, r2
 8008460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	4313      	orrs	r3, r2
 800846e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	4313      	orrs	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4313      	orrs	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	4313      	orrs	r3, r2
 8008498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	041b      	lsls	r3, r3, #16
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a1c      	ldr	r2, [pc, #112]	@ (800854c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d009      	beq.n	80084f2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008550 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d004      	beq.n	80084f2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a19      	ldr	r2, [pc, #100]	@ (8008554 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d11c      	bne.n	800852c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084fc:	051b      	lsls	r3, r3, #20
 80084fe:	4313      	orrs	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	4313      	orrs	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008528:	4313      	orrs	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	40012c00 	.word	0x40012c00
 8008550:	40013400 	.word	0x40013400
 8008554:	40015000 	.word	0x40015000

08008558 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8008558:	b480      	push	{r7}
 800855a:	b08b      	sub	sp, #44	@ 0x2c
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008570:	2b01      	cmp	r3, #1
 8008572:	d101      	bne.n	8008578 <HAL_TIMEx_ConfigBreakInput+0x20>
 8008574:	2302      	movs	r3, #2
 8008576:	e10b      	b.n	8008790 <HAL_TIMEx_ConfigBreakInput+0x238>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b80      	cmp	r3, #128	@ 0x80
 8008586:	f000 8096 	beq.w	80086b6 <HAL_TIMEx_ConfigBreakInput+0x15e>
 800858a:	2b80      	cmp	r3, #128	@ 0x80
 800858c:	f200 809c 	bhi.w	80086c8 <HAL_TIMEx_ConfigBreakInput+0x170>
 8008590:	2b20      	cmp	r3, #32
 8008592:	d849      	bhi.n	8008628 <HAL_TIMEx_ConfigBreakInput+0xd0>
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 8097 	beq.w	80086c8 <HAL_TIMEx_ConfigBreakInput+0x170>
 800859a:	3b01      	subs	r3, #1
 800859c:	2b1f      	cmp	r3, #31
 800859e:	f200 8093 	bhi.w	80086c8 <HAL_TIMEx_ConfigBreakInput+0x170>
 80085a2:	a201      	add	r2, pc, #4	@ (adr r2, 80085a8 <HAL_TIMEx_ConfigBreakInput+0x50>)
 80085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a8:	0800862f 	.word	0x0800862f
 80085ac:	08008643 	.word	0x08008643
 80085b0:	080086c9 	.word	0x080086c9
 80085b4:	08008657 	.word	0x08008657
 80085b8:	080086c9 	.word	0x080086c9
 80085bc:	080086c9 	.word	0x080086c9
 80085c0:	080086c9 	.word	0x080086c9
 80085c4:	0800866b 	.word	0x0800866b
 80085c8:	080086c9 	.word	0x080086c9
 80085cc:	080086c9 	.word	0x080086c9
 80085d0:	080086c9 	.word	0x080086c9
 80085d4:	080086c9 	.word	0x080086c9
 80085d8:	080086c9 	.word	0x080086c9
 80085dc:	080086c9 	.word	0x080086c9
 80085e0:	080086c9 	.word	0x080086c9
 80085e4:	0800867f 	.word	0x0800867f
 80085e8:	080086c9 	.word	0x080086c9
 80085ec:	080086c9 	.word	0x080086c9
 80085f0:	080086c9 	.word	0x080086c9
 80085f4:	080086c9 	.word	0x080086c9
 80085f8:	080086c9 	.word	0x080086c9
 80085fc:	080086c9 	.word	0x080086c9
 8008600:	080086c9 	.word	0x080086c9
 8008604:	080086c9 	.word	0x080086c9
 8008608:	080086c9 	.word	0x080086c9
 800860c:	080086c9 	.word	0x080086c9
 8008610:	080086c9 	.word	0x080086c9
 8008614:	080086c9 	.word	0x080086c9
 8008618:	080086c9 	.word	0x080086c9
 800861c:	080086c9 	.word	0x080086c9
 8008620:	080086c9 	.word	0x080086c9
 8008624:	08008693 	.word	0x08008693
 8008628:	2b40      	cmp	r3, #64	@ 0x40
 800862a:	d03b      	beq.n	80086a4 <HAL_TIMEx_ConfigBreakInput+0x14c>
 800862c:	e04c      	b.n	80086c8 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800862e:	2301      	movs	r3, #1
 8008630:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008632:	2300      	movs	r3, #0
 8008634:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008636:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800863a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800863c:	2309      	movs	r3, #9
 800863e:	617b      	str	r3, [r7, #20]
      break;
 8008640:	e04b      	b.n	80086da <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008642:	2302      	movs	r3, #2
 8008644:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008646:	2301      	movs	r3, #1
 8008648:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800864a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800864e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008650:	230a      	movs	r3, #10
 8008652:	617b      	str	r3, [r7, #20]
      break;
 8008654:	e041      	b.n	80086da <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP2)
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008656:	2304      	movs	r3, #4
 8008658:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800865a:	2302      	movs	r3, #2
 800865c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800865e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008662:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008664:	230b      	movs	r3, #11
 8008666:	617b      	str	r3, [r7, #20]
      break;
 8008668:	e037      	b.n	80086da <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP2 */
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800866a:	2308      	movs	r3, #8
 800866c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800866e:	2303      	movs	r3, #3
 8008670:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8008672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008676:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8008678:	230c      	movs	r3, #12
 800867a:	617b      	str	r3, [r7, #20]
      break;
 800867c:	e02d      	b.n	80086da <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP4)
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800867e:	2310      	movs	r3, #16
 8008680:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8008682:	2304      	movs	r3, #4
 8008684:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8008686:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800868a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800868c:	230d      	movs	r3, #13
 800868e:	617b      	str	r3, [r7, #20]
      break;
 8008690:	e023      	b.n	80086da <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP4 */
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 8008692:	2320      	movs	r3, #32
 8008694:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 8008696:	2305      	movs	r3, #5
 8008698:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	617b      	str	r3, [r7, #20]
      break;
 80086a2:	e01a      	b.n	80086da <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 80086a4:	2340      	movs	r3, #64	@ 0x40
 80086a6:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 80086a8:	2306      	movs	r3, #6
 80086aa:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	617b      	str	r3, [r7, #20]
      break;
 80086b4:	e011      	b.n	80086da <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 80086b6:	2380      	movs	r3, #128	@ 0x80
 80086b8:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 80086ba:	2307      	movs	r3, #7
 80086bc:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	617b      	str	r3, [r7, #20]
      break;
 80086c6:	e008      	b.n	80086da <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	617b      	str	r3, [r7, #20]
      break;
 80086d8:	bf00      	nop
    }
  }

  switch (BreakInput)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d003      	beq.n	80086e8 <HAL_TIMEx_ConfigBreakInput+0x190>
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d025      	beq.n	8008732 <HAL_TIMEx_ConfigBreakInput+0x1da>
 80086e6:	e049      	b.n	800877c <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086ee:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	43db      	mvns	r3, r3
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	4013      	ands	r3, r2
 80086f8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	409a      	lsls	r2, r3
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	4013      	ands	r3, r2
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	43db      	mvns	r3, r3
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	4013      	ands	r3, r2
 8008714:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689a      	ldr	r2, [r3, #8]
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	409a      	lsls	r2, r3
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	4013      	ands	r3, r2
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	4313      	orrs	r3, r2
 8008726:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8008730:	e028      	b.n	8008784 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008738:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	43db      	mvns	r3, r3
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	4013      	ands	r3, r2
 8008742:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	409a      	lsls	r2, r3
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	4013      	ands	r3, r2
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	4313      	orrs	r3, r2
 8008754:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	43db      	mvns	r3, r3
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	4013      	ands	r3, r2
 800875e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	689a      	ldr	r2, [r3, #8]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	409a      	lsls	r2, r3
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	4013      	ands	r3, r2
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800877a:	e003      	b.n	8008784 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008782:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800878c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008790:	4618      	mov	r0, r3
 8008792:	372c      	adds	r7, #44	@ 0x2c
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e042      	b.n	8008834 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d106      	bne.n	80087c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7fa f857 	bl	8002874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2224      	movs	r2, #36	@ 0x24
 80087ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0201 	bic.w	r2, r2, #1
 80087dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fbb2 	bl	8008f50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f8b3 	bl	8008958 <UART_SetConfig>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d101      	bne.n	80087fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e01b      	b.n	8008834 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800880a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800881a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fc31 	bl	8009094 <UART_CheckIdleState>
 8008832:	4603      	mov	r3, r0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08a      	sub	sp, #40	@ 0x28
 8008840:	af02      	add	r7, sp, #8
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	603b      	str	r3, [r7, #0]
 8008848:	4613      	mov	r3, r2
 800884a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008852:	2b20      	cmp	r3, #32
 8008854:	d17b      	bne.n	800894e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <HAL_UART_Transmit+0x26>
 800885c:	88fb      	ldrh	r3, [r7, #6]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e074      	b.n	8008950 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2221      	movs	r2, #33	@ 0x21
 8008872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008876:	f7fa f98f 	bl	8002b98 <HAL_GetTick>
 800887a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	88fa      	ldrh	r2, [r7, #6]
 8008880:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	88fa      	ldrh	r2, [r7, #6]
 8008888:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008894:	d108      	bne.n	80088a8 <HAL_UART_Transmit+0x6c>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d104      	bne.n	80088a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800889e:	2300      	movs	r3, #0
 80088a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	61bb      	str	r3, [r7, #24]
 80088a6:	e003      	b.n	80088b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088ac:	2300      	movs	r3, #0
 80088ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088b0:	e030      	b.n	8008914 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2200      	movs	r2, #0
 80088ba:	2180      	movs	r1, #128	@ 0x80
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 fc93 	bl	80091e8 <UART_WaitOnFlagUntilTimeout>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d005      	beq.n	80088d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2220      	movs	r2, #32
 80088cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e03d      	b.n	8008950 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10b      	bne.n	80088f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	3302      	adds	r3, #2
 80088ee:	61bb      	str	r3, [r7, #24]
 80088f0:	e007      	b.n	8008902 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	781a      	ldrb	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	3301      	adds	r3, #1
 8008900:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008908:	b29b      	uxth	r3, r3
 800890a:	3b01      	subs	r3, #1
 800890c:	b29a      	uxth	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800891a:	b29b      	uxth	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1c8      	bne.n	80088b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2200      	movs	r2, #0
 8008928:	2140      	movs	r1, #64	@ 0x40
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 fc5c 	bl	80091e8 <UART_WaitOnFlagUntilTimeout>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d005      	beq.n	8008942 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2220      	movs	r2, #32
 800893a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e006      	b.n	8008950 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2220      	movs	r2, #32
 8008946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	e000      	b.n	8008950 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800894e:	2302      	movs	r3, #2
  }
}
 8008950:	4618      	mov	r0, r3
 8008952:	3720      	adds	r7, #32
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800895c:	b08c      	sub	sp, #48	@ 0x30
 800895e:	af00      	add	r7, sp, #0
 8008960:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	431a      	orrs	r2, r3
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	431a      	orrs	r2, r3
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	4313      	orrs	r3, r2
 800897e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	4baa      	ldr	r3, [pc, #680]	@ (8008c30 <UART_SetConfig+0x2d8>)
 8008988:	4013      	ands	r3, r2
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	6812      	ldr	r2, [r2, #0]
 800898e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008990:	430b      	orrs	r3, r1
 8008992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a9f      	ldr	r2, [pc, #636]	@ (8008c34 <UART_SetConfig+0x2dc>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d004      	beq.n	80089c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089c0:	4313      	orrs	r3, r2
 80089c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80089ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	6812      	ldr	r2, [r2, #0]
 80089d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089d8:	430b      	orrs	r3, r1
 80089da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e2:	f023 010f 	bic.w	r1, r3, #15
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a90      	ldr	r2, [pc, #576]	@ (8008c38 <UART_SetConfig+0x2e0>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d125      	bne.n	8008a48 <UART_SetConfig+0xf0>
 80089fc:	4b8f      	ldr	r3, [pc, #572]	@ (8008c3c <UART_SetConfig+0x2e4>)
 80089fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a02:	f003 0303 	and.w	r3, r3, #3
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d81a      	bhi.n	8008a40 <UART_SetConfig+0xe8>
 8008a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a10 <UART_SetConfig+0xb8>)
 8008a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a10:	08008a21 	.word	0x08008a21
 8008a14:	08008a31 	.word	0x08008a31
 8008a18:	08008a29 	.word	0x08008a29
 8008a1c:	08008a39 	.word	0x08008a39
 8008a20:	2301      	movs	r3, #1
 8008a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a26:	e116      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008a28:	2302      	movs	r3, #2
 8008a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a2e:	e112      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008a30:	2304      	movs	r3, #4
 8008a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a36:	e10e      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008a38:	2308      	movs	r3, #8
 8008a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a3e:	e10a      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008a40:	2310      	movs	r3, #16
 8008a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a46:	e106      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a7c      	ldr	r2, [pc, #496]	@ (8008c40 <UART_SetConfig+0x2e8>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d138      	bne.n	8008ac4 <UART_SetConfig+0x16c>
 8008a52:	4b7a      	ldr	r3, [pc, #488]	@ (8008c3c <UART_SetConfig+0x2e4>)
 8008a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a58:	f003 030c 	and.w	r3, r3, #12
 8008a5c:	2b0c      	cmp	r3, #12
 8008a5e:	d82d      	bhi.n	8008abc <UART_SetConfig+0x164>
 8008a60:	a201      	add	r2, pc, #4	@ (adr r2, 8008a68 <UART_SetConfig+0x110>)
 8008a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a66:	bf00      	nop
 8008a68:	08008a9d 	.word	0x08008a9d
 8008a6c:	08008abd 	.word	0x08008abd
 8008a70:	08008abd 	.word	0x08008abd
 8008a74:	08008abd 	.word	0x08008abd
 8008a78:	08008aad 	.word	0x08008aad
 8008a7c:	08008abd 	.word	0x08008abd
 8008a80:	08008abd 	.word	0x08008abd
 8008a84:	08008abd 	.word	0x08008abd
 8008a88:	08008aa5 	.word	0x08008aa5
 8008a8c:	08008abd 	.word	0x08008abd
 8008a90:	08008abd 	.word	0x08008abd
 8008a94:	08008abd 	.word	0x08008abd
 8008a98:	08008ab5 	.word	0x08008ab5
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aa2:	e0d8      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aaa:	e0d4      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008aac:	2304      	movs	r3, #4
 8008aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ab2:	e0d0      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008ab4:	2308      	movs	r3, #8
 8008ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aba:	e0cc      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008abc:	2310      	movs	r3, #16
 8008abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ac2:	e0c8      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8008c44 <UART_SetConfig+0x2ec>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d125      	bne.n	8008b1a <UART_SetConfig+0x1c2>
 8008ace:	4b5b      	ldr	r3, [pc, #364]	@ (8008c3c <UART_SetConfig+0x2e4>)
 8008ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ad4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008ad8:	2b30      	cmp	r3, #48	@ 0x30
 8008ada:	d016      	beq.n	8008b0a <UART_SetConfig+0x1b2>
 8008adc:	2b30      	cmp	r3, #48	@ 0x30
 8008ade:	d818      	bhi.n	8008b12 <UART_SetConfig+0x1ba>
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	d00a      	beq.n	8008afa <UART_SetConfig+0x1a2>
 8008ae4:	2b20      	cmp	r3, #32
 8008ae6:	d814      	bhi.n	8008b12 <UART_SetConfig+0x1ba>
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <UART_SetConfig+0x19a>
 8008aec:	2b10      	cmp	r3, #16
 8008aee:	d008      	beq.n	8008b02 <UART_SetConfig+0x1aa>
 8008af0:	e00f      	b.n	8008b12 <UART_SetConfig+0x1ba>
 8008af2:	2300      	movs	r3, #0
 8008af4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008af8:	e0ad      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008afa:	2302      	movs	r3, #2
 8008afc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b00:	e0a9      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008b02:	2304      	movs	r3, #4
 8008b04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b08:	e0a5      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008b0a:	2308      	movs	r3, #8
 8008b0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b10:	e0a1      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008b12:	2310      	movs	r3, #16
 8008b14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b18:	e09d      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8008c48 <UART_SetConfig+0x2f0>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d125      	bne.n	8008b70 <UART_SetConfig+0x218>
 8008b24:	4b45      	ldr	r3, [pc, #276]	@ (8008c3c <UART_SetConfig+0x2e4>)
 8008b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008b2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b30:	d016      	beq.n	8008b60 <UART_SetConfig+0x208>
 8008b32:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b34:	d818      	bhi.n	8008b68 <UART_SetConfig+0x210>
 8008b36:	2b80      	cmp	r3, #128	@ 0x80
 8008b38:	d00a      	beq.n	8008b50 <UART_SetConfig+0x1f8>
 8008b3a:	2b80      	cmp	r3, #128	@ 0x80
 8008b3c:	d814      	bhi.n	8008b68 <UART_SetConfig+0x210>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d002      	beq.n	8008b48 <UART_SetConfig+0x1f0>
 8008b42:	2b40      	cmp	r3, #64	@ 0x40
 8008b44:	d008      	beq.n	8008b58 <UART_SetConfig+0x200>
 8008b46:	e00f      	b.n	8008b68 <UART_SetConfig+0x210>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b4e:	e082      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008b50:	2302      	movs	r3, #2
 8008b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b56:	e07e      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008b58:	2304      	movs	r3, #4
 8008b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b5e:	e07a      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008b60:	2308      	movs	r3, #8
 8008b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b66:	e076      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008b68:	2310      	movs	r3, #16
 8008b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b6e:	e072      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a35      	ldr	r2, [pc, #212]	@ (8008c4c <UART_SetConfig+0x2f4>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d12a      	bne.n	8008bd0 <UART_SetConfig+0x278>
 8008b7a:	4b30      	ldr	r3, [pc, #192]	@ (8008c3c <UART_SetConfig+0x2e4>)
 8008b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b88:	d01a      	beq.n	8008bc0 <UART_SetConfig+0x268>
 8008b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b8e:	d81b      	bhi.n	8008bc8 <UART_SetConfig+0x270>
 8008b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b94:	d00c      	beq.n	8008bb0 <UART_SetConfig+0x258>
 8008b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b9a:	d815      	bhi.n	8008bc8 <UART_SetConfig+0x270>
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d003      	beq.n	8008ba8 <UART_SetConfig+0x250>
 8008ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ba4:	d008      	beq.n	8008bb8 <UART_SetConfig+0x260>
 8008ba6:	e00f      	b.n	8008bc8 <UART_SetConfig+0x270>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bae:	e052      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bb6:	e04e      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008bb8:	2304      	movs	r3, #4
 8008bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bbe:	e04a      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008bc0:	2308      	movs	r3, #8
 8008bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bc6:	e046      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008bc8:	2310      	movs	r3, #16
 8008bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bce:	e042      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a17      	ldr	r2, [pc, #92]	@ (8008c34 <UART_SetConfig+0x2dc>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d13a      	bne.n	8008c50 <UART_SetConfig+0x2f8>
 8008bda:	4b18      	ldr	r3, [pc, #96]	@ (8008c3c <UART_SetConfig+0x2e4>)
 8008bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008be0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008be4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008be8:	d01a      	beq.n	8008c20 <UART_SetConfig+0x2c8>
 8008bea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008bee:	d81b      	bhi.n	8008c28 <UART_SetConfig+0x2d0>
 8008bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bf4:	d00c      	beq.n	8008c10 <UART_SetConfig+0x2b8>
 8008bf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bfa:	d815      	bhi.n	8008c28 <UART_SetConfig+0x2d0>
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d003      	beq.n	8008c08 <UART_SetConfig+0x2b0>
 8008c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c04:	d008      	beq.n	8008c18 <UART_SetConfig+0x2c0>
 8008c06:	e00f      	b.n	8008c28 <UART_SetConfig+0x2d0>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c0e:	e022      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008c10:	2302      	movs	r3, #2
 8008c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c16:	e01e      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008c18:	2304      	movs	r3, #4
 8008c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c1e:	e01a      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008c20:	2308      	movs	r3, #8
 8008c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c26:	e016      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008c28:	2310      	movs	r3, #16
 8008c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c2e:	e012      	b.n	8008c56 <UART_SetConfig+0x2fe>
 8008c30:	cfff69f3 	.word	0xcfff69f3
 8008c34:	40008000 	.word	0x40008000
 8008c38:	40013800 	.word	0x40013800
 8008c3c:	40021000 	.word	0x40021000
 8008c40:	40004400 	.word	0x40004400
 8008c44:	40004800 	.word	0x40004800
 8008c48:	40004c00 	.word	0x40004c00
 8008c4c:	40005000 	.word	0x40005000
 8008c50:	2310      	movs	r3, #16
 8008c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4aae      	ldr	r2, [pc, #696]	@ (8008f14 <UART_SetConfig+0x5bc>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	f040 8097 	bne.w	8008d90 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c66:	2b08      	cmp	r3, #8
 8008c68:	d823      	bhi.n	8008cb2 <UART_SetConfig+0x35a>
 8008c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c70 <UART_SetConfig+0x318>)
 8008c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c70:	08008c95 	.word	0x08008c95
 8008c74:	08008cb3 	.word	0x08008cb3
 8008c78:	08008c9d 	.word	0x08008c9d
 8008c7c:	08008cb3 	.word	0x08008cb3
 8008c80:	08008ca3 	.word	0x08008ca3
 8008c84:	08008cb3 	.word	0x08008cb3
 8008c88:	08008cb3 	.word	0x08008cb3
 8008c8c:	08008cb3 	.word	0x08008cb3
 8008c90:	08008cab 	.word	0x08008cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c94:	f7fd fafe 	bl	8006294 <HAL_RCC_GetPCLK1Freq>
 8008c98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c9a:	e010      	b.n	8008cbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c9c:	4b9e      	ldr	r3, [pc, #632]	@ (8008f18 <UART_SetConfig+0x5c0>)
 8008c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ca0:	e00d      	b.n	8008cbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ca2:	f7fd fa89 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 8008ca6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ca8:	e009      	b.n	8008cbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008cb0:	e005      	b.n	8008cbe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008cbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 8130 	beq.w	8008f26 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cca:	4a94      	ldr	r2, [pc, #592]	@ (8008f1c <UART_SetConfig+0x5c4>)
 8008ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cd8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	4413      	add	r3, r2
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d305      	bcc.n	8008cf6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d903      	bls.n	8008cfe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008cfc:	e113      	b.n	8008f26 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d00:	2200      	movs	r2, #0
 8008d02:	60bb      	str	r3, [r7, #8]
 8008d04:	60fa      	str	r2, [r7, #12]
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d0a:	4a84      	ldr	r2, [pc, #528]	@ (8008f1c <UART_SetConfig+0x5c4>)
 8008d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	2200      	movs	r2, #0
 8008d14:	603b      	str	r3, [r7, #0]
 8008d16:	607a      	str	r2, [r7, #4]
 8008d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d20:	f7f7 fad6 	bl	80002d0 <__aeabi_uldivmod>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4610      	mov	r0, r2
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	f04f 0200 	mov.w	r2, #0
 8008d30:	f04f 0300 	mov.w	r3, #0
 8008d34:	020b      	lsls	r3, r1, #8
 8008d36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d3a:	0202      	lsls	r2, r0, #8
 8008d3c:	6979      	ldr	r1, [r7, #20]
 8008d3e:	6849      	ldr	r1, [r1, #4]
 8008d40:	0849      	lsrs	r1, r1, #1
 8008d42:	2000      	movs	r0, #0
 8008d44:	460c      	mov	r4, r1
 8008d46:	4605      	mov	r5, r0
 8008d48:	eb12 0804 	adds.w	r8, r2, r4
 8008d4c:	eb43 0905 	adc.w	r9, r3, r5
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	469a      	mov	sl, r3
 8008d58:	4693      	mov	fp, r2
 8008d5a:	4652      	mov	r2, sl
 8008d5c:	465b      	mov	r3, fp
 8008d5e:	4640      	mov	r0, r8
 8008d60:	4649      	mov	r1, r9
 8008d62:	f7f7 fab5 	bl	80002d0 <__aeabi_uldivmod>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d74:	d308      	bcc.n	8008d88 <UART_SetConfig+0x430>
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d7c:	d204      	bcs.n	8008d88 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6a3a      	ldr	r2, [r7, #32]
 8008d84:	60da      	str	r2, [r3, #12]
 8008d86:	e0ce      	b.n	8008f26 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008d8e:	e0ca      	b.n	8008f26 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d98:	d166      	bne.n	8008e68 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008d9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d9e:	2b08      	cmp	r3, #8
 8008da0:	d827      	bhi.n	8008df2 <UART_SetConfig+0x49a>
 8008da2:	a201      	add	r2, pc, #4	@ (adr r2, 8008da8 <UART_SetConfig+0x450>)
 8008da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da8:	08008dcd 	.word	0x08008dcd
 8008dac:	08008dd5 	.word	0x08008dd5
 8008db0:	08008ddd 	.word	0x08008ddd
 8008db4:	08008df3 	.word	0x08008df3
 8008db8:	08008de3 	.word	0x08008de3
 8008dbc:	08008df3 	.word	0x08008df3
 8008dc0:	08008df3 	.word	0x08008df3
 8008dc4:	08008df3 	.word	0x08008df3
 8008dc8:	08008deb 	.word	0x08008deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dcc:	f7fd fa62 	bl	8006294 <HAL_RCC_GetPCLK1Freq>
 8008dd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008dd2:	e014      	b.n	8008dfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dd4:	f7fd fa74 	bl	80062c0 <HAL_RCC_GetPCLK2Freq>
 8008dd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008dda:	e010      	b.n	8008dfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ddc:	4b4e      	ldr	r3, [pc, #312]	@ (8008f18 <UART_SetConfig+0x5c0>)
 8008dde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008de0:	e00d      	b.n	8008dfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008de2:	f7fd f9e9 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 8008de6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008de8:	e009      	b.n	8008dfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008df0:	e005      	b.n	8008dfe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008dfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 8090 	beq.w	8008f26 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e0a:	4a44      	ldr	r2, [pc, #272]	@ (8008f1c <UART_SetConfig+0x5c4>)
 8008e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e10:	461a      	mov	r2, r3
 8008e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e18:	005a      	lsls	r2, r3, #1
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	085b      	lsrs	r3, r3, #1
 8008e20:	441a      	add	r2, r3
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	2b0f      	cmp	r3, #15
 8008e30:	d916      	bls.n	8008e60 <UART_SetConfig+0x508>
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e38:	d212      	bcs.n	8008e60 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	f023 030f 	bic.w	r3, r3, #15
 8008e42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e44:	6a3b      	ldr	r3, [r7, #32]
 8008e46:	085b      	lsrs	r3, r3, #1
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	f003 0307 	and.w	r3, r3, #7
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	8bfb      	ldrh	r3, [r7, #30]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	8bfa      	ldrh	r2, [r7, #30]
 8008e5c:	60da      	str	r2, [r3, #12]
 8008e5e:	e062      	b.n	8008f26 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e66:	e05e      	b.n	8008f26 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e6c:	2b08      	cmp	r3, #8
 8008e6e:	d828      	bhi.n	8008ec2 <UART_SetConfig+0x56a>
 8008e70:	a201      	add	r2, pc, #4	@ (adr r2, 8008e78 <UART_SetConfig+0x520>)
 8008e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e76:	bf00      	nop
 8008e78:	08008e9d 	.word	0x08008e9d
 8008e7c:	08008ea5 	.word	0x08008ea5
 8008e80:	08008ead 	.word	0x08008ead
 8008e84:	08008ec3 	.word	0x08008ec3
 8008e88:	08008eb3 	.word	0x08008eb3
 8008e8c:	08008ec3 	.word	0x08008ec3
 8008e90:	08008ec3 	.word	0x08008ec3
 8008e94:	08008ec3 	.word	0x08008ec3
 8008e98:	08008ebb 	.word	0x08008ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e9c:	f7fd f9fa 	bl	8006294 <HAL_RCC_GetPCLK1Freq>
 8008ea0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ea2:	e014      	b.n	8008ece <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ea4:	f7fd fa0c 	bl	80062c0 <HAL_RCC_GetPCLK2Freq>
 8008ea8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008eaa:	e010      	b.n	8008ece <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008eac:	4b1a      	ldr	r3, [pc, #104]	@ (8008f18 <UART_SetConfig+0x5c0>)
 8008eae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008eb0:	e00d      	b.n	8008ece <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eb2:	f7fd f981 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 8008eb6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008eb8:	e009      	b.n	8008ece <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ebe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ec0:	e005      	b.n	8008ece <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ecc:	bf00      	nop
    }

    if (pclk != 0U)
 8008ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d028      	beq.n	8008f26 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed8:	4a10      	ldr	r2, [pc, #64]	@ (8008f1c <UART_SetConfig+0x5c4>)
 8008eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	085b      	lsrs	r3, r3, #1
 8008eec:	441a      	add	r2, r3
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	2b0f      	cmp	r3, #15
 8008efc:	d910      	bls.n	8008f20 <UART_SetConfig+0x5c8>
 8008efe:	6a3b      	ldr	r3, [r7, #32]
 8008f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f04:	d20c      	bcs.n	8008f20 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	60da      	str	r2, [r3, #12]
 8008f10:	e009      	b.n	8008f26 <UART_SetConfig+0x5ce>
 8008f12:	bf00      	nop
 8008f14:	40008000 	.word	0x40008000
 8008f18:	00f42400 	.word	0x00f42400
 8008f1c:	08009f0c 	.word	0x08009f0c
      }
      else
      {
        ret = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008f42:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3730      	adds	r7, #48	@ 0x30
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f5c:	f003 0308 	and.w	r3, r3, #8
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00a      	beq.n	8008f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	430a      	orrs	r2, r1
 8008f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa0:	f003 0302 	and.w	r3, r3, #2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00a      	beq.n	8008fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc2:	f003 0304 	and.w	r3, r3, #4
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00a      	beq.n	8008fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe4:	f003 0310 	and.w	r3, r3, #16
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00a      	beq.n	8009024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800902c:	2b00      	cmp	r3, #0
 800902e:	d01a      	beq.n	8009066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800904a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800904e:	d10a      	bne.n	8009066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	430a      	orrs	r2, r1
 8009064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800906a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00a      	beq.n	8009088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	605a      	str	r2, [r3, #4]
  }
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b098      	sub	sp, #96	@ 0x60
 8009098:	af02      	add	r7, sp, #8
 800909a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090a4:	f7f9 fd78 	bl	8002b98 <HAL_GetTick>
 80090a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0308 	and.w	r3, r3, #8
 80090b4:	2b08      	cmp	r3, #8
 80090b6:	d12f      	bne.n	8009118 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090c0:	2200      	movs	r2, #0
 80090c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f88e 	bl	80091e8 <UART_WaitOnFlagUntilTimeout>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d022      	beq.n	8009118 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090da:	e853 3f00 	ldrex	r3, [r3]
 80090de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	461a      	mov	r2, r3
 80090ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80090f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090f8:	e841 2300 	strex	r3, r2, [r1]
 80090fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e6      	bne.n	80090d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2220      	movs	r2, #32
 8009108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e063      	b.n	80091e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0304 	and.w	r3, r3, #4
 8009122:	2b04      	cmp	r3, #4
 8009124:	d149      	bne.n	80091ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009126:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800912e:	2200      	movs	r2, #0
 8009130:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f857 	bl	80091e8 <UART_WaitOnFlagUntilTimeout>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d03c      	beq.n	80091ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009148:	e853 3f00 	ldrex	r3, [r3]
 800914c:	623b      	str	r3, [r7, #32]
   return(result);
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009154:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800915e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009160:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009166:	e841 2300 	strex	r3, r2, [r1]
 800916a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800916c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e6      	bne.n	8009140 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3308      	adds	r3, #8
 8009178:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	e853 3f00 	ldrex	r3, [r3]
 8009180:	60fb      	str	r3, [r7, #12]
   return(result);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f023 0301 	bic.w	r3, r3, #1
 8009188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3308      	adds	r3, #8
 8009190:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009192:	61fa      	str	r2, [r7, #28]
 8009194:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009196:	69b9      	ldr	r1, [r7, #24]
 8009198:	69fa      	ldr	r2, [r7, #28]
 800919a:	e841 2300 	strex	r3, r2, [r1]
 800919e:	617b      	str	r3, [r7, #20]
   return(result);
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1e5      	bne.n	8009172 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2220      	movs	r2, #32
 80091aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e012      	b.n	80091e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2220      	movs	r2, #32
 80091be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2220      	movs	r2, #32
 80091c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3758      	adds	r7, #88	@ 0x58
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	4613      	mov	r3, r2
 80091f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091f8:	e04f      	b.n	800929a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009200:	d04b      	beq.n	800929a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009202:	f7f9 fcc9 	bl	8002b98 <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	429a      	cmp	r2, r3
 8009210:	d302      	bcc.n	8009218 <UART_WaitOnFlagUntilTimeout+0x30>
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e04e      	b.n	80092ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 0304 	and.w	r3, r3, #4
 8009226:	2b00      	cmp	r3, #0
 8009228:	d037      	beq.n	800929a <UART_WaitOnFlagUntilTimeout+0xb2>
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b80      	cmp	r3, #128	@ 0x80
 800922e:	d034      	beq.n	800929a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2b40      	cmp	r3, #64	@ 0x40
 8009234:	d031      	beq.n	800929a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	f003 0308 	and.w	r3, r3, #8
 8009240:	2b08      	cmp	r3, #8
 8009242:	d110      	bne.n	8009266 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2208      	movs	r2, #8
 800924a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f838 	bl	80092c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2208      	movs	r2, #8
 8009256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e029      	b.n	80092ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	69db      	ldr	r3, [r3, #28]
 800926c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009274:	d111      	bne.n	800929a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800927e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 f81e 	bl	80092c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2220      	movs	r2, #32
 800928a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e00f      	b.n	80092ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69da      	ldr	r2, [r3, #28]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	4013      	ands	r3, r2
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	bf0c      	ite	eq
 80092aa:	2301      	moveq	r3, #1
 80092ac:	2300      	movne	r3, #0
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	461a      	mov	r2, r3
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d0a0      	beq.n	80091fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b095      	sub	sp, #84	@ 0x54
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d2:	e853 3f00 	ldrex	r3, [r3]
 80092d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	461a      	mov	r2, r3
 80092e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80092ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092f0:	e841 2300 	strex	r3, r2, [r1]
 80092f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1e6      	bne.n	80092ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3308      	adds	r3, #8
 8009302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	e853 3f00 	ldrex	r3, [r3]
 800930a:	61fb      	str	r3, [r7, #28]
   return(result);
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009312:	f023 0301 	bic.w	r3, r3, #1
 8009316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3308      	adds	r3, #8
 800931e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009320:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009322:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800932e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e3      	bne.n	80092fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009338:	2b01      	cmp	r3, #1
 800933a:	d118      	bne.n	800936e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	e853 3f00 	ldrex	r3, [r3]
 8009348:	60bb      	str	r3, [r7, #8]
   return(result);
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	f023 0310 	bic.w	r3, r3, #16
 8009350:	647b      	str	r3, [r7, #68]	@ 0x44
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800935a:	61bb      	str	r3, [r7, #24]
 800935c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	6979      	ldr	r1, [r7, #20]
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	613b      	str	r3, [r7, #16]
   return(result);
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e6      	bne.n	800933c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2220      	movs	r2, #32
 8009372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009382:	bf00      	nop
 8009384:	3754      	adds	r7, #84	@ 0x54
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800938e:	b480      	push	{r7}
 8009390:	b085      	sub	sp, #20
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800939c:	2b01      	cmp	r3, #1
 800939e:	d101      	bne.n	80093a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80093a0:	2302      	movs	r3, #2
 80093a2:	e027      	b.n	80093f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2224      	movs	r2, #36	@ 0x24
 80093b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f022 0201 	bic.w	r2, r2, #1
 80093ca:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80093d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2220      	movs	r2, #32
 80093e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009410:	2b01      	cmp	r3, #1
 8009412:	d101      	bne.n	8009418 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009414:	2302      	movs	r3, #2
 8009416:	e02d      	b.n	8009474 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2224      	movs	r2, #36	@ 0x24
 8009424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f022 0201 	bic.w	r2, r2, #1
 800943e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	430a      	orrs	r2, r1
 8009452:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f84f 	bl	80094f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2220      	movs	r2, #32
 8009466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800948c:	2b01      	cmp	r3, #1
 800948e:	d101      	bne.n	8009494 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009490:	2302      	movs	r3, #2
 8009492:	e02d      	b.n	80094f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2224      	movs	r2, #36	@ 0x24
 80094a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f022 0201 	bic.w	r2, r2, #1
 80094ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	430a      	orrs	r2, r1
 80094ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f811 	bl	80094f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2220      	movs	r2, #32
 80094e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009504:	2b00      	cmp	r3, #0
 8009506:	d108      	bne.n	800951a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009518:	e031      	b.n	800957e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800951a:	2308      	movs	r3, #8
 800951c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800951e:	2308      	movs	r3, #8
 8009520:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	0e5b      	lsrs	r3, r3, #25
 800952a:	b2db      	uxtb	r3, r3
 800952c:	f003 0307 	and.w	r3, r3, #7
 8009530:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	0f5b      	lsrs	r3, r3, #29
 800953a:	b2db      	uxtb	r3, r3
 800953c:	f003 0307 	and.w	r3, r3, #7
 8009540:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009542:	7bbb      	ldrb	r3, [r7, #14]
 8009544:	7b3a      	ldrb	r2, [r7, #12]
 8009546:	4911      	ldr	r1, [pc, #68]	@ (800958c <UARTEx_SetNbDataToProcess+0x94>)
 8009548:	5c8a      	ldrb	r2, [r1, r2]
 800954a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800954e:	7b3a      	ldrb	r2, [r7, #12]
 8009550:	490f      	ldr	r1, [pc, #60]	@ (8009590 <UARTEx_SetNbDataToProcess+0x98>)
 8009552:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009554:	fb93 f3f2 	sdiv	r3, r3, r2
 8009558:	b29a      	uxth	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	7b7a      	ldrb	r2, [r7, #13]
 8009564:	4909      	ldr	r1, [pc, #36]	@ (800958c <UARTEx_SetNbDataToProcess+0x94>)
 8009566:	5c8a      	ldrb	r2, [r1, r2]
 8009568:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800956c:	7b7a      	ldrb	r2, [r7, #13]
 800956e:	4908      	ldr	r1, [pc, #32]	@ (8009590 <UARTEx_SetNbDataToProcess+0x98>)
 8009570:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009572:	fb93 f3f2 	sdiv	r3, r3, r2
 8009576:	b29a      	uxth	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800957e:	bf00      	nop
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	08009f24 	.word	0x08009f24
 8009590:	08009f2c 	.word	0x08009f2c

08009594 <siprintf>:
 8009594:	b40e      	push	{r1, r2, r3}
 8009596:	b510      	push	{r4, lr}
 8009598:	b09d      	sub	sp, #116	@ 0x74
 800959a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800959c:	9002      	str	r0, [sp, #8]
 800959e:	9006      	str	r0, [sp, #24]
 80095a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80095a4:	480a      	ldr	r0, [pc, #40]	@ (80095d0 <siprintf+0x3c>)
 80095a6:	9107      	str	r1, [sp, #28]
 80095a8:	9104      	str	r1, [sp, #16]
 80095aa:	490a      	ldr	r1, [pc, #40]	@ (80095d4 <siprintf+0x40>)
 80095ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80095b0:	9105      	str	r1, [sp, #20]
 80095b2:	2400      	movs	r4, #0
 80095b4:	a902      	add	r1, sp, #8
 80095b6:	6800      	ldr	r0, [r0, #0]
 80095b8:	9301      	str	r3, [sp, #4]
 80095ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80095bc:	f000 f994 	bl	80098e8 <_svfiprintf_r>
 80095c0:	9b02      	ldr	r3, [sp, #8]
 80095c2:	701c      	strb	r4, [r3, #0]
 80095c4:	b01d      	add	sp, #116	@ 0x74
 80095c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095ca:	b003      	add	sp, #12
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	2000000c 	.word	0x2000000c
 80095d4:	ffff0208 	.word	0xffff0208

080095d8 <memset>:
 80095d8:	4402      	add	r2, r0
 80095da:	4603      	mov	r3, r0
 80095dc:	4293      	cmp	r3, r2
 80095de:	d100      	bne.n	80095e2 <memset+0xa>
 80095e0:	4770      	bx	lr
 80095e2:	f803 1b01 	strb.w	r1, [r3], #1
 80095e6:	e7f9      	b.n	80095dc <memset+0x4>

080095e8 <__errno>:
 80095e8:	4b01      	ldr	r3, [pc, #4]	@ (80095f0 <__errno+0x8>)
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	2000000c 	.word	0x2000000c

080095f4 <__libc_init_array>:
 80095f4:	b570      	push	{r4, r5, r6, lr}
 80095f6:	4d0d      	ldr	r5, [pc, #52]	@ (800962c <__libc_init_array+0x38>)
 80095f8:	4c0d      	ldr	r4, [pc, #52]	@ (8009630 <__libc_init_array+0x3c>)
 80095fa:	1b64      	subs	r4, r4, r5
 80095fc:	10a4      	asrs	r4, r4, #2
 80095fe:	2600      	movs	r6, #0
 8009600:	42a6      	cmp	r6, r4
 8009602:	d109      	bne.n	8009618 <__libc_init_array+0x24>
 8009604:	4d0b      	ldr	r5, [pc, #44]	@ (8009634 <__libc_init_array+0x40>)
 8009606:	4c0c      	ldr	r4, [pc, #48]	@ (8009638 <__libc_init_array+0x44>)
 8009608:	f000 fc64 	bl	8009ed4 <_init>
 800960c:	1b64      	subs	r4, r4, r5
 800960e:	10a4      	asrs	r4, r4, #2
 8009610:	2600      	movs	r6, #0
 8009612:	42a6      	cmp	r6, r4
 8009614:	d105      	bne.n	8009622 <__libc_init_array+0x2e>
 8009616:	bd70      	pop	{r4, r5, r6, pc}
 8009618:	f855 3b04 	ldr.w	r3, [r5], #4
 800961c:	4798      	blx	r3
 800961e:	3601      	adds	r6, #1
 8009620:	e7ee      	b.n	8009600 <__libc_init_array+0xc>
 8009622:	f855 3b04 	ldr.w	r3, [r5], #4
 8009626:	4798      	blx	r3
 8009628:	3601      	adds	r6, #1
 800962a:	e7f2      	b.n	8009612 <__libc_init_array+0x1e>
 800962c:	08009f70 	.word	0x08009f70
 8009630:	08009f70 	.word	0x08009f70
 8009634:	08009f70 	.word	0x08009f70
 8009638:	08009f74 	.word	0x08009f74

0800963c <__retarget_lock_acquire_recursive>:
 800963c:	4770      	bx	lr

0800963e <__retarget_lock_release_recursive>:
 800963e:	4770      	bx	lr

08009640 <_free_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4605      	mov	r5, r0
 8009644:	2900      	cmp	r1, #0
 8009646:	d041      	beq.n	80096cc <_free_r+0x8c>
 8009648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800964c:	1f0c      	subs	r4, r1, #4
 800964e:	2b00      	cmp	r3, #0
 8009650:	bfb8      	it	lt
 8009652:	18e4      	addlt	r4, r4, r3
 8009654:	f000 f8e0 	bl	8009818 <__malloc_lock>
 8009658:	4a1d      	ldr	r2, [pc, #116]	@ (80096d0 <_free_r+0x90>)
 800965a:	6813      	ldr	r3, [r2, #0]
 800965c:	b933      	cbnz	r3, 800966c <_free_r+0x2c>
 800965e:	6063      	str	r3, [r4, #4]
 8009660:	6014      	str	r4, [r2, #0]
 8009662:	4628      	mov	r0, r5
 8009664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009668:	f000 b8dc 	b.w	8009824 <__malloc_unlock>
 800966c:	42a3      	cmp	r3, r4
 800966e:	d908      	bls.n	8009682 <_free_r+0x42>
 8009670:	6820      	ldr	r0, [r4, #0]
 8009672:	1821      	adds	r1, r4, r0
 8009674:	428b      	cmp	r3, r1
 8009676:	bf01      	itttt	eq
 8009678:	6819      	ldreq	r1, [r3, #0]
 800967a:	685b      	ldreq	r3, [r3, #4]
 800967c:	1809      	addeq	r1, r1, r0
 800967e:	6021      	streq	r1, [r4, #0]
 8009680:	e7ed      	b.n	800965e <_free_r+0x1e>
 8009682:	461a      	mov	r2, r3
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	b10b      	cbz	r3, 800968c <_free_r+0x4c>
 8009688:	42a3      	cmp	r3, r4
 800968a:	d9fa      	bls.n	8009682 <_free_r+0x42>
 800968c:	6811      	ldr	r1, [r2, #0]
 800968e:	1850      	adds	r0, r2, r1
 8009690:	42a0      	cmp	r0, r4
 8009692:	d10b      	bne.n	80096ac <_free_r+0x6c>
 8009694:	6820      	ldr	r0, [r4, #0]
 8009696:	4401      	add	r1, r0
 8009698:	1850      	adds	r0, r2, r1
 800969a:	4283      	cmp	r3, r0
 800969c:	6011      	str	r1, [r2, #0]
 800969e:	d1e0      	bne.n	8009662 <_free_r+0x22>
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	6053      	str	r3, [r2, #4]
 80096a6:	4408      	add	r0, r1
 80096a8:	6010      	str	r0, [r2, #0]
 80096aa:	e7da      	b.n	8009662 <_free_r+0x22>
 80096ac:	d902      	bls.n	80096b4 <_free_r+0x74>
 80096ae:	230c      	movs	r3, #12
 80096b0:	602b      	str	r3, [r5, #0]
 80096b2:	e7d6      	b.n	8009662 <_free_r+0x22>
 80096b4:	6820      	ldr	r0, [r4, #0]
 80096b6:	1821      	adds	r1, r4, r0
 80096b8:	428b      	cmp	r3, r1
 80096ba:	bf04      	itt	eq
 80096bc:	6819      	ldreq	r1, [r3, #0]
 80096be:	685b      	ldreq	r3, [r3, #4]
 80096c0:	6063      	str	r3, [r4, #4]
 80096c2:	bf04      	itt	eq
 80096c4:	1809      	addeq	r1, r1, r0
 80096c6:	6021      	streq	r1, [r4, #0]
 80096c8:	6054      	str	r4, [r2, #4]
 80096ca:	e7ca      	b.n	8009662 <_free_r+0x22>
 80096cc:	bd38      	pop	{r3, r4, r5, pc}
 80096ce:	bf00      	nop
 80096d0:	20000800 	.word	0x20000800

080096d4 <sbrk_aligned>:
 80096d4:	b570      	push	{r4, r5, r6, lr}
 80096d6:	4e0f      	ldr	r6, [pc, #60]	@ (8009714 <sbrk_aligned+0x40>)
 80096d8:	460c      	mov	r4, r1
 80096da:	6831      	ldr	r1, [r6, #0]
 80096dc:	4605      	mov	r5, r0
 80096de:	b911      	cbnz	r1, 80096e6 <sbrk_aligned+0x12>
 80096e0:	f000 fba4 	bl	8009e2c <_sbrk_r>
 80096e4:	6030      	str	r0, [r6, #0]
 80096e6:	4621      	mov	r1, r4
 80096e8:	4628      	mov	r0, r5
 80096ea:	f000 fb9f 	bl	8009e2c <_sbrk_r>
 80096ee:	1c43      	adds	r3, r0, #1
 80096f0:	d103      	bne.n	80096fa <sbrk_aligned+0x26>
 80096f2:	f04f 34ff 	mov.w	r4, #4294967295
 80096f6:	4620      	mov	r0, r4
 80096f8:	bd70      	pop	{r4, r5, r6, pc}
 80096fa:	1cc4      	adds	r4, r0, #3
 80096fc:	f024 0403 	bic.w	r4, r4, #3
 8009700:	42a0      	cmp	r0, r4
 8009702:	d0f8      	beq.n	80096f6 <sbrk_aligned+0x22>
 8009704:	1a21      	subs	r1, r4, r0
 8009706:	4628      	mov	r0, r5
 8009708:	f000 fb90 	bl	8009e2c <_sbrk_r>
 800970c:	3001      	adds	r0, #1
 800970e:	d1f2      	bne.n	80096f6 <sbrk_aligned+0x22>
 8009710:	e7ef      	b.n	80096f2 <sbrk_aligned+0x1e>
 8009712:	bf00      	nop
 8009714:	200007fc 	.word	0x200007fc

08009718 <_malloc_r>:
 8009718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800971c:	1ccd      	adds	r5, r1, #3
 800971e:	f025 0503 	bic.w	r5, r5, #3
 8009722:	3508      	adds	r5, #8
 8009724:	2d0c      	cmp	r5, #12
 8009726:	bf38      	it	cc
 8009728:	250c      	movcc	r5, #12
 800972a:	2d00      	cmp	r5, #0
 800972c:	4606      	mov	r6, r0
 800972e:	db01      	blt.n	8009734 <_malloc_r+0x1c>
 8009730:	42a9      	cmp	r1, r5
 8009732:	d904      	bls.n	800973e <_malloc_r+0x26>
 8009734:	230c      	movs	r3, #12
 8009736:	6033      	str	r3, [r6, #0]
 8009738:	2000      	movs	r0, #0
 800973a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800973e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009814 <_malloc_r+0xfc>
 8009742:	f000 f869 	bl	8009818 <__malloc_lock>
 8009746:	f8d8 3000 	ldr.w	r3, [r8]
 800974a:	461c      	mov	r4, r3
 800974c:	bb44      	cbnz	r4, 80097a0 <_malloc_r+0x88>
 800974e:	4629      	mov	r1, r5
 8009750:	4630      	mov	r0, r6
 8009752:	f7ff ffbf 	bl	80096d4 <sbrk_aligned>
 8009756:	1c43      	adds	r3, r0, #1
 8009758:	4604      	mov	r4, r0
 800975a:	d158      	bne.n	800980e <_malloc_r+0xf6>
 800975c:	f8d8 4000 	ldr.w	r4, [r8]
 8009760:	4627      	mov	r7, r4
 8009762:	2f00      	cmp	r7, #0
 8009764:	d143      	bne.n	80097ee <_malloc_r+0xd6>
 8009766:	2c00      	cmp	r4, #0
 8009768:	d04b      	beq.n	8009802 <_malloc_r+0xea>
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	4639      	mov	r1, r7
 800976e:	4630      	mov	r0, r6
 8009770:	eb04 0903 	add.w	r9, r4, r3
 8009774:	f000 fb5a 	bl	8009e2c <_sbrk_r>
 8009778:	4581      	cmp	r9, r0
 800977a:	d142      	bne.n	8009802 <_malloc_r+0xea>
 800977c:	6821      	ldr	r1, [r4, #0]
 800977e:	1a6d      	subs	r5, r5, r1
 8009780:	4629      	mov	r1, r5
 8009782:	4630      	mov	r0, r6
 8009784:	f7ff ffa6 	bl	80096d4 <sbrk_aligned>
 8009788:	3001      	adds	r0, #1
 800978a:	d03a      	beq.n	8009802 <_malloc_r+0xea>
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	442b      	add	r3, r5
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	f8d8 3000 	ldr.w	r3, [r8]
 8009796:	685a      	ldr	r2, [r3, #4]
 8009798:	bb62      	cbnz	r2, 80097f4 <_malloc_r+0xdc>
 800979a:	f8c8 7000 	str.w	r7, [r8]
 800979e:	e00f      	b.n	80097c0 <_malloc_r+0xa8>
 80097a0:	6822      	ldr	r2, [r4, #0]
 80097a2:	1b52      	subs	r2, r2, r5
 80097a4:	d420      	bmi.n	80097e8 <_malloc_r+0xd0>
 80097a6:	2a0b      	cmp	r2, #11
 80097a8:	d917      	bls.n	80097da <_malloc_r+0xc2>
 80097aa:	1961      	adds	r1, r4, r5
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	6025      	str	r5, [r4, #0]
 80097b0:	bf18      	it	ne
 80097b2:	6059      	strne	r1, [r3, #4]
 80097b4:	6863      	ldr	r3, [r4, #4]
 80097b6:	bf08      	it	eq
 80097b8:	f8c8 1000 	streq.w	r1, [r8]
 80097bc:	5162      	str	r2, [r4, r5]
 80097be:	604b      	str	r3, [r1, #4]
 80097c0:	4630      	mov	r0, r6
 80097c2:	f000 f82f 	bl	8009824 <__malloc_unlock>
 80097c6:	f104 000b 	add.w	r0, r4, #11
 80097ca:	1d23      	adds	r3, r4, #4
 80097cc:	f020 0007 	bic.w	r0, r0, #7
 80097d0:	1ac2      	subs	r2, r0, r3
 80097d2:	bf1c      	itt	ne
 80097d4:	1a1b      	subne	r3, r3, r0
 80097d6:	50a3      	strne	r3, [r4, r2]
 80097d8:	e7af      	b.n	800973a <_malloc_r+0x22>
 80097da:	6862      	ldr	r2, [r4, #4]
 80097dc:	42a3      	cmp	r3, r4
 80097de:	bf0c      	ite	eq
 80097e0:	f8c8 2000 	streq.w	r2, [r8]
 80097e4:	605a      	strne	r2, [r3, #4]
 80097e6:	e7eb      	b.n	80097c0 <_malloc_r+0xa8>
 80097e8:	4623      	mov	r3, r4
 80097ea:	6864      	ldr	r4, [r4, #4]
 80097ec:	e7ae      	b.n	800974c <_malloc_r+0x34>
 80097ee:	463c      	mov	r4, r7
 80097f0:	687f      	ldr	r7, [r7, #4]
 80097f2:	e7b6      	b.n	8009762 <_malloc_r+0x4a>
 80097f4:	461a      	mov	r2, r3
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	42a3      	cmp	r3, r4
 80097fa:	d1fb      	bne.n	80097f4 <_malloc_r+0xdc>
 80097fc:	2300      	movs	r3, #0
 80097fe:	6053      	str	r3, [r2, #4]
 8009800:	e7de      	b.n	80097c0 <_malloc_r+0xa8>
 8009802:	230c      	movs	r3, #12
 8009804:	6033      	str	r3, [r6, #0]
 8009806:	4630      	mov	r0, r6
 8009808:	f000 f80c 	bl	8009824 <__malloc_unlock>
 800980c:	e794      	b.n	8009738 <_malloc_r+0x20>
 800980e:	6005      	str	r5, [r0, #0]
 8009810:	e7d6      	b.n	80097c0 <_malloc_r+0xa8>
 8009812:	bf00      	nop
 8009814:	20000800 	.word	0x20000800

08009818 <__malloc_lock>:
 8009818:	4801      	ldr	r0, [pc, #4]	@ (8009820 <__malloc_lock+0x8>)
 800981a:	f7ff bf0f 	b.w	800963c <__retarget_lock_acquire_recursive>
 800981e:	bf00      	nop
 8009820:	200007f8 	.word	0x200007f8

08009824 <__malloc_unlock>:
 8009824:	4801      	ldr	r0, [pc, #4]	@ (800982c <__malloc_unlock+0x8>)
 8009826:	f7ff bf0a 	b.w	800963e <__retarget_lock_release_recursive>
 800982a:	bf00      	nop
 800982c:	200007f8 	.word	0x200007f8

08009830 <__ssputs_r>:
 8009830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009834:	688e      	ldr	r6, [r1, #8]
 8009836:	461f      	mov	r7, r3
 8009838:	42be      	cmp	r6, r7
 800983a:	680b      	ldr	r3, [r1, #0]
 800983c:	4682      	mov	sl, r0
 800983e:	460c      	mov	r4, r1
 8009840:	4690      	mov	r8, r2
 8009842:	d82d      	bhi.n	80098a0 <__ssputs_r+0x70>
 8009844:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009848:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800984c:	d026      	beq.n	800989c <__ssputs_r+0x6c>
 800984e:	6965      	ldr	r5, [r4, #20]
 8009850:	6909      	ldr	r1, [r1, #16]
 8009852:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009856:	eba3 0901 	sub.w	r9, r3, r1
 800985a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800985e:	1c7b      	adds	r3, r7, #1
 8009860:	444b      	add	r3, r9
 8009862:	106d      	asrs	r5, r5, #1
 8009864:	429d      	cmp	r5, r3
 8009866:	bf38      	it	cc
 8009868:	461d      	movcc	r5, r3
 800986a:	0553      	lsls	r3, r2, #21
 800986c:	d527      	bpl.n	80098be <__ssputs_r+0x8e>
 800986e:	4629      	mov	r1, r5
 8009870:	f7ff ff52 	bl	8009718 <_malloc_r>
 8009874:	4606      	mov	r6, r0
 8009876:	b360      	cbz	r0, 80098d2 <__ssputs_r+0xa2>
 8009878:	6921      	ldr	r1, [r4, #16]
 800987a:	464a      	mov	r2, r9
 800987c:	f000 fae6 	bl	8009e4c <memcpy>
 8009880:	89a3      	ldrh	r3, [r4, #12]
 8009882:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800988a:	81a3      	strh	r3, [r4, #12]
 800988c:	6126      	str	r6, [r4, #16]
 800988e:	6165      	str	r5, [r4, #20]
 8009890:	444e      	add	r6, r9
 8009892:	eba5 0509 	sub.w	r5, r5, r9
 8009896:	6026      	str	r6, [r4, #0]
 8009898:	60a5      	str	r5, [r4, #8]
 800989a:	463e      	mov	r6, r7
 800989c:	42be      	cmp	r6, r7
 800989e:	d900      	bls.n	80098a2 <__ssputs_r+0x72>
 80098a0:	463e      	mov	r6, r7
 80098a2:	6820      	ldr	r0, [r4, #0]
 80098a4:	4632      	mov	r2, r6
 80098a6:	4641      	mov	r1, r8
 80098a8:	f000 faa6 	bl	8009df8 <memmove>
 80098ac:	68a3      	ldr	r3, [r4, #8]
 80098ae:	1b9b      	subs	r3, r3, r6
 80098b0:	60a3      	str	r3, [r4, #8]
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	4433      	add	r3, r6
 80098b6:	6023      	str	r3, [r4, #0]
 80098b8:	2000      	movs	r0, #0
 80098ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098be:	462a      	mov	r2, r5
 80098c0:	f000 fad2 	bl	8009e68 <_realloc_r>
 80098c4:	4606      	mov	r6, r0
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d1e0      	bne.n	800988c <__ssputs_r+0x5c>
 80098ca:	6921      	ldr	r1, [r4, #16]
 80098cc:	4650      	mov	r0, sl
 80098ce:	f7ff feb7 	bl	8009640 <_free_r>
 80098d2:	230c      	movs	r3, #12
 80098d4:	f8ca 3000 	str.w	r3, [sl]
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098de:	81a3      	strh	r3, [r4, #12]
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295
 80098e4:	e7e9      	b.n	80098ba <__ssputs_r+0x8a>
	...

080098e8 <_svfiprintf_r>:
 80098e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	4698      	mov	r8, r3
 80098ee:	898b      	ldrh	r3, [r1, #12]
 80098f0:	061b      	lsls	r3, r3, #24
 80098f2:	b09d      	sub	sp, #116	@ 0x74
 80098f4:	4607      	mov	r7, r0
 80098f6:	460d      	mov	r5, r1
 80098f8:	4614      	mov	r4, r2
 80098fa:	d510      	bpl.n	800991e <_svfiprintf_r+0x36>
 80098fc:	690b      	ldr	r3, [r1, #16]
 80098fe:	b973      	cbnz	r3, 800991e <_svfiprintf_r+0x36>
 8009900:	2140      	movs	r1, #64	@ 0x40
 8009902:	f7ff ff09 	bl	8009718 <_malloc_r>
 8009906:	6028      	str	r0, [r5, #0]
 8009908:	6128      	str	r0, [r5, #16]
 800990a:	b930      	cbnz	r0, 800991a <_svfiprintf_r+0x32>
 800990c:	230c      	movs	r3, #12
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	f04f 30ff 	mov.w	r0, #4294967295
 8009914:	b01d      	add	sp, #116	@ 0x74
 8009916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991a:	2340      	movs	r3, #64	@ 0x40
 800991c:	616b      	str	r3, [r5, #20]
 800991e:	2300      	movs	r3, #0
 8009920:	9309      	str	r3, [sp, #36]	@ 0x24
 8009922:	2320      	movs	r3, #32
 8009924:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009928:	f8cd 800c 	str.w	r8, [sp, #12]
 800992c:	2330      	movs	r3, #48	@ 0x30
 800992e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009acc <_svfiprintf_r+0x1e4>
 8009932:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009936:	f04f 0901 	mov.w	r9, #1
 800993a:	4623      	mov	r3, r4
 800993c:	469a      	mov	sl, r3
 800993e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009942:	b10a      	cbz	r2, 8009948 <_svfiprintf_r+0x60>
 8009944:	2a25      	cmp	r2, #37	@ 0x25
 8009946:	d1f9      	bne.n	800993c <_svfiprintf_r+0x54>
 8009948:	ebba 0b04 	subs.w	fp, sl, r4
 800994c:	d00b      	beq.n	8009966 <_svfiprintf_r+0x7e>
 800994e:	465b      	mov	r3, fp
 8009950:	4622      	mov	r2, r4
 8009952:	4629      	mov	r1, r5
 8009954:	4638      	mov	r0, r7
 8009956:	f7ff ff6b 	bl	8009830 <__ssputs_r>
 800995a:	3001      	adds	r0, #1
 800995c:	f000 80a7 	beq.w	8009aae <_svfiprintf_r+0x1c6>
 8009960:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009962:	445a      	add	r2, fp
 8009964:	9209      	str	r2, [sp, #36]	@ 0x24
 8009966:	f89a 3000 	ldrb.w	r3, [sl]
 800996a:	2b00      	cmp	r3, #0
 800996c:	f000 809f 	beq.w	8009aae <_svfiprintf_r+0x1c6>
 8009970:	2300      	movs	r3, #0
 8009972:	f04f 32ff 	mov.w	r2, #4294967295
 8009976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800997a:	f10a 0a01 	add.w	sl, sl, #1
 800997e:	9304      	str	r3, [sp, #16]
 8009980:	9307      	str	r3, [sp, #28]
 8009982:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009986:	931a      	str	r3, [sp, #104]	@ 0x68
 8009988:	4654      	mov	r4, sl
 800998a:	2205      	movs	r2, #5
 800998c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009990:	484e      	ldr	r0, [pc, #312]	@ (8009acc <_svfiprintf_r+0x1e4>)
 8009992:	f7f6 fc4d 	bl	8000230 <memchr>
 8009996:	9a04      	ldr	r2, [sp, #16]
 8009998:	b9d8      	cbnz	r0, 80099d2 <_svfiprintf_r+0xea>
 800999a:	06d0      	lsls	r0, r2, #27
 800999c:	bf44      	itt	mi
 800999e:	2320      	movmi	r3, #32
 80099a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099a4:	0711      	lsls	r1, r2, #28
 80099a6:	bf44      	itt	mi
 80099a8:	232b      	movmi	r3, #43	@ 0x2b
 80099aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099ae:	f89a 3000 	ldrb.w	r3, [sl]
 80099b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80099b4:	d015      	beq.n	80099e2 <_svfiprintf_r+0xfa>
 80099b6:	9a07      	ldr	r2, [sp, #28]
 80099b8:	4654      	mov	r4, sl
 80099ba:	2000      	movs	r0, #0
 80099bc:	f04f 0c0a 	mov.w	ip, #10
 80099c0:	4621      	mov	r1, r4
 80099c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099c6:	3b30      	subs	r3, #48	@ 0x30
 80099c8:	2b09      	cmp	r3, #9
 80099ca:	d94b      	bls.n	8009a64 <_svfiprintf_r+0x17c>
 80099cc:	b1b0      	cbz	r0, 80099fc <_svfiprintf_r+0x114>
 80099ce:	9207      	str	r2, [sp, #28]
 80099d0:	e014      	b.n	80099fc <_svfiprintf_r+0x114>
 80099d2:	eba0 0308 	sub.w	r3, r0, r8
 80099d6:	fa09 f303 	lsl.w	r3, r9, r3
 80099da:	4313      	orrs	r3, r2
 80099dc:	9304      	str	r3, [sp, #16]
 80099de:	46a2      	mov	sl, r4
 80099e0:	e7d2      	b.n	8009988 <_svfiprintf_r+0xa0>
 80099e2:	9b03      	ldr	r3, [sp, #12]
 80099e4:	1d19      	adds	r1, r3, #4
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	9103      	str	r1, [sp, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	bfbb      	ittet	lt
 80099ee:	425b      	neglt	r3, r3
 80099f0:	f042 0202 	orrlt.w	r2, r2, #2
 80099f4:	9307      	strge	r3, [sp, #28]
 80099f6:	9307      	strlt	r3, [sp, #28]
 80099f8:	bfb8      	it	lt
 80099fa:	9204      	strlt	r2, [sp, #16]
 80099fc:	7823      	ldrb	r3, [r4, #0]
 80099fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a00:	d10a      	bne.n	8009a18 <_svfiprintf_r+0x130>
 8009a02:	7863      	ldrb	r3, [r4, #1]
 8009a04:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a06:	d132      	bne.n	8009a6e <_svfiprintf_r+0x186>
 8009a08:	9b03      	ldr	r3, [sp, #12]
 8009a0a:	1d1a      	adds	r2, r3, #4
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	9203      	str	r2, [sp, #12]
 8009a10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a14:	3402      	adds	r4, #2
 8009a16:	9305      	str	r3, [sp, #20]
 8009a18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009adc <_svfiprintf_r+0x1f4>
 8009a1c:	7821      	ldrb	r1, [r4, #0]
 8009a1e:	2203      	movs	r2, #3
 8009a20:	4650      	mov	r0, sl
 8009a22:	f7f6 fc05 	bl	8000230 <memchr>
 8009a26:	b138      	cbz	r0, 8009a38 <_svfiprintf_r+0x150>
 8009a28:	9b04      	ldr	r3, [sp, #16]
 8009a2a:	eba0 000a 	sub.w	r0, r0, sl
 8009a2e:	2240      	movs	r2, #64	@ 0x40
 8009a30:	4082      	lsls	r2, r0
 8009a32:	4313      	orrs	r3, r2
 8009a34:	3401      	adds	r4, #1
 8009a36:	9304      	str	r3, [sp, #16]
 8009a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a3c:	4824      	ldr	r0, [pc, #144]	@ (8009ad0 <_svfiprintf_r+0x1e8>)
 8009a3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a42:	2206      	movs	r2, #6
 8009a44:	f7f6 fbf4 	bl	8000230 <memchr>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d036      	beq.n	8009aba <_svfiprintf_r+0x1d2>
 8009a4c:	4b21      	ldr	r3, [pc, #132]	@ (8009ad4 <_svfiprintf_r+0x1ec>)
 8009a4e:	bb1b      	cbnz	r3, 8009a98 <_svfiprintf_r+0x1b0>
 8009a50:	9b03      	ldr	r3, [sp, #12]
 8009a52:	3307      	adds	r3, #7
 8009a54:	f023 0307 	bic.w	r3, r3, #7
 8009a58:	3308      	adds	r3, #8
 8009a5a:	9303      	str	r3, [sp, #12]
 8009a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a5e:	4433      	add	r3, r6
 8009a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a62:	e76a      	b.n	800993a <_svfiprintf_r+0x52>
 8009a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a68:	460c      	mov	r4, r1
 8009a6a:	2001      	movs	r0, #1
 8009a6c:	e7a8      	b.n	80099c0 <_svfiprintf_r+0xd8>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	3401      	adds	r4, #1
 8009a72:	9305      	str	r3, [sp, #20]
 8009a74:	4619      	mov	r1, r3
 8009a76:	f04f 0c0a 	mov.w	ip, #10
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a80:	3a30      	subs	r2, #48	@ 0x30
 8009a82:	2a09      	cmp	r2, #9
 8009a84:	d903      	bls.n	8009a8e <_svfiprintf_r+0x1a6>
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0c6      	beq.n	8009a18 <_svfiprintf_r+0x130>
 8009a8a:	9105      	str	r1, [sp, #20]
 8009a8c:	e7c4      	b.n	8009a18 <_svfiprintf_r+0x130>
 8009a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a92:	4604      	mov	r4, r0
 8009a94:	2301      	movs	r3, #1
 8009a96:	e7f0      	b.n	8009a7a <_svfiprintf_r+0x192>
 8009a98:	ab03      	add	r3, sp, #12
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	462a      	mov	r2, r5
 8009a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ad8 <_svfiprintf_r+0x1f0>)
 8009aa0:	a904      	add	r1, sp, #16
 8009aa2:	4638      	mov	r0, r7
 8009aa4:	f3af 8000 	nop.w
 8009aa8:	1c42      	adds	r2, r0, #1
 8009aaa:	4606      	mov	r6, r0
 8009aac:	d1d6      	bne.n	8009a5c <_svfiprintf_r+0x174>
 8009aae:	89ab      	ldrh	r3, [r5, #12]
 8009ab0:	065b      	lsls	r3, r3, #25
 8009ab2:	f53f af2d 	bmi.w	8009910 <_svfiprintf_r+0x28>
 8009ab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ab8:	e72c      	b.n	8009914 <_svfiprintf_r+0x2c>
 8009aba:	ab03      	add	r3, sp, #12
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	462a      	mov	r2, r5
 8009ac0:	4b05      	ldr	r3, [pc, #20]	@ (8009ad8 <_svfiprintf_r+0x1f0>)
 8009ac2:	a904      	add	r1, sp, #16
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	f000 f879 	bl	8009bbc <_printf_i>
 8009aca:	e7ed      	b.n	8009aa8 <_svfiprintf_r+0x1c0>
 8009acc:	08009f34 	.word	0x08009f34
 8009ad0:	08009f3e 	.word	0x08009f3e
 8009ad4:	00000000 	.word	0x00000000
 8009ad8:	08009831 	.word	0x08009831
 8009adc:	08009f3a 	.word	0x08009f3a

08009ae0 <_printf_common>:
 8009ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae4:	4616      	mov	r6, r2
 8009ae6:	4698      	mov	r8, r3
 8009ae8:	688a      	ldr	r2, [r1, #8]
 8009aea:	690b      	ldr	r3, [r1, #16]
 8009aec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009af0:	4293      	cmp	r3, r2
 8009af2:	bfb8      	it	lt
 8009af4:	4613      	movlt	r3, r2
 8009af6:	6033      	str	r3, [r6, #0]
 8009af8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009afc:	4607      	mov	r7, r0
 8009afe:	460c      	mov	r4, r1
 8009b00:	b10a      	cbz	r2, 8009b06 <_printf_common+0x26>
 8009b02:	3301      	adds	r3, #1
 8009b04:	6033      	str	r3, [r6, #0]
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	0699      	lsls	r1, r3, #26
 8009b0a:	bf42      	ittt	mi
 8009b0c:	6833      	ldrmi	r3, [r6, #0]
 8009b0e:	3302      	addmi	r3, #2
 8009b10:	6033      	strmi	r3, [r6, #0]
 8009b12:	6825      	ldr	r5, [r4, #0]
 8009b14:	f015 0506 	ands.w	r5, r5, #6
 8009b18:	d106      	bne.n	8009b28 <_printf_common+0x48>
 8009b1a:	f104 0a19 	add.w	sl, r4, #25
 8009b1e:	68e3      	ldr	r3, [r4, #12]
 8009b20:	6832      	ldr	r2, [r6, #0]
 8009b22:	1a9b      	subs	r3, r3, r2
 8009b24:	42ab      	cmp	r3, r5
 8009b26:	dc26      	bgt.n	8009b76 <_printf_common+0x96>
 8009b28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b2c:	6822      	ldr	r2, [r4, #0]
 8009b2e:	3b00      	subs	r3, #0
 8009b30:	bf18      	it	ne
 8009b32:	2301      	movne	r3, #1
 8009b34:	0692      	lsls	r2, r2, #26
 8009b36:	d42b      	bmi.n	8009b90 <_printf_common+0xb0>
 8009b38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b3c:	4641      	mov	r1, r8
 8009b3e:	4638      	mov	r0, r7
 8009b40:	47c8      	blx	r9
 8009b42:	3001      	adds	r0, #1
 8009b44:	d01e      	beq.n	8009b84 <_printf_common+0xa4>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	6922      	ldr	r2, [r4, #16]
 8009b4a:	f003 0306 	and.w	r3, r3, #6
 8009b4e:	2b04      	cmp	r3, #4
 8009b50:	bf02      	ittt	eq
 8009b52:	68e5      	ldreq	r5, [r4, #12]
 8009b54:	6833      	ldreq	r3, [r6, #0]
 8009b56:	1aed      	subeq	r5, r5, r3
 8009b58:	68a3      	ldr	r3, [r4, #8]
 8009b5a:	bf0c      	ite	eq
 8009b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b60:	2500      	movne	r5, #0
 8009b62:	4293      	cmp	r3, r2
 8009b64:	bfc4      	itt	gt
 8009b66:	1a9b      	subgt	r3, r3, r2
 8009b68:	18ed      	addgt	r5, r5, r3
 8009b6a:	2600      	movs	r6, #0
 8009b6c:	341a      	adds	r4, #26
 8009b6e:	42b5      	cmp	r5, r6
 8009b70:	d11a      	bne.n	8009ba8 <_printf_common+0xc8>
 8009b72:	2000      	movs	r0, #0
 8009b74:	e008      	b.n	8009b88 <_printf_common+0xa8>
 8009b76:	2301      	movs	r3, #1
 8009b78:	4652      	mov	r2, sl
 8009b7a:	4641      	mov	r1, r8
 8009b7c:	4638      	mov	r0, r7
 8009b7e:	47c8      	blx	r9
 8009b80:	3001      	adds	r0, #1
 8009b82:	d103      	bne.n	8009b8c <_printf_common+0xac>
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295
 8009b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8c:	3501      	adds	r5, #1
 8009b8e:	e7c6      	b.n	8009b1e <_printf_common+0x3e>
 8009b90:	18e1      	adds	r1, r4, r3
 8009b92:	1c5a      	adds	r2, r3, #1
 8009b94:	2030      	movs	r0, #48	@ 0x30
 8009b96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b9a:	4422      	add	r2, r4
 8009b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ba0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ba4:	3302      	adds	r3, #2
 8009ba6:	e7c7      	b.n	8009b38 <_printf_common+0x58>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	4622      	mov	r2, r4
 8009bac:	4641      	mov	r1, r8
 8009bae:	4638      	mov	r0, r7
 8009bb0:	47c8      	blx	r9
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	d0e6      	beq.n	8009b84 <_printf_common+0xa4>
 8009bb6:	3601      	adds	r6, #1
 8009bb8:	e7d9      	b.n	8009b6e <_printf_common+0x8e>
	...

08009bbc <_printf_i>:
 8009bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc0:	7e0f      	ldrb	r7, [r1, #24]
 8009bc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009bc4:	2f78      	cmp	r7, #120	@ 0x78
 8009bc6:	4691      	mov	r9, r2
 8009bc8:	4680      	mov	r8, r0
 8009bca:	460c      	mov	r4, r1
 8009bcc:	469a      	mov	sl, r3
 8009bce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009bd2:	d807      	bhi.n	8009be4 <_printf_i+0x28>
 8009bd4:	2f62      	cmp	r7, #98	@ 0x62
 8009bd6:	d80a      	bhi.n	8009bee <_printf_i+0x32>
 8009bd8:	2f00      	cmp	r7, #0
 8009bda:	f000 80d1 	beq.w	8009d80 <_printf_i+0x1c4>
 8009bde:	2f58      	cmp	r7, #88	@ 0x58
 8009be0:	f000 80b8 	beq.w	8009d54 <_printf_i+0x198>
 8009be4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009be8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009bec:	e03a      	b.n	8009c64 <_printf_i+0xa8>
 8009bee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009bf2:	2b15      	cmp	r3, #21
 8009bf4:	d8f6      	bhi.n	8009be4 <_printf_i+0x28>
 8009bf6:	a101      	add	r1, pc, #4	@ (adr r1, 8009bfc <_printf_i+0x40>)
 8009bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bfc:	08009c55 	.word	0x08009c55
 8009c00:	08009c69 	.word	0x08009c69
 8009c04:	08009be5 	.word	0x08009be5
 8009c08:	08009be5 	.word	0x08009be5
 8009c0c:	08009be5 	.word	0x08009be5
 8009c10:	08009be5 	.word	0x08009be5
 8009c14:	08009c69 	.word	0x08009c69
 8009c18:	08009be5 	.word	0x08009be5
 8009c1c:	08009be5 	.word	0x08009be5
 8009c20:	08009be5 	.word	0x08009be5
 8009c24:	08009be5 	.word	0x08009be5
 8009c28:	08009d67 	.word	0x08009d67
 8009c2c:	08009c93 	.word	0x08009c93
 8009c30:	08009d21 	.word	0x08009d21
 8009c34:	08009be5 	.word	0x08009be5
 8009c38:	08009be5 	.word	0x08009be5
 8009c3c:	08009d89 	.word	0x08009d89
 8009c40:	08009be5 	.word	0x08009be5
 8009c44:	08009c93 	.word	0x08009c93
 8009c48:	08009be5 	.word	0x08009be5
 8009c4c:	08009be5 	.word	0x08009be5
 8009c50:	08009d29 	.word	0x08009d29
 8009c54:	6833      	ldr	r3, [r6, #0]
 8009c56:	1d1a      	adds	r2, r3, #4
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6032      	str	r2, [r6, #0]
 8009c5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c64:	2301      	movs	r3, #1
 8009c66:	e09c      	b.n	8009da2 <_printf_i+0x1e6>
 8009c68:	6833      	ldr	r3, [r6, #0]
 8009c6a:	6820      	ldr	r0, [r4, #0]
 8009c6c:	1d19      	adds	r1, r3, #4
 8009c6e:	6031      	str	r1, [r6, #0]
 8009c70:	0606      	lsls	r6, r0, #24
 8009c72:	d501      	bpl.n	8009c78 <_printf_i+0xbc>
 8009c74:	681d      	ldr	r5, [r3, #0]
 8009c76:	e003      	b.n	8009c80 <_printf_i+0xc4>
 8009c78:	0645      	lsls	r5, r0, #25
 8009c7a:	d5fb      	bpl.n	8009c74 <_printf_i+0xb8>
 8009c7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c80:	2d00      	cmp	r5, #0
 8009c82:	da03      	bge.n	8009c8c <_printf_i+0xd0>
 8009c84:	232d      	movs	r3, #45	@ 0x2d
 8009c86:	426d      	negs	r5, r5
 8009c88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c8c:	4858      	ldr	r0, [pc, #352]	@ (8009df0 <_printf_i+0x234>)
 8009c8e:	230a      	movs	r3, #10
 8009c90:	e011      	b.n	8009cb6 <_printf_i+0xfa>
 8009c92:	6821      	ldr	r1, [r4, #0]
 8009c94:	6833      	ldr	r3, [r6, #0]
 8009c96:	0608      	lsls	r0, r1, #24
 8009c98:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c9c:	d402      	bmi.n	8009ca4 <_printf_i+0xe8>
 8009c9e:	0649      	lsls	r1, r1, #25
 8009ca0:	bf48      	it	mi
 8009ca2:	b2ad      	uxthmi	r5, r5
 8009ca4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ca6:	4852      	ldr	r0, [pc, #328]	@ (8009df0 <_printf_i+0x234>)
 8009ca8:	6033      	str	r3, [r6, #0]
 8009caa:	bf14      	ite	ne
 8009cac:	230a      	movne	r3, #10
 8009cae:	2308      	moveq	r3, #8
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009cb6:	6866      	ldr	r6, [r4, #4]
 8009cb8:	60a6      	str	r6, [r4, #8]
 8009cba:	2e00      	cmp	r6, #0
 8009cbc:	db05      	blt.n	8009cca <_printf_i+0x10e>
 8009cbe:	6821      	ldr	r1, [r4, #0]
 8009cc0:	432e      	orrs	r6, r5
 8009cc2:	f021 0104 	bic.w	r1, r1, #4
 8009cc6:	6021      	str	r1, [r4, #0]
 8009cc8:	d04b      	beq.n	8009d62 <_printf_i+0x1a6>
 8009cca:	4616      	mov	r6, r2
 8009ccc:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cd0:	fb03 5711 	mls	r7, r3, r1, r5
 8009cd4:	5dc7      	ldrb	r7, [r0, r7]
 8009cd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cda:	462f      	mov	r7, r5
 8009cdc:	42bb      	cmp	r3, r7
 8009cde:	460d      	mov	r5, r1
 8009ce0:	d9f4      	bls.n	8009ccc <_printf_i+0x110>
 8009ce2:	2b08      	cmp	r3, #8
 8009ce4:	d10b      	bne.n	8009cfe <_printf_i+0x142>
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	07df      	lsls	r7, r3, #31
 8009cea:	d508      	bpl.n	8009cfe <_printf_i+0x142>
 8009cec:	6923      	ldr	r3, [r4, #16]
 8009cee:	6861      	ldr	r1, [r4, #4]
 8009cf0:	4299      	cmp	r1, r3
 8009cf2:	bfde      	ittt	le
 8009cf4:	2330      	movle	r3, #48	@ 0x30
 8009cf6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cfa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cfe:	1b92      	subs	r2, r2, r6
 8009d00:	6122      	str	r2, [r4, #16]
 8009d02:	f8cd a000 	str.w	sl, [sp]
 8009d06:	464b      	mov	r3, r9
 8009d08:	aa03      	add	r2, sp, #12
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4640      	mov	r0, r8
 8009d0e:	f7ff fee7 	bl	8009ae0 <_printf_common>
 8009d12:	3001      	adds	r0, #1
 8009d14:	d14a      	bne.n	8009dac <_printf_i+0x1f0>
 8009d16:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1a:	b004      	add	sp, #16
 8009d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	f043 0320 	orr.w	r3, r3, #32
 8009d26:	6023      	str	r3, [r4, #0]
 8009d28:	4832      	ldr	r0, [pc, #200]	@ (8009df4 <_printf_i+0x238>)
 8009d2a:	2778      	movs	r7, #120	@ 0x78
 8009d2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	6831      	ldr	r1, [r6, #0]
 8009d34:	061f      	lsls	r7, r3, #24
 8009d36:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d3a:	d402      	bmi.n	8009d42 <_printf_i+0x186>
 8009d3c:	065f      	lsls	r7, r3, #25
 8009d3e:	bf48      	it	mi
 8009d40:	b2ad      	uxthmi	r5, r5
 8009d42:	6031      	str	r1, [r6, #0]
 8009d44:	07d9      	lsls	r1, r3, #31
 8009d46:	bf44      	itt	mi
 8009d48:	f043 0320 	orrmi.w	r3, r3, #32
 8009d4c:	6023      	strmi	r3, [r4, #0]
 8009d4e:	b11d      	cbz	r5, 8009d58 <_printf_i+0x19c>
 8009d50:	2310      	movs	r3, #16
 8009d52:	e7ad      	b.n	8009cb0 <_printf_i+0xf4>
 8009d54:	4826      	ldr	r0, [pc, #152]	@ (8009df0 <_printf_i+0x234>)
 8009d56:	e7e9      	b.n	8009d2c <_printf_i+0x170>
 8009d58:	6823      	ldr	r3, [r4, #0]
 8009d5a:	f023 0320 	bic.w	r3, r3, #32
 8009d5e:	6023      	str	r3, [r4, #0]
 8009d60:	e7f6      	b.n	8009d50 <_printf_i+0x194>
 8009d62:	4616      	mov	r6, r2
 8009d64:	e7bd      	b.n	8009ce2 <_printf_i+0x126>
 8009d66:	6833      	ldr	r3, [r6, #0]
 8009d68:	6825      	ldr	r5, [r4, #0]
 8009d6a:	6961      	ldr	r1, [r4, #20]
 8009d6c:	1d18      	adds	r0, r3, #4
 8009d6e:	6030      	str	r0, [r6, #0]
 8009d70:	062e      	lsls	r6, r5, #24
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	d501      	bpl.n	8009d7a <_printf_i+0x1be>
 8009d76:	6019      	str	r1, [r3, #0]
 8009d78:	e002      	b.n	8009d80 <_printf_i+0x1c4>
 8009d7a:	0668      	lsls	r0, r5, #25
 8009d7c:	d5fb      	bpl.n	8009d76 <_printf_i+0x1ba>
 8009d7e:	8019      	strh	r1, [r3, #0]
 8009d80:	2300      	movs	r3, #0
 8009d82:	6123      	str	r3, [r4, #16]
 8009d84:	4616      	mov	r6, r2
 8009d86:	e7bc      	b.n	8009d02 <_printf_i+0x146>
 8009d88:	6833      	ldr	r3, [r6, #0]
 8009d8a:	1d1a      	adds	r2, r3, #4
 8009d8c:	6032      	str	r2, [r6, #0]
 8009d8e:	681e      	ldr	r6, [r3, #0]
 8009d90:	6862      	ldr	r2, [r4, #4]
 8009d92:	2100      	movs	r1, #0
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7f6 fa4b 	bl	8000230 <memchr>
 8009d9a:	b108      	cbz	r0, 8009da0 <_printf_i+0x1e4>
 8009d9c:	1b80      	subs	r0, r0, r6
 8009d9e:	6060      	str	r0, [r4, #4]
 8009da0:	6863      	ldr	r3, [r4, #4]
 8009da2:	6123      	str	r3, [r4, #16]
 8009da4:	2300      	movs	r3, #0
 8009da6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009daa:	e7aa      	b.n	8009d02 <_printf_i+0x146>
 8009dac:	6923      	ldr	r3, [r4, #16]
 8009dae:	4632      	mov	r2, r6
 8009db0:	4649      	mov	r1, r9
 8009db2:	4640      	mov	r0, r8
 8009db4:	47d0      	blx	sl
 8009db6:	3001      	adds	r0, #1
 8009db8:	d0ad      	beq.n	8009d16 <_printf_i+0x15a>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	079b      	lsls	r3, r3, #30
 8009dbe:	d413      	bmi.n	8009de8 <_printf_i+0x22c>
 8009dc0:	68e0      	ldr	r0, [r4, #12]
 8009dc2:	9b03      	ldr	r3, [sp, #12]
 8009dc4:	4298      	cmp	r0, r3
 8009dc6:	bfb8      	it	lt
 8009dc8:	4618      	movlt	r0, r3
 8009dca:	e7a6      	b.n	8009d1a <_printf_i+0x15e>
 8009dcc:	2301      	movs	r3, #1
 8009dce:	4632      	mov	r2, r6
 8009dd0:	4649      	mov	r1, r9
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	47d0      	blx	sl
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	d09d      	beq.n	8009d16 <_printf_i+0x15a>
 8009dda:	3501      	adds	r5, #1
 8009ddc:	68e3      	ldr	r3, [r4, #12]
 8009dde:	9903      	ldr	r1, [sp, #12]
 8009de0:	1a5b      	subs	r3, r3, r1
 8009de2:	42ab      	cmp	r3, r5
 8009de4:	dcf2      	bgt.n	8009dcc <_printf_i+0x210>
 8009de6:	e7eb      	b.n	8009dc0 <_printf_i+0x204>
 8009de8:	2500      	movs	r5, #0
 8009dea:	f104 0619 	add.w	r6, r4, #25
 8009dee:	e7f5      	b.n	8009ddc <_printf_i+0x220>
 8009df0:	08009f45 	.word	0x08009f45
 8009df4:	08009f56 	.word	0x08009f56

08009df8 <memmove>:
 8009df8:	4288      	cmp	r0, r1
 8009dfa:	b510      	push	{r4, lr}
 8009dfc:	eb01 0402 	add.w	r4, r1, r2
 8009e00:	d902      	bls.n	8009e08 <memmove+0x10>
 8009e02:	4284      	cmp	r4, r0
 8009e04:	4623      	mov	r3, r4
 8009e06:	d807      	bhi.n	8009e18 <memmove+0x20>
 8009e08:	1e43      	subs	r3, r0, #1
 8009e0a:	42a1      	cmp	r1, r4
 8009e0c:	d008      	beq.n	8009e20 <memmove+0x28>
 8009e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e16:	e7f8      	b.n	8009e0a <memmove+0x12>
 8009e18:	4402      	add	r2, r0
 8009e1a:	4601      	mov	r1, r0
 8009e1c:	428a      	cmp	r2, r1
 8009e1e:	d100      	bne.n	8009e22 <memmove+0x2a>
 8009e20:	bd10      	pop	{r4, pc}
 8009e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e2a:	e7f7      	b.n	8009e1c <memmove+0x24>

08009e2c <_sbrk_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d06      	ldr	r5, [pc, #24]	@ (8009e48 <_sbrk_r+0x1c>)
 8009e30:	2300      	movs	r3, #0
 8009e32:	4604      	mov	r4, r0
 8009e34:	4608      	mov	r0, r1
 8009e36:	602b      	str	r3, [r5, #0]
 8009e38:	f7f8 fdd8 	bl	80029ec <_sbrk>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_sbrk_r+0x1a>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_sbrk_r+0x1a>
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	200007f4 	.word	0x200007f4

08009e4c <memcpy>:
 8009e4c:	440a      	add	r2, r1
 8009e4e:	4291      	cmp	r1, r2
 8009e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e54:	d100      	bne.n	8009e58 <memcpy+0xc>
 8009e56:	4770      	bx	lr
 8009e58:	b510      	push	{r4, lr}
 8009e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e62:	4291      	cmp	r1, r2
 8009e64:	d1f9      	bne.n	8009e5a <memcpy+0xe>
 8009e66:	bd10      	pop	{r4, pc}

08009e68 <_realloc_r>:
 8009e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6c:	4607      	mov	r7, r0
 8009e6e:	4614      	mov	r4, r2
 8009e70:	460d      	mov	r5, r1
 8009e72:	b921      	cbnz	r1, 8009e7e <_realloc_r+0x16>
 8009e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e78:	4611      	mov	r1, r2
 8009e7a:	f7ff bc4d 	b.w	8009718 <_malloc_r>
 8009e7e:	b92a      	cbnz	r2, 8009e8c <_realloc_r+0x24>
 8009e80:	f7ff fbde 	bl	8009640 <_free_r>
 8009e84:	4625      	mov	r5, r4
 8009e86:	4628      	mov	r0, r5
 8009e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e8c:	f000 f81a 	bl	8009ec4 <_malloc_usable_size_r>
 8009e90:	4284      	cmp	r4, r0
 8009e92:	4606      	mov	r6, r0
 8009e94:	d802      	bhi.n	8009e9c <_realloc_r+0x34>
 8009e96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e9a:	d8f4      	bhi.n	8009e86 <_realloc_r+0x1e>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	f7ff fc3a 	bl	8009718 <_malloc_r>
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	b908      	cbnz	r0, 8009eac <_realloc_r+0x44>
 8009ea8:	4645      	mov	r5, r8
 8009eaa:	e7ec      	b.n	8009e86 <_realloc_r+0x1e>
 8009eac:	42b4      	cmp	r4, r6
 8009eae:	4622      	mov	r2, r4
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	bf28      	it	cs
 8009eb4:	4632      	movcs	r2, r6
 8009eb6:	f7ff ffc9 	bl	8009e4c <memcpy>
 8009eba:	4629      	mov	r1, r5
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	f7ff fbbf 	bl	8009640 <_free_r>
 8009ec2:	e7f1      	b.n	8009ea8 <_realloc_r+0x40>

08009ec4 <_malloc_usable_size_r>:
 8009ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ec8:	1f18      	subs	r0, r3, #4
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	bfbc      	itt	lt
 8009ece:	580b      	ldrlt	r3, [r1, r0]
 8009ed0:	18c0      	addlt	r0, r0, r3
 8009ed2:	4770      	bx	lr

08009ed4 <_init>:
 8009ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed6:	bf00      	nop
 8009ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eda:	bc08      	pop	{r3}
 8009edc:	469e      	mov	lr, r3
 8009ede:	4770      	bx	lr

08009ee0 <_fini>:
 8009ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee2:	bf00      	nop
 8009ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ee6:	bc08      	pop	{r3}
 8009ee8:	469e      	mov	lr, r3
 8009eea:	4770      	bx	lr
